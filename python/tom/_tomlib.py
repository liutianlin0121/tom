# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '__tomlib')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('__tomlib')
    __tomlib = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('__tomlib', [dirname(__file__)])
        except ImportError:
            import __tomlib
            return __tomlib
        if fp is not None:
            try:
                _mod = imp.load_module('__tomlib', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    __tomlib = swig_import_helper()
    del swig_import_helper
else:
    import __tomlib
# pull in all the attributes from __tomlib
if __name__.rpartition('.')[0] != '':
    if _swig_python_version_info >= (2, 7, 0):
        try:
            from .__tomlib import *
        except ImportError:
            from __tomlib import *
    else:
        from __tomlib import *
else:
    from __tomlib import *
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

class _swig_nondynamic_meta(type):
    def __init__(cls, name, bases, dct):
        # Adds a __setattr__ method to a class.
        super(_swig_nondynamic_meta, cls).__init__(name, bases, dct)
        cls.__setattr__ = cls.__class__.get_setattr(cls)

    @classmethod
    def get_setattr(mcs, cls):
        def setter(self, name, value):
            return _swig_setattr_nondynamic(self, cls, name, value)
        return setter

def _swig_with_metaclass(meta, *bases):
    class metaclass(meta):
        def __new__(cls, name, this_bases, d):
            return meta(name, bases, d)
    return type.__new__(metaclass, 'temporary_class', (), {})


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    if hasattr(class_type, '__swig_setmethods__'):
        method = class_type.__swig_setmethods__.get(name, None)
        if method:
            return method(self, value)
    elif name in class_type.__dict__:
        return class_type.__dict__[name].__set__(self, value)
    elif hasattr(self, name):
        return super(class_type, self).__setattr__(name, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


































