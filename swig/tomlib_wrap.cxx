/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_DIRECTORS
#define SWIG_PYTHON_NO_BUILD_NONE
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE
#define SWIGPYTHON_BUILTIN


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      int i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,				    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,				    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = ((PyTypeObject*) data->newargs)->tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif

#define SWIGPY_UNARYFUNC_CLOSURE(wrapper)	\
SWIGINTERN PyObject *				\
wrapper##_closure(PyObject *a) {		\
  return wrapper(a, NULL);			\
}

#define SWIGPY_DESTRUCTOR_CLOSURE(wrapper)	\
SWIGINTERN void					\
wrapper##_closure(PyObject *a) {		\
    SwigPyObject *sobj;				\
    sobj = (SwigPyObject *)a;			\
    if (sobj->own) {				\
	PyObject *o = wrapper(a, NULL);		\
	Py_XDECREF(o);				\
    }						\
    if (PyType_IS_GC(a->ob_type)) {		\
	PyObject_GC_Del(a);			\
    } else {					\
	PyObject_Del(a);			\
    }						\
}

#define SWIGPY_INQUIRY_CLOSURE(wrapper)				\
SWIGINTERN int							\
wrapper##_closure(PyObject *a) {				\
    PyObject *pyresult;						\
    int result;							\
    pyresult = wrapper(a, NULL);				\
    result = pyresult && PyObject_IsTrue(pyresult) ? 1 : 0;	\
    Py_XDECREF(pyresult);					\
    return result;						\
}

#define SWIGPY_BINARYFUNC_CLOSURE(wrapper)	\
SWIGINTERN PyObject *				\
wrapper##_closure(PyObject *a, PyObject *b) {	\
    PyObject *tuple, *result;			\
    tuple = PyTuple_New(1);			\
    assert(tuple);				\
    PyTuple_SET_ITEM(tuple, 0, b);		\
    Py_XINCREF(b);				\
    result = wrapper(a, tuple);			\
    Py_DECREF(tuple);				\
    return result;				\
}

typedef ternaryfunc ternarycallfunc;

#define SWIGPY_TERNARYFUNC_CLOSURE(wrapper)			\
SWIGINTERN PyObject *						\
wrapper##_closure(PyObject *a, PyObject *b, PyObject *c) {	\
    PyObject *tuple, *result;					\
    tuple = PyTuple_New(2);					\
    assert(tuple);						\
    PyTuple_SET_ITEM(tuple, 0, b);				\
    PyTuple_SET_ITEM(tuple, 1, c);				\
    Py_XINCREF(b);						\
    Py_XINCREF(c);						\
    result = wrapper(a, tuple);					\
    Py_DECREF(tuple);						\
    return result;						\
}

#define SWIGPY_TERNARYCALLFUNC_CLOSURE(wrapper)			\
SWIGINTERN PyObject *						\
wrapper##_closure(PyObject *callable_object, PyObject *args, PyObject *) {	\
    return wrapper(callable_object, args);			\
}

#define SWIGPY_LENFUNC_CLOSURE(wrapper)			\
SWIGINTERN Py_ssize_t					\
wrapper##_closure(PyObject *a) {			\
    PyObject *resultobj;				\
    Py_ssize_t result;					\
    resultobj = wrapper(a, NULL);			\
    result = PyNumber_AsSsize_t(resultobj, NULL);	\
    Py_DECREF(resultobj);				\
    return result;					\
}

#define SWIGPY_SSIZESSIZEARGFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *						\
wrapper##_closure(PyObject *a, Py_ssize_t b, Py_ssize_t c) {	\
    PyObject *tuple, *result;					\
    tuple = PyTuple_New(2);					\
    assert(tuple);						\
    PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));		\
    PyTuple_SET_ITEM(tuple, 1, _PyLong_FromSsize_t(c));		\
    result = wrapper(a, tuple);					\
    Py_DECREF(tuple);						\
    return result;						\
}

#define SWIGPY_SSIZESSIZEOBJARGPROC_CLOSURE(wrapper)			\
SWIGINTERN int								\
wrapper##_closure(PyObject *a, Py_ssize_t b, Py_ssize_t c, PyObject *d) { \
    PyObject *tuple, *resultobj;					\
    int result;								\
    tuple = PyTuple_New(d ? 3 : 2);					\
    assert(tuple);							\
    PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));			\
    PyTuple_SET_ITEM(tuple, 1, _PyLong_FromSsize_t(c));			\
    if (d) {								\
        PyTuple_SET_ITEM(tuple, 2, d);					\
        Py_INCREF(d);							\
    }									\
    resultobj = wrapper(a, tuple);					\
    result = resultobj ? 0 : -1;					\
    Py_DECREF(tuple);							\
    Py_XDECREF(resultobj);						\
    return result;							\
}

#define SWIGPY_SSIZEARGFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_closure(PyObject *a, Py_ssize_t b) {		\
    PyObject *tuple, *result;				\
    tuple = PyTuple_New(1);				\
    assert(tuple);					\
    PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));	\
    result = wrapper(a, tuple);				\
    Py_DECREF(tuple);					\
    return result;					\
}

#define SWIGPY_FUNPACK_SSIZEARGFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_closure(PyObject *a, Py_ssize_t b) {		\
    PyObject *arg, *result;				\
    arg = _PyLong_FromSsize_t(b);			\
    result = wrapper(a, arg);				\
    Py_DECREF(arg);					\
    return result;					\
}

#define SWIGPY_SSIZEOBJARGPROC_CLOSURE(wrapper)			\
SWIGINTERN int							\
wrapper##_closure(PyObject *a, Py_ssize_t b, PyObject *c) {	\
    PyObject *tuple, *resultobj;				\
    int result;							\
    tuple = PyTuple_New(2);					\
    assert(tuple);						\
    PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));		\
    PyTuple_SET_ITEM(tuple, 1, c);				\
    Py_XINCREF(c);						\
    resultobj = wrapper(a, tuple);				\
    result = resultobj ? 0 : -1;				\
    Py_XDECREF(resultobj);					\
    Py_DECREF(tuple);						\
    return result;						\
}

#define SWIGPY_OBJOBJARGPROC_CLOSURE(wrapper)			\
SWIGINTERN int							\
wrapper##_closure(PyObject *a, PyObject *b, PyObject *c) {	\
    PyObject *tuple, *resultobj;				\
    int result;							\
    tuple = PyTuple_New(c ? 2 : 1);				\
    assert(tuple);						\
    PyTuple_SET_ITEM(tuple, 0, b);				\
    Py_XINCREF(b);						\
    if (c) {							\
        PyTuple_SET_ITEM(tuple, 1, c);				\
        Py_XINCREF(c);						\
    }								\
    resultobj = wrapper(a, tuple);				\
    result = resultobj ? 0 : -1;				\
    Py_XDECREF(resultobj);					\
    Py_DECREF(tuple);						\
    return result;						\
}

#define SWIGPY_REPRFUNC_CLOSURE(wrapper)	\
SWIGINTERN PyObject *				\
wrapper##_closure(PyObject *a) {		\
    return wrapper(a, NULL);			\
}

#define SWIGPY_HASHFUNC_CLOSURE(wrapper)	\
SWIGINTERN long					\
wrapper##_closure(PyObject *a) {		\
    PyObject *pyresult;				\
    long result;				\
    pyresult = wrapper(a, NULL);		\
    if (!pyresult || !PyLong_Check(pyresult))	\
	return -1;				\
    result = PyLong_AsLong(pyresult);		\
    Py_DECREF(pyresult);			\
    return result;				\
}

#define SWIGPY_ITERNEXT_CLOSURE(wrapper)	\
SWIGINTERN PyObject *				\
wrapper##_closure(PyObject *a) {		\
    PyObject *result;				\
    result = wrapper(a, NULL);			\
    if (result && result == Py_None) {		\
	Py_DECREF(result);			\
	result = NULL;				\
    }						\
    return result;				\
}

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN int
SwigPyBuiltin_BadInit(PyObject *self, PyObject *SWIGUNUSEDPARM(args), PyObject *SWIGUNUSEDPARM(kwds)) {
  PyErr_Format(PyExc_TypeError, "Cannot create new instances of type '%.300s'", self->ob_type->tp_name);
  return -1;
}

SWIGINTERN void
SwigPyBuiltin_BadDealloc(PyObject *pyobj) {
  SwigPyObject *sobj;
  sobj = (SwigPyObject *)pyobj;
  if (sobj->own) {
    PyErr_Format(PyExc_TypeError, "Swig detected a memory leak in type '%.300s': no callable destructor found.", pyobj->ob_type->tp_name);
  }
}

typedef struct {
  PyCFunction get;
  PyCFunction set;
} SwigPyGetSet;

SWIGINTERN PyObject *
SwigPyBuiltin_GetterClosure (PyObject *obj, void *closure) {
  SwigPyGetSet *getset;
  PyObject *tuple, *result;
  if (!closure)
    return SWIG_Py_Void();
  getset = (SwigPyGetSet *)closure;
  if (!getset->get)
    return SWIG_Py_Void();
  tuple = PyTuple_New(0);
  assert(tuple);
  result = (*getset->get)(obj, tuple);
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyObject *
SwigPyBuiltin_FunpackGetterClosure (PyObject *obj, void *closure) {
  SwigPyGetSet *getset;
  PyObject *result;
  if (!closure)
    return SWIG_Py_Void();
  getset = (SwigPyGetSet *)closure;
  if (!getset->get)
    return SWIG_Py_Void();
  result = (*getset->get)(obj, NULL);
  return result;
}

SWIGINTERN int
SwigPyBuiltin_SetterClosure (PyObject *obj, PyObject *val, void *closure) {
  SwigPyGetSet *getset;
  PyObject *tuple, *result;
  if (!closure) {
    PyErr_Format(PyExc_TypeError, "Missing getset closure");
    return -1;
  }
  getset = (SwigPyGetSet *)closure;
  if (!getset->set) {
    PyErr_Format(PyExc_TypeError, "Illegal member variable assignment in type '%.300s'", obj->ob_type->tp_name);
    return -1;
  }
  tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, val);
  Py_XINCREF(val);
  result = (*getset->set)(obj, tuple);
  Py_DECREF(tuple);
  Py_XDECREF(result);
  return result ? 0 : -1;
}

SWIGINTERN int
SwigPyBuiltin_FunpackSetterClosure (PyObject *obj, PyObject *val, void *closure) {
  SwigPyGetSet *getset;
  PyObject *result;
  if (!closure) {
    PyErr_Format(PyExc_TypeError, "Missing getset closure");
    return -1;
  }
  getset = (SwigPyGetSet *)closure;
  if (!getset->set) {
    PyErr_Format(PyExc_TypeError, "Illegal member variable assignment in type '%.300s'", obj->ob_type->tp_name);
    return -1;
  }
  result = (*getset->set)(obj, val);
  Py_XDECREF(result);
  return result ? 0 : -1;
}

SWIGINTERN void
SwigPyStaticVar_dealloc(PyDescrObject *descr) {
  _PyObject_GC_UNTRACK(descr);
  Py_XDECREF(PyDescr_TYPE(descr));
  Py_XDECREF(PyDescr_NAME(descr));
  PyObject_GC_Del(descr);
}

SWIGINTERN PyObject *
SwigPyStaticVar_repr(PyGetSetDescrObject *descr) {
#if PY_VERSION_HEX >= 0x03000000

  return PyUnicode_FromFormat("<class attribute '%S' of type '%s'>", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  return PyString_FromFormat("<class attribute '%s' of type '%s'>", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
}

SWIGINTERN int
SwigPyStaticVar_traverse(PyObject *self, visitproc visit, void *arg) {
  PyDescrObject *descr;
  descr = (PyDescrObject *)self;
  Py_VISIT((PyObject*) PyDescr_TYPE(descr));
  return 0;
}

SWIGINTERN PyObject *
SwigPyStaticVar_get(PyGetSetDescrObject *descr, PyObject *obj, PyObject *SWIGUNUSEDPARM(type)) {
  if (descr->d_getset->get != NULL)
    return descr->d_getset->get(obj, descr->d_getset->closure);
#if PY_VERSION_HEX >= 0x03000000
  PyErr_Format(PyExc_AttributeError, "attribute '%.300S' of '%.100s' objects is not readable", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  PyErr_Format(PyExc_AttributeError, "attribute '%.300s' of '%.100s' objects is not readable", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
  return NULL;
}

SWIGINTERN int
SwigPyStaticVar_set(PyGetSetDescrObject *descr, PyObject *obj, PyObject *value) {
  if (descr->d_getset->set != NULL)
    return descr->d_getset->set(obj, value, descr->d_getset->closure);
#if PY_VERSION_HEX >= 0x03000000
  PyErr_Format(PyExc_AttributeError, "attribute '%.300S' of '%.100s' objects is not writable", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  PyErr_Format(PyExc_AttributeError, "attribute '%.300s' of '%.100s' objects is not writable", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
  return -1;
}

SWIGINTERN int
SwigPyObjectType_setattro(PyTypeObject *type, PyObject *name, PyObject *value) {
  PyObject *attribute;
  descrsetfunc local_set;
  attribute = _PyType_Lookup(type, name);
  if (attribute != NULL) {
    /* Implement descriptor functionality, if any */
    local_set = attribute->ob_type->tp_descr_set;
    if (local_set != NULL)
      return local_set(attribute, (PyObject *)type, value);
#if PY_VERSION_HEX >= 0x03000000
    PyErr_Format(PyExc_AttributeError, "cannot modify read-only attribute '%.50s.%.400S'", type->tp_name, name);
#else 
    PyErr_Format(PyExc_AttributeError, "cannot modify read-only attribute '%.50s.%.400s'", type->tp_name, PyString_AS_STRING(name));
#endif
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyErr_Format(PyExc_AttributeError, "type '%.50s' has no attribute '%.400S'", type->tp_name, name);
#else
    PyErr_Format(PyExc_AttributeError, "type '%.50s' has no attribute '%.400s'", type->tp_name, PyString_AS_STRING(name));
#endif
  }

  return -1;
}

SWIGINTERN PyTypeObject*
SwigPyStaticVar_Type(void) {
  static PyTypeObject staticvar_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
      PyObject_HEAD_INIT(&PyType_Type)
      0,
#endif
      "swig_static_var_getset_descriptor",
      sizeof(PyGetSetDescrObject),
      0,
      (destructor)SwigPyStaticVar_dealloc,      /* tp_dealloc */
      0,                                        /* tp_print */
      0,                                        /* tp_getattr */
      0,                                        /* tp_setattr */
      0,                                        /* tp_compare */
      (reprfunc)SwigPyStaticVar_repr,           /* tp_repr */
      0,                                        /* tp_as_number */
      0,                                        /* tp_as_sequence */
      0,                                        /* tp_as_mapping */
      0,                                        /* tp_hash */
      0,                                        /* tp_call */
      0,                                        /* tp_str */
      PyObject_GenericGetAttr,                  /* tp_getattro */
      0,                                        /* tp_setattro */
      0,                                        /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_CLASS, /* tp_flags */
      0,                                        /* tp_doc */
      SwigPyStaticVar_traverse,                 /* tp_traverse */
      0,                                        /* tp_clear */
      0,                                        /* tp_richcompare */
      0,                                        /* tp_weaklistoffset */
      0,                                        /* tp_iter */
      0,                                        /* tp_iternext */
      0,                                        /* tp_methods */
      0,                                        /* tp_members */
      0,                                        /* tp_getset */
      0,                                        /* tp_base */
      0,                                        /* tp_dict */
      (descrgetfunc)SwigPyStaticVar_get,        /* tp_descr_get */
      (descrsetfunc)SwigPyStaticVar_set,        /* tp_descr_set */
      0,                                        /* tp_dictoffset */
      0,                                        /* tp_init */
      0,                                        /* tp_alloc */
      0,                                        /* tp_new */
      0,                                        /* tp_free */
      0,                                        /* tp_is_gc */
      0,                                        /* tp_bases */
      0,                                        /* tp_mro */
      0,                                        /* tp_cache */
      0,                                        /* tp_subclasses */
      0,                                        /* tp_weaklist */
#if PY_VERSION_HEX >= 0x02030000
      0,                                        /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                        /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                                   /* tp_alloc -> tp_next */
#endif
    };
    staticvar_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    staticvar_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&staticvar_type) < 0)
      return NULL;
#endif
  }
  return &staticvar_type;
}

SWIGINTERN PyGetSetDescrObject *
SwigPyStaticVar_new_getset(PyTypeObject *type, PyGetSetDef *getset) {

  PyGetSetDescrObject *descr;
  descr = (PyGetSetDescrObject *)PyType_GenericAlloc(SwigPyStaticVar_Type(), 0);
  assert(descr);
  Py_XINCREF(type);
  PyDescr_TYPE(descr) = type;
  PyDescr_NAME(descr) = PyString_InternFromString(getset->name);
  descr->d_getset = getset;
  if (PyDescr_NAME(descr) == NULL) {
    Py_DECREF(descr);
    descr = NULL;
  }
  return descr;
}

SWIGINTERN void
SwigPyBuiltin_InitBases (PyTypeObject *type, PyTypeObject **bases) {
  int base_count = 0;
  PyTypeObject **b;
  PyObject *tuple;
  int i;

  if (!bases[0]) {
    bases[0] = SwigPyObject_type();
    bases[1] = NULL;
  }
  type->tp_base = bases[0];
  Py_INCREF((PyObject *)bases[0]);
  for (b = bases; *b != NULL; ++b)
    ++base_count;
  tuple = PyTuple_New(base_count);
  for (i = 0; i < base_count; ++i) {
    PyTuple_SET_ITEM(tuple, i, (PyObject *)bases[i]);
    Py_INCREF((PyObject *)bases[i]);
  }
  type->tp_bases = tuple;
}

SWIGINTERN PyObject *
SwigPyBuiltin_ThisClosure (PyObject *self, void *SWIGUNUSEDPARM(closure)) {
  PyObject *result;
  result = (PyObject *)SWIG_Python_GetSwigThis(self);
  Py_XINCREF(result);
  return result;
}

SWIGINTERN void
SwigPyBuiltin_SetMetaType (PyTypeObject *type, PyTypeObject *metatype)
{
#if PY_VERSION_HEX >= 0x03000000
    type->ob_base.ob_base.ob_type = metatype;
#else
    type->ob_type = metatype;
#endif
}

#ifdef __cplusplus
}
#endif




#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Python proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>


/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swig.
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/*
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR

namespace Swig {
  class Director;
  SWIGINTERN std::map<void *, Director *>& get_rtdir_map() {
    static std::map<void *, Director *> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void *, Director *>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void *>(ARG))
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void *>(ARG1), ARG2)

#else

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {

  /* memory handler */
  struct GCItem {
    virtual ~GCItem() {}

    virtual int get_own() const {
      return 0;
    }
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem * operator->() const {
      return _item;
    }

  private:
    GCItem *_item;
  };

  struct GCItem_Object : GCItem {
    GCItem_Object(int own) : _own(own) {
    }

    virtual ~GCItem_Object() {
    }

    int get_own() const {
      return _own;
    }

  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem {
    GCArray_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCArray_T() {
      delete[] _ptr;
    }

  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char *hdr ="", const char *msg ="") : swig_msg(hdr) {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (msg[0]) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        PyErr_SetString(error, what());
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
    }

    virtual ~DirectorException() throw() {
    }

    /* Deprecated, use what() instead */
    const char *getMessage() const {
      return what();
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* unknown exception handler  */
  class UnknownExceptionHandler {
#ifdef SWIG_DIRECTOR_UEH
    static void handler() {
      try {
        throw;
      } catch (DirectorException& e) {
        std::cerr << "SWIG Director exception caught:" << std::endl
                  << e.what() << std::endl;
      } catch (std::exception& e) {
        std::cerr << "std::exception caught: "<< e.what() << std::endl;
      } catch (...) {
        std::cerr << "Unknown exception caught." << std::endl;
      }

      std::cerr << std::endl
                << "Python interpreter traceback:" << std::endl;
      PyErr_Print();
      std::cerr << std::endl;

      std::cerr << "This exception was caught by the SWIG unexpected exception handler." << std::endl
                << "Try using %feature(\"director:except\") to avoid reaching this point." << std::endl
                << std::endl
                << "Exception is being re-thrown, program will likely abort/terminate." << std::endl;
      throw;
    }

  public:

    std::unexpected_handler old;
    UnknownExceptionHandler(std::unexpected_handler nh = handler) {
      old = std::set_unexpected(nh);
    }

    ~UnknownExceptionHandler() {
      std::set_unexpected(old);
    }
#endif
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char *msg="")
      : DirectorException(error, "SWIG director type mismatch", msg) {
    }

    DirectorTypeMismatchException(const char *msg="")
      : DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg) {
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg) {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public DirectorException {
  public:
    DirectorMethodException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };


#if defined(SWIG_PYTHON_THREADS)
/*  __THREAD__ is the old macro to activate some thread support */
# if !defined(__THREAD__)
#   define __THREAD__ 1
# endif
#endif

#ifdef __THREAD__
# include "pythread.h"
  class Guard {
    PyThread_type_lock &mutex_;

  public:
    Guard(PyThread_type_lock & mutex) : mutex_(mutex) {
      PyThread_acquire_lock(mutex_, WAIT_LOCK);
    }

    ~Guard() {
      PyThread_release_lock(mutex_);
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex)
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject *swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const {
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_DECREF(swig_self);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }

  public:
    /* wrap a python object, optionally taking ownership */
    Director(PyObject *self) : swig_self(self), swig_disown_flag(false) {
      swig_incref();
    }

    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref();
    }

    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const {
      return swig_self;
    }

    /* acquire ownership of the wrapped python object (the sense of "disown" is from python) */
    void swig_disown() const {
      if (!swig_disown_flag) {
        swig_disown_flag=true;
        swig_incref();
      }
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const {
      if (swig_disown_flag) {
        Py_INCREF(swig_self);
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char * /* swig_protected_method_name */) const {
      return true;
    }

    virtual void swig_set_inner(const char * /* swig_protected_method_name */, bool /* swig_val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void *, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __THREAD__
    static PyThread_type_lock swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }

    template <typename Type>
    void swig_acquire_ownership(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }

    int swig_release_ownership(void *vptr) const {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }

    template <typename Type>
    static PyObject *swig_pyobj_disown(PyObject *pyobj, PyObject *SWIGUNUSEDPARM(args)) {
      SwigPyObject *sobj = (SwigPyObject *)pyobj;
      sobj->own = 0;
      Director *d = SWIG_DIRECTOR_CAST(reinterpret_cast<Type *>(sobj->ptr));
      if (d)
        d->swig_disown();
      return PyWeakref_NewProxy(pyobj, NULL);
    }
  };

#ifdef __THREAD__
  PyThread_type_lock Director::swig_mutex_own = PyThread_allocate_lock();
#endif
}

#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Eigen__ArrayT_double_Eigen__Dynamic_1_t swig_types[0]
#define SWIGTYPE_p_Eigen__ArrayT_double_Eigen__Dynamic_Eigen__Dynamic_t swig_types[1]
#define SWIGTYPE_p_Eigen__ArrayT_float_Eigen__Dynamic_1_t swig_types[2]
#define SWIGTYPE_p_Eigen__ArrayT_float_Eigen__Dynamic_Eigen__Dynamic_t swig_types[3]
#define SWIGTYPE_p_Eigen__ArrayT_int_Eigen__Dynamic_1_t swig_types[4]
#define SWIGTYPE_p_Eigen__ArrayT_int_Eigen__Dynamic_Eigen__Dynamic_t swig_types[5]
#define SWIGTYPE_p_Eigen__MapT_Eigen__ArrayT_double_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t swig_types[6]
#define SWIGTYPE_p_Eigen__MapT_Eigen__ArrayT_double_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t swig_types[7]
#define SWIGTYPE_p_Eigen__MapT_Eigen__ArrayT_float_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t swig_types[8]
#define SWIGTYPE_p_Eigen__MapT_Eigen__ArrayT_float_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t swig_types[9]
#define SWIGTYPE_p_Eigen__MapT_Eigen__ArrayT_int_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t swig_types[10]
#define SWIGTYPE_p_Eigen__MapT_Eigen__ArrayT_int_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t swig_types[11]
#define SWIGTYPE_p_Eigen__MapT_Eigen__ArrayT_long_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t swig_types[12]
#define SWIGTYPE_p_Eigen__MapT_Eigen__ArrayT_long_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t swig_types[13]
#define SWIGTYPE_p_Eigen__MapT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t swig_types[14]
#define SWIGTYPE_p_Eigen__MapT_Eigen__MatrixT_float_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t swig_types[15]
#define SWIGTYPE_p_Eigen__MapT_Eigen__MatrixT_int_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t swig_types[16]
#define SWIGTYPE_p_Eigen__MapT_Eigen__MatrixT_long_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t swig_types[17]
#define SWIGTYPE_p_Eigen__MatrixBaseT_Eigen__MapT_Eigen__ArrayT_double_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t_t swig_types[18]
#define SWIGTYPE_p_Eigen__MatrixBaseT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_t_t swig_types[19]
#define SWIGTYPE_p_Eigen__MatrixT_double_1_Eigen__Dynamic_t swig_types[20]
#define SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_1_t swig_types[21]
#define SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_t swig_types[22]
#define SWIGTYPE_p_Eigen__MatrixT_float_1_Eigen__Dynamic_t swig_types[23]
#define SWIGTYPE_p_Eigen__MatrixT_float_Eigen__Dynamic_1_t swig_types[24]
#define SWIGTYPE_p_Eigen__MatrixT_float_Eigen__Dynamic_Eigen__Dynamic_t swig_types[25]
#define SWIGTYPE_p_Eigen__MatrixT_int_1_Eigen__Dynamic_t swig_types[26]
#define SWIGTYPE_p_Eigen__MatrixT_int_Eigen__Dynamic_1_t swig_types[27]
#define SWIGTYPE_p_Eigen__MatrixT_int_Eigen__Dynamic_Eigen__Dynamic_t swig_types[28]
#define SWIGTYPE_p_Eigen__MatrixXcd swig_types[29]
#define SWIGTYPE_p_Eigen__VectorXcd swig_types[30]
#define SWIGTYPE_p_SwigPyObject swig_types[31]
#define SWIGTYPE_p_allocator_type swig_types[32]
#define SWIGTYPE_p_bool swig_types[33]
#define SWIGTYPE_p_char swig_types[34]
#define SWIGTYPE_p_char_type swig_types[35]
#define SWIGTYPE_p_difference_type swig_types[36]
#define SWIGTYPE_p_double swig_types[37]
#define SWIGTYPE_p_f_enum_std__ios_base__event_r_std__ios_base_int__void swig_types[38]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t swig_types[39]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[40]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[41]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[42]
#define SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[43]
#define SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[44]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[45]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[46]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t swig_types[47]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[48]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[49]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[50]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base swig_types[51]
#define SWIGTYPE_p_first_type swig_types[52]
#define SWIGTYPE_p_float swig_types[53]
#define SWIGTYPE_p_fmtflags swig_types[54]
#define SWIGTYPE_p_int swig_types[55]
#define SWIGTYPE_p_int_type swig_types[56]
#define SWIGTYPE_p_iostate swig_types[57]
#define SWIGTYPE_p_long swig_types[58]
#define SWIGTYPE_p_long_double swig_types[59]
#define SWIGTYPE_p_long_long swig_types[60]
#define SWIGTYPE_p_off_type swig_types[61]
#define SWIGTYPE_p_openmode swig_types[62]
#define SWIGTYPE_p_p_PyObject swig_types[63]
#define SWIGTYPE_p_p_void swig_types[64]
#define SWIGTYPE_p_pos_type swig_types[65]
#define SWIGTYPE_p_second_type swig_types[66]
#define SWIGTYPE_p_seekdir swig_types[67]
#define SWIGTYPE_p_short swig_types[68]
#define SWIGTYPE_p_signed_char swig_types[69]
#define SWIGTYPE_p_size_t swig_types[70]
#define SWIGTYPE_p_size_type swig_types[71]
#define SWIGTYPE_p_state_type swig_types[72]
#define SWIGTYPE_p_std__allocatorT_double_t swig_types[73]
#define SWIGTYPE_p_std__allocatorT_int_t swig_types[74]
#define SWIGTYPE_p_std__allocatorT_tom__Sequence_t swig_types[75]
#define SWIGTYPE_p_std__allocatorT_unsigned_int_t swig_types[76]
#define SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t swig_types[77]
#define SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[78]
#define SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[79]
#define SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[80]
#define SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t swig_types[81]
#define SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t swig_types[82]
#define SWIGTYPE_p_std__invalid_argument swig_types[83]
#define SWIGTYPE_p_std__ios_base swig_types[84]
#define SWIGTYPE_p_std__locale swig_types[85]
#define SWIGTYPE_p_std__pairT_int_int_t swig_types[86]
#define SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t swig_types[87]
#define SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t swig_types[88]
#define SWIGTYPE_p_std__shared_ptrT_stree__STree_t swig_types[89]
#define SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t swig_types[90]
#define SWIGTYPE_p_std__shared_ptrT_tom__Oom_t swig_types[91]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[92]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[93]
#define SWIGTYPE_p_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t swig_types[94]
#define SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t swig_types[95]
#define SWIGTYPE_p_streamoff swig_types[96]
#define SWIGTYPE_p_streampos swig_types[97]
#define SWIGTYPE_p_stree__DFSIterator swig_types[98]
#define SWIGTYPE_p_stree__PostfixIterator swig_types[99]
#define SWIGTYPE_p_stree__PrefixIterator swig_types[100]
#define SWIGTYPE_p_stree__STree swig_types[101]
#define SWIGTYPE_p_stree__STreeEdge swig_types[102]
#define SWIGTYPE_p_stree__STreeNode swig_types[103]
#define SWIGTYPE_p_stree__STreePath swig_types[104]
#define SWIGTYPE_p_stree__STreePos swig_types[105]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[106]
#define SWIGTYPE_p_tom__EMStopCondition swig_types[107]
#define SWIGTYPE_p_tom__Estimator swig_types[108]
#define SWIGTYPE_p_tom__Hmm swig_types[109]
#define SWIGTYPE_p_tom__Oom swig_types[110]
#define SWIGTYPE_p_tom__Policy swig_types[111]
#define SWIGTYPE_p_tom__Random swig_types[112]
#define SWIGTYPE_p_tom__Sequence swig_types[113]
#define SWIGTYPE_p_traits_type swig_types[114]
#define SWIGTYPE_p_unsigned_char swig_types[115]
#define SWIGTYPE_p_unsigned_int swig_types[116]
#define SWIGTYPE_p_unsigned_long swig_types[117]
#define SWIGTYPE_p_unsigned_long_long swig_types[118]
#define SWIGTYPE_p_unsigned_short swig_types[119]
#define SWIGTYPE_p_value_type swig_types[120]
static swig_type_info *swig_types[122];
static swig_module_info swig_module = {swig_types, 121, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif
#if (PY_VERSION_HEX <= 0x02020000)
# error "This python version requires swig to be run with the '-nomodern' option"
#endif
#if (PY_VERSION_HEX <= 0x02020000)
# error "This python version requires swig to be run with the '-nomodernargs' option"
#endif
#ifndef METH_O
# error "This python version requires swig to be run with the '-nofastunpack' option"
#endif
#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _tomlib.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__tomlib

#else
#  define SWIG_init    init_tomlib

#endif
#define SWIG_name    "_tomlib"

#define SWIGVERSION 0x030005 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <stddef.h>

 
#define SWIG_FILE_WITH_INIT
#include "../include/tom/tom.h"
// Turn off an annoying warning (HACK!):
#pragma GCC diagnostic ignored "-Warray-bounds"


#include "../include/external/Eigen/Core"


#ifndef SWIG_FILE_WITH_INIT
#define NO_IMPORT_ARRAY
#endif
#include "stdio.h"
#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#include <numpy/arrayobject.h>


	typedef Eigen::Map<Eigen::Matrix<    int, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> >  MatrixMi;
	typedef Eigen::Map<Eigen::Matrix<   long, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> >  MatrixMl;
	typedef Eigen::Map<Eigen::Matrix<  float, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> >  MatrixMf;
	typedef Eigen::Map<Eigen::Matrix< double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> >  MatrixMd;
	typedef Eigen::Map<Eigen::Array<     int, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> >  ArrayMMi;
	typedef Eigen::Map<Eigen::Array<    long, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> >  ArrayMMl;
	typedef Eigen::Map<Eigen::Array<   float, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> >  ArrayMMf;
	typedef Eigen::Map<Eigen::Array<  double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> >  ArrayMMd;
	typedef Eigen::Map<Eigen::Array<     int, Eigen::Dynamic, 1>, 0, Eigen::InnerStride<Eigen::Dynamic> >  ArrayMi;
	typedef Eigen::Map<Eigen::Array<    long, Eigen::Dynamic, 1>, 0, Eigen::InnerStride<Eigen::Dynamic> >  ArrayMl;
	typedef Eigen::Map<Eigen::Array<   float, Eigen::Dynamic, 1>, 0, Eigen::InnerStride<Eigen::Dynamic> >  ArrayMf;
	typedef Eigen::Map<Eigen::Array<  double, Eigen::Dynamic, 1>, 0, Eigen::InnerStride<Eigen::Dynamic> >  ArrayMd;


#include <cassert>
#include <stdexcept>


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


#include <string>


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <utility>


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


namespace swig {
  template <> struct traits<int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };  
  template <>  struct traits_asval<int > {   
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_int (obj, val);
    }
  };
  template <>  struct traits_from<int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int  (val);
    }
  };
}


  namespace swig {

















































    template <class T, class U >
    struct traits_asptr<std::pair<T,U> >  {
      typedef std::pair<T,U> value_type;

      static int get_pair(PyObject* first, PyObject* second,
			  std::pair<T,U> **val) 
      {
	if (val) {
	  value_type *vp = (new std::pair<T,U>);
	  T *pfirst = &(vp->first);
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) return res1;
	  U *psecond = &(vp->second);
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) return res2;
	  *val = vp;
	  return SWIG_AddNewMask(res1 > res2 ? res1 : res2);
	} else {
	  T *pfirst = 0;
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) return res1;
	  U *psecond = 0;
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) return res2;
	  return res1 > res2 ? res1 : res2;
	}	
      }

      static int asptr(PyObject *obj, std::pair<T,U> **val) {
	int res = SWIG_ERROR;
	if (PyTuple_Check(obj)) {
	  if (PyTuple_GET_SIZE(obj) == 2) {
	    res = get_pair(PyTuple_GET_ITEM(obj,0),PyTuple_GET_ITEM(obj,1), val);
	  }
	} else if (PySequence_Check(obj)) {
	  if (PySequence_Size(obj) == 2) {
	    swig::SwigVar_PyObject first = PySequence_GetItem(obj,0);
	    swig::SwigVar_PyObject second = PySequence_GetItem(obj,1);
	    res = get_pair(first, second, val);
	  }
	} else {
	  value_type *p;
	  res = SWIG_ConvertPtr(obj,(void**)&p,swig::type_info<value_type>(),0);
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	return res;
      }
    };


    template <class T, class U >
    struct traits_from<std::pair<T,U> >   {
      static PyObject *from(const std::pair<T,U>& val) {
	PyObject* obj = PyTuple_New(2);
	PyTuple_SetItem(obj,0,swig::from(val.first));
	PyTuple_SetItem(obj,1,swig::from(val.second));
	return obj;
      }
    };
  }


SWIGINTERN Py_ssize_t
SwigPython_std_pair_len (PyObject *a)
{
    return 2;
}

SWIGINTERN PyObject*
SwigPython_std_pair_repr (PyObject *o)
{
    PyObject *tuple = PyTuple_New(2);
    assert(tuple);
    PyTuple_SET_ITEM(tuple, 0, PyObject_GetAttrString(o, (char*) "first"));
    PyTuple_SET_ITEM(tuple, 1, PyObject_GetAttrString(o, (char*) "second"));
    PyObject *result = PyObject_Repr(tuple);
    Py_DECREF(tuple);
    return result;
}

SWIGINTERN PyObject*
SwigPython_std_pair_getitem (PyObject *a, Py_ssize_t b)
{
    PyObject *result = PyObject_GetAttrString(a, b % 2 ? (char*) "second" : (char*) "first");
    return result;
}

SWIGINTERN int
SwigPython_std_pair_setitem (PyObject *a, Py_ssize_t b, PyObject *c)
{
    int result = PyObject_SetAttrString(a, b % 2 ? (char*) "second" : (char*) "first", c);
    return result;
}




      namespace swig {
	template <>  struct traits<std::pair<int,int > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "int" "," "int" " >";
	  }
	};
      }
    

#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
#if PY_VERSION_HEX >= 0x03000000
      {
        long v = PyLong_AsLong(obj);
        if (!PyErr_Occurred()) {
          if (v < 0) {
            return SWIG_OverflowError;
          }
        } else {
          PyErr_Clear();
        }
      }
#endif
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  #define SWIG_From_long   PyLong_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <algorithm>


#include <vector>


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if ( j < 0 ) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      if (ii > jj) {
        typename Sequence::const_reverse_iterator sb = self->rbegin();
        typename Sequence::const_reverse_iterator se = self->rbegin();
        std::advance(sb,size-ii-1);
        std::advance(se,size-jj-1);
        typename Sequence::const_reverse_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<-step && it!=se; ++c)
            it++;
        }
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj < ii)
        jj = ii;
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount; ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      if (jj > ii)
        jj = ii;
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount; ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj > ii) {
        typename Sequence::iterator sb = self->begin();
        std::advance(sb,ii);
        if (step == 1) {
          typename Sequence::iterator se = self->begin();
          std::advance(se,jj);
          self->erase(sb,se);
        } else {
          typename Sequence::iterator it = sb;
          size_t delcount = (jj - ii + step - 1) / step;
          while (delcount) {
            it = self->erase(it);
            for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
              it++;
            delcount--;
          }
        }
      }
    } else {
      if (ii > jj) {
        typename Sequence::reverse_iterator sb = self->rbegin();
        std::advance(sb,size-ii-1);
        typename Sequence::reverse_iterator it = sb;
        size_t delcount = (ii - jj - step - 1) / -step;
        while (delcount) {
          it = typename Sequence::reverse_iterator(self->erase((++it).base()));
          for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
            it++;
          delcount--;
        }
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<int, std::allocator< int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "int" "," "std::allocator< int >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_int_Sg__iterator(std::vector< int > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_int_Sg____nonzero__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_int_Sg____bool__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< int >::size_type std_vector_Sl_int_Sg____len__(std::vector< int > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyLong_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}

SWIGINTERN std::vector< int >::value_type std_vector_Sl_int_Sg__pop(std::vector< int > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<int,std::allocator< int > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setslice____SWIG_0(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j,std::vector< int,std::allocator< int > > const &v=std::vector< int,std::allocator< int > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem____SWIG_0(std::vector< int > *self,std::vector< int >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getitem____SWIG_0(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<int,std::allocator< int > >::difference_type id = i;
      std::vector<int,std::allocator< int > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_0(std::vector< int > *self,PySliceObject *slice,std::vector< int,std::allocator< int > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<int,std::allocator< int > >::difference_type id = i;
      std::vector<int,std::allocator< int > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_1(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<int,std::allocator< int > >::difference_type id = i;
      std::vector<int,std::allocator< int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem____SWIG_1(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<int,std::allocator< int > >::difference_type id = i;
      std::vector<int,std::allocator< int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg____getitem____SWIG_1(std::vector< int > const *self,std::vector< int >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_2(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_3(std::vector< int > *self,std::vector< int >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN void std_vector_Sl_int_Sg__append(std::vector< int > *self,std::vector< int >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< int >::iterator std_vector_Sl_int_Sg__erase__SWIG_0(std::vector< int > *self,std::vector< int >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< int >::iterator std_vector_Sl_int_Sg__erase__SWIG_1(std::vector< int > *self,std::vector< int >::iterator first,std::vector< int >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< int >::iterator std_vector_Sl_int_Sg__insert__SWIG_0(std::vector< int > *self,std::vector< int >::iterator pos,std::vector< int >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_int_Sg__insert__SWIG_1(std::vector< int > *self,std::vector< int >::iterator pos,std::vector< int >::size_type n,std::vector< int >::value_type const &x){ self->insert(pos, n, x); }

  #define SWIG_From_double   PyFloat_FromDouble 


namespace swig {
  template <> struct traits<double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };  
  template <>  struct traits_asval<double > {   
    typedef double value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from<double > {
    typedef double value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<double, std::allocator< double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "double" "," "std::allocator< double >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_double_Sg__iterator(std::vector< double > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_double_Sg____nonzero__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_double_Sg____bool__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< double >::size_type std_vector_Sl_double_Sg____len__(std::vector< double > const *self){
      return self->size();
    }
SWIGINTERN std::vector< double >::value_type std_vector_Sl_double_Sg__pop(std::vector< double > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<double,std::allocator< double > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j,std::vector< double,std::allocator< double > > const &v=std::vector< double,std::allocator< double > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getitem____SWIG_0(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<double,std::allocator< double > >::difference_type id = i;
      std::vector<double,std::allocator< double > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_0(std::vector< double > *self,PySliceObject *slice,std::vector< double,std::allocator< double > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<double,std::allocator< double > >::difference_type id = i;
      std::vector<double,std::allocator< double > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_1(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<double,std::allocator< double > >::difference_type id = i;
      std::vector<double,std::allocator< double > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_1(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<double,std::allocator< double > >::difference_type id = i;
      std::vector<double,std::allocator< double > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg____getitem____SWIG_1(std::vector< double > const *self,std::vector< double >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_2(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_3(std::vector< double > *self,std::vector< double >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN void std_vector_Sl_double_Sg__append(std::vector< double > *self,std::vector< double >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_0(std::vector< double > *self,std::vector< double >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_1(std::vector< double > *self,std::vector< double >::iterator first,std::vector< double >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__insert__SWIG_0(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_double_Sg__insert__SWIG_1(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::size_type n,std::vector< double >::value_type const &x){ self->insert(pos, n, x); }

#ifndef SWIG_STD_NOMODERN_STL
# include <ios>
#else
# include <streambuf.h>
#endif


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if PY_VERSION_HEX >= 0x03010000
      return PyUnicode_DecodeUTF8(carray, static_cast< int >(size), "surrogateescape");
#else
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (PyObject * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


#include <iostream>


SWIGINTERN int
SWIG_AsVal_short (PyObject * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (PyObject * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}

SWIGINTERN std::basic_ostream< char,std::char_traits< char > > &std_basic_ostream_Sl_char_Sg__operator_Sl__Sl___SWIG_17(std::basic_ostream< char > *self,std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &s){
	  *self << s;
	  return *self;
	}




#if NPY_API_VERSION < 0x00000007
#define NPY_ARRAY_DEFAULT NPY_DEFAULT
#define NPY_ARRAY_FARRAY  NPY_FARRAY
#define NPY_FORTRANORDER  NPY_FORTRAN
#endif


/* Macros to extract array attributes.
 */
#if NPY_API_VERSION < 0x00000007
#define is_array(a)            ((a) && PyArray_Check((PyArrayObject*)a))
#define array_type(a)          (int)(PyArray_TYPE((PyArrayObject*)a))
#define array_numdims(a)       (((PyArrayObject*)a)->nd)
#define array_dimensions(a)    (((PyArrayObject*)a)->dimensions)
#define array_size(a,i)        (((PyArrayObject*)a)->dimensions[i])
#define array_strides(a)       (((PyArrayObject*)a)->strides)
#define array_stride(a,i)      (((PyArrayObject*)a)->strides[i])
#define array_data(a)          (((PyArrayObject*)a)->data)
#define array_descr(a)         (((PyArrayObject*)a)->descr)
#define array_flags(a)         (((PyArrayObject*)a)->flags)
#define array_enableflags(a,f) (((PyArrayObject*)a)->flags) = f
#else
#define is_array(a)            ((a) && PyArray_Check(a))
#define array_type(a)          PyArray_TYPE((PyArrayObject*)a)
#define array_numdims(a)       PyArray_NDIM((PyArrayObject*)a)
#define array_dimensions(a)    PyArray_DIMS((PyArrayObject*)a)
#define array_strides(a)       PyArray_STRIDES((PyArrayObject*)a)
#define array_stride(a,i)      PyArray_STRIDE((PyArrayObject*)a,i)
#define array_size(a,i)        PyArray_DIM((PyArrayObject*)a,i)
#define array_data(a)          PyArray_DATA((PyArrayObject*)a)
#define array_descr(a)         PyArray_DESCR((PyArrayObject*)a)
#define array_flags(a)         PyArray_FLAGS((PyArrayObject*)a)
#define array_enableflags(a,f) PyArray_ENABLEFLAGS((PyArrayObject*)a,f)
#endif
#define array_is_contiguous(a) (PyArray_ISCONTIGUOUS((PyArrayObject*)a))
#define array_is_native(a)     (PyArray_ISNOTSWAPPED((PyArrayObject*)a))
#define array_is_fortran(a)    (PyArray_ISFORTRAN((PyArrayObject*)a))


  /* Given a PyObject, return a string describing its type.
   */
  const char* pytype_string(PyObject* py_obj)
  {
    if (py_obj == NULL          ) return "C NULL value";
    if (py_obj == Py_None       ) return "Python None" ;
    if (PyCallable_Check(py_obj)) return "callable"    ;
    if (PyString_Check(  py_obj)) return "string"      ;
    if (PyInt_Check(     py_obj)) return "int"         ;
    if (PyFloat_Check(   py_obj)) return "float"       ;
    if (PyDict_Check(    py_obj)) return "dict"        ;
    if (PyList_Check(    py_obj)) return "list"        ;
    if (PyTuple_Check(   py_obj)) return "tuple"       ;
#if PY_MAJOR_VERSION < 3
    if (PyFile_Check(    py_obj)) return "file"        ;
    if (PyModule_Check(  py_obj)) return "module"      ;
    if (PyInstance_Check(py_obj)) return "instance"    ;
#endif

    return "unkown type";
  }

  /* Given a NumPy typecode, return a string describing the type.
   */
  const char* typecode_string(int typecode)
  {
    static const char* type_names[25] = {"bool",
                                         "byte",
                                         "unsigned byte",
                                         "short",
                                         "unsigned short",
                                         "int",
                                         "unsigned int",
                                         "long",
                                         "unsigned long",
                                         "long long",
                                         "unsigned long long",
                                         "float",
                                         "double",
                                         "long double",
                                         "complex float",
                                         "complex double",
                                         "complex long double",
                                         "object",
                                         "string",
                                         "unicode",
                                         "void",
                                         "ntypes",
                                         "notype",
                                         "char",
                                         "unknown"};
    return typecode < 24 ? type_names[typecode] : type_names[24];
  }

  /* Make sure input has correct numpy type.  This now just calls
     PyArray_EquivTypenums().
   */
  int type_match(int actual_type,
                 int desired_type)
  {
    return PyArray_EquivTypenums(actual_type, desired_type);
  }

#ifdef SWIGPY_USE_CAPSULE
  void free_cap(PyObject * cap)
  {
    void* array = (void*) PyCapsule_GetPointer(cap,SWIGPY_CAPSULE_NAME);
    if (array != NULL) free(array);
  }
#endif




  /* Given a PyObject pointer, cast it to a PyArrayObject pointer if
   * legal.  If not, set the python error string appropriately and
   * return NULL.
   */
  PyArrayObject* obj_to_array_no_conversion(PyObject* input,
                                            int        typecode)
  {
    PyArrayObject* ary = NULL;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input), typecode)))
    {
      ary = (PyArrayObject*) input;
    }
    else if is_array(input)
    {
      const char* desired_type = typecode_string(typecode);
      const char* actual_type  = typecode_string(array_type(input));
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  Array of type '%s' given",
                   desired_type, actual_type);
      ary = NULL;
    }
    else
    {
      const char* desired_type = typecode_string(typecode);
      const char* actual_type  = pytype_string(input);
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  A '%s' was given",
                   desired_type,
                   actual_type);
      ary = NULL;
    }
    return ary;
  }

  /* Convert the given PyObject to a NumPy array with the given
   * typecode.  On success, return a valid PyArrayObject* with the
   * correct type.  On failure, the python error string will be set and
   * the routine returns NULL.
   */
  PyArrayObject* obj_to_array_allow_conversion(PyObject* input,
                                               int       typecode,
                                               int*      is_new_object)
  {
    PyArrayObject* ary = NULL;
    PyObject*      py_obj;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input),typecode)))
    {
      ary = (PyArrayObject*) input;
      *is_new_object = 0;
    }
    else
    {
      py_obj = PyArray_FROMANY(input, typecode, 0, 0, NPY_ARRAY_DEFAULT);
      /* If NULL, PyArray_FromObject will have set python error value.*/
      ary = (PyArrayObject*) py_obj;
      *is_new_object = 1;
    }
    return ary;
  }

  /* Given a PyArrayObject, check to see if it is contiguous.  If so,
   * return the input pointer and flag it as not a new object.  If it is
   * not contiguous, create a new PyArrayObject using the original data,
   * flag it as a new object and return the pointer.
   */
  PyArrayObject* make_contiguous(PyArrayObject* ary,
                                 int*           is_new_object,
                                 int            min_dims,
                                 int            max_dims)
  {
    PyArrayObject* result;
    if (array_is_contiguous(ary))
    {
      result = ary;
      *is_new_object = 0;
    }
    else
    {
      result = (PyArrayObject*) PyArray_ContiguousFromObject((PyObject*)ary,
                                                              array_type(ary),
                                                              min_dims,
                                                              max_dims);
      *is_new_object = 1;
    }
    return result;
  }

  /* Given a PyArrayObject, check to see if it is Fortran-contiguous.
   * If so, return the input pointer, but do not flag it as not a new
   * object.  If it is not Fortran-contiguous, create a new
   * PyArrayObject using the original data, flag it as a new object
   * and return the pointer.
   */
  PyArrayObject* make_fortran(PyArrayObject* ary,
                              int*           is_new_object)
  {
    PyArrayObject* result;
    if (array_is_fortran(ary))
    {
      result = ary;
      *is_new_object = 0;
    }
    else
    {
      Py_INCREF(array_descr(ary));
      result = (PyArrayObject*) PyArray_FromArray(ary,
                                                  array_descr(ary),
                                                  NPY_FORTRANORDER);
      *is_new_object = 1;
    }
    return result;
  }

  /* Convert a given PyObject to a contiguous PyArrayObject of the
   * specified type.  If the input object is not a contiguous
   * PyArrayObject, a new one will be created and the new object flag
   * will be set.
   */
  PyArrayObject* obj_to_array_contiguous_allow_conversion(PyObject* input,
                                                          int       typecode,
                                                          int*      is_new_object)
  {
    int is_new1 = 0;
    int is_new2 = 0;
    PyArrayObject* ary2;
    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
                                                        typecode,
                                                        &is_new1);
    if (ary1)
    {
      ary2 = make_contiguous(ary1, &is_new2, 0, 0);
      if ( is_new1 && is_new2)
      {
        Py_DECREF(ary1);
      }
      ary1 = ary2;
    }
    *is_new_object = is_new1 || is_new2;
    return ary1;
  }

  /* Convert a given PyObject to a Fortran-ordered PyArrayObject of the
   * specified type.  If the input object is not a Fortran-ordered
   * PyArrayObject, a new one will be created and the new object flag
   * will be set.
   */
  PyArrayObject* obj_to_array_fortran_allow_conversion(PyObject* input,
                                                       int       typecode,
                                                       int*      is_new_object)
  {
    int is_new1 = 0;
    int is_new2 = 0;
    PyArrayObject* ary2;
    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
                                                        typecode,
                                                        &is_new1);
    if (ary1)
    {
      ary2 = make_fortran(ary1, &is_new2);
      if (is_new1 && is_new2)
      {
        Py_DECREF(ary1);
      }
      ary1 = ary2;
    }
    *is_new_object = is_new1 || is_new2;
    return ary1;
  }


  /* Test whether a python object is contiguous.  If array is
   * contiguous, return 1.  Otherwise, set the python error string and
   * return 0.
   */
  int require_contiguous(PyArrayObject* ary)
  {
    int contiguous = 1;
    if (!array_is_contiguous(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must be contiguous.  A non-contiguous array was given");
      contiguous = 0;
    }
    return contiguous;
  }

  /* Require that a numpy array is not byte-swapped.  If the array is
   * not byte-swapped, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_native(PyArrayObject* ary)
  {
    int native = 1;
    if (!array_is_native(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must have native byteorder.  "
                      "A byte-swapped array was given");
      native = 0;
    }
    return native;
  }

  /* Require the given PyArrayObject to have a specified number of
   * dimensions.  If the array has the specified number of dimensions,
   * return 1.  Otherwise, set the python error string and return 0.
   */
  int require_dimensions(PyArrayObject* ary,
                         int            exact_dimensions)
  {
    int success = 1;
    if (array_numdims(ary) != exact_dimensions)
    {
      PyErr_Format(PyExc_TypeError,
                   "Array must have %d dimensions.  Given array has %d dimensions",
                   exact_dimensions,
                   array_numdims(ary));
      success = 0;
    }
    return success;
  }

  /* Require the given PyArrayObject to have one of a list of specified
   * number of dimensions.  If the array has one of the specified number
   * of dimensions, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_dimensions_n(PyArrayObject* ary,
                           int*           exact_dimensions,
                           int            n)
  {
    int success = 0;
    int i;
    char dims_str[255] = "";
    char s[255];
    for (i = 0; i < n && !success; i++)
    {
      if (array_numdims(ary) == exact_dimensions[i])
      {
        success = 1;
      }
    }
    if (!success)
    {
      for (i = 0; i < n-1; i++)
      {
        sprintf(s, "%d, ", exact_dimensions[i]);
        strcat(dims_str,s);
      }
      sprintf(s, " or %d", exact_dimensions[n-1]);
      strcat(dims_str,s);
      PyErr_Format(PyExc_TypeError,
                   "Array must have %s dimensions.  Given array has %d dimensions",
                   dims_str,
                   array_numdims(ary));
    }
    return success;
  }

  /* Require the given PyArrayObject to have a specified shape.  If the
   * array has the specified shape, return 1.  Otherwise, set the python
   * error string and return 0.
   */
  int require_size(PyArrayObject* ary,
                   npy_intp*      size,
                   int            n)
  {
    int i;
    int success = 1;
    int len;
    char desired_dims[255] = "[";
    char s[255];
    char actual_dims[255] = "[";
    for(i=0; i < n;i++)
    {
      if (size[i] != -1 &&  size[i] != array_size(ary,i))
      {
        success = 0;
      }
    }
    if (!success)
    {
      for (i = 0; i < n; i++)
      {
        if (size[i] == -1)
        {
          sprintf(s, "*,");
        }
        else
        {
          sprintf(s, "%ld,", (long int)size[i]);
        }
        strcat(desired_dims,s);
      }
      len = strlen(desired_dims);
      desired_dims[len-1] = ']';
      for (i = 0; i < n; i++)
      {
        sprintf(s, "%ld,", (long int)array_size(ary,i));
        strcat(actual_dims,s);
      }
      len = strlen(actual_dims);
      actual_dims[len-1] = ']';
      PyErr_Format(PyExc_TypeError,
                   "Array must have shape of %s.  Given array has shape of %s",
                   desired_dims,
                   actual_dims);
    }
    return success;
  }

  /* Require the given PyArrayObject to to be Fortran ordered.  If the
   * the PyArrayObject is already Fortran ordered, do nothing.  Else,
   * set the Fortran ordering flag and recompute the strides.
   */
  int require_fortran(PyArrayObject* ary)
  {
    int success = 1;
    int nd = array_numdims(ary);
    int i;
    npy_intp * strides = array_strides(ary);
    if (array_is_fortran(ary)) return success;
    /* Set the Fortran ordered flag */
    array_enableflags(ary,NPY_ARRAY_FARRAY);
    /* Recompute the strides */
    strides[0] = strides[nd-1];
    for (i=1; i < nd; ++i)
      strides[i] = strides[i-1] * array_size(ary,i-1);
    return success;
  }




/* Functions to handle Eigen objects wrapped inside a PyCapsule or PyCObject */
#if NPY_API_VERSION < 0x00000007
  #define array_setbase(a,b)     (PyArray_BASE(a)=b)
#else
  #define array_setbase(a,b)     (PyArray_SetBaseObject((PyArrayObject *)a,b))
#endif

#ifdef SWIGPY_USE_CAPSULE
  #define encapsulate(cobj, ...) (PyCapsule_New(cobj,SWIGPY_CAPSULE_NAME, __VA_ARGS__))
	template <typename T_Ptr>
	void clean(PyObject* obj) {
		void* data = (void*) PyCapsule_GetPointer(obj,SWIGPY_CAPSULE_NAME);
		if (data != NULL) delete (T_Ptr) data;
	}
#else
  #define encapsulate(cobj, ...) (PyCObject_FromVoidPtr(cobj, __VA_ARGS__))
	template <typename T_Ptr>
	void clean(void* obj) { if (data != NULL) delete (T_Ptr) data; }
#endif


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}

SWIGINTERN long tom_Sequence___len__(tom::Sequence const *self){ return self->size(); }
SWIGINTERN tom::Symbol tom_Sequence___getitem__(tom::Sequence *self,long i){
	if (i < 0) i = i + self->size();
	if ((i < 0) or (i >= self->size()))
		throw std::out_of_range("Index out of bounds");
	return (*(self))[i];
}
SWIGINTERN void tom_Sequence___setitem__(tom::Sequence *self,long i,tom::Symbol const &val){
	if (i < 0) i = i + self->size();
	if ((i < 0) or (i >= self->size()))
		throw std::out_of_range("Index out of bounds");
	(*(self))[i] = val;
}

  namespace swig {
    template <>  struct traits<tom::Sequence > {
      typedef pointer_category category;
      static const char* type_name() { return"tom::Sequence"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<tom::Sequence, std::allocator< tom::Sequence > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "tom::Sequence" "," "std::allocator< tom::Sequence >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_tom_Sequence_Sg__iterator(std::vector< tom::Sequence > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_tom_Sequence_Sg____nonzero__(std::vector< tom::Sequence > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_tom_Sequence_Sg____bool__(std::vector< tom::Sequence > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< tom::Sequence >::size_type std_vector_Sl_tom_Sequence_Sg____len__(std::vector< tom::Sequence > const *self){
      return self->size();
    }
SWIGINTERN std::vector< tom::Sequence >::value_type std_vector_Sl_tom_Sequence_Sg__pop(std::vector< tom::Sequence > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<tom::Sequence,std::allocator< tom::Sequence > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< tom::Sequence,std::allocator< tom::Sequence > > *std_vector_Sl_tom_Sequence_Sg____getslice__(std::vector< tom::Sequence > *self,std::vector< tom::Sequence >::difference_type i,std::vector< tom::Sequence >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }

struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN


#define SWIG_NO_NULL_DELETER_SWIG_BUILTIN_INIT

SWIGINTERN void std_vector_Sl_tom_Sequence_Sg____setslice____SWIG_0(std::vector< tom::Sequence > *self,std::vector< tom::Sequence >::difference_type i,std::vector< tom::Sequence >::difference_type j,std::vector< tom::Sequence,std::allocator< tom::Sequence > > const &v=std::vector< tom::Sequence,std::allocator< tom::Sequence > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_tom_Sequence_Sg____delslice__(std::vector< tom::Sequence > *self,std::vector< tom::Sequence >::difference_type i,std::vector< tom::Sequence >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_tom_Sequence_Sg____delitem____SWIG_0(std::vector< tom::Sequence > *self,std::vector< tom::Sequence >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< tom::Sequence,std::allocator< tom::Sequence > > *std_vector_Sl_tom_Sequence_Sg____getitem____SWIG_0(std::vector< tom::Sequence > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<tom::Sequence,std::allocator< tom::Sequence > >::difference_type id = i;
      std::vector<tom::Sequence,std::allocator< tom::Sequence > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_tom_Sequence_Sg____setitem____SWIG_0(std::vector< tom::Sequence > *self,PySliceObject *slice,std::vector< tom::Sequence,std::allocator< tom::Sequence > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<tom::Sequence,std::allocator< tom::Sequence > >::difference_type id = i;
      std::vector<tom::Sequence,std::allocator< tom::Sequence > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_tom_Sequence_Sg____setitem____SWIG_1(std::vector< tom::Sequence > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<tom::Sequence,std::allocator< tom::Sequence > >::difference_type id = i;
      std::vector<tom::Sequence,std::allocator< tom::Sequence > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_tom_Sequence_Sg____delitem____SWIG_1(std::vector< tom::Sequence > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<tom::Sequence,std::allocator< tom::Sequence > >::difference_type id = i;
      std::vector<tom::Sequence,std::allocator< tom::Sequence > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< tom::Sequence >::value_type const &std_vector_Sl_tom_Sequence_Sg____getitem____SWIG_1(std::vector< tom::Sequence > const *self,std::vector< tom::Sequence >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_tom_Sequence_Sg____setitem____SWIG_2(std::vector< tom::Sequence > *self,std::vector< tom::Sequence >::difference_type i,std::vector< tom::Sequence >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_tom_Sequence_Sg____setitem____SWIG_3(std::vector< tom::Sequence > *self,std::vector< tom::Sequence >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN void std_vector_Sl_tom_Sequence_Sg__append(std::vector< tom::Sequence > *self,std::vector< tom::Sequence >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< tom::Sequence >::iterator std_vector_Sl_tom_Sequence_Sg__erase__SWIG_0(std::vector< tom::Sequence > *self,std::vector< tom::Sequence >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< tom::Sequence >::iterator std_vector_Sl_tom_Sequence_Sg__erase__SWIG_1(std::vector< tom::Sequence > *self,std::vector< tom::Sequence >::iterator first,std::vector< tom::Sequence >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< tom::Sequence >::iterator std_vector_Sl_tom_Sequence_Sg__insert__SWIG_0(std::vector< tom::Sequence > *self,std::vector< tom::Sequence >::iterator pos,std::vector< tom::Sequence >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_tom_Sequence_Sg__insert__SWIG_1(std::vector< tom::Sequence > *self,std::vector< tom::Sequence >::iterator pos,std::vector< tom::Sequence >::size_type n,std::vector< tom::Sequence >::value_type const &x){ self->insert(pos, n, x); }

#define tom_Oom_maxSetback__get(self_) self_->maxSetback()
#define tom_Oom_maxSetback__set(self_, val_) self_->maxSetback(val_)
  

#include "../include/tom/stree/stree.h"


#include <stdint.h>		// Use the C99 official header


namespace swig {
  template <> struct traits<unsigned int > {
    typedef value_category category;
    static const char* type_name() { return"unsigned int"; }
  };  
  template <>  struct traits_asval<unsigned int > {   
    typedef unsigned int value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_unsigned_SS_int (obj, val);
    }
  };
  template <>  struct traits_from<unsigned int > {
    typedef unsigned int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_unsigned_SS_int  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<unsigned int, std::allocator< unsigned int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "unsigned int" "," "std::allocator< unsigned int >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_stree_Nidx_Sg__iterator(std::vector< stree::Nidx > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_stree_Nidx_Sg____nonzero__(std::vector< stree::Nidx > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_stree_Nidx_Sg____bool__(std::vector< stree::Nidx > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< unsigned int >::size_type std_vector_Sl_stree_Nidx_Sg____len__(std::vector< stree::Nidx > const *self){
      return self->size();
    }
SWIGINTERN std::vector< unsigned int >::value_type std_vector_Sl_stree_Nidx_Sg__pop(std::vector< stree::Nidx > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<unsigned int,std::allocator< unsigned int > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< unsigned int,std::allocator< unsigned int > > *std_vector_Sl_stree_Nidx_Sg____getslice__(std::vector< stree::Nidx > *self,std::vector< unsigned int >::difference_type i,std::vector< unsigned int >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_stree_Nidx_Sg____setslice____SWIG_0(std::vector< stree::Nidx > *self,std::vector< unsigned int >::difference_type i,std::vector< unsigned int >::difference_type j,std::vector< unsigned int,std::allocator< unsigned int > > const &v=std::vector< unsigned int,std::allocator< unsigned int > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_stree_Nidx_Sg____delslice__(std::vector< stree::Nidx > *self,std::vector< unsigned int >::difference_type i,std::vector< unsigned int >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_stree_Nidx_Sg____delitem____SWIG_0(std::vector< stree::Nidx > *self,std::vector< unsigned int >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< unsigned int,std::allocator< unsigned int > > *std_vector_Sl_stree_Nidx_Sg____getitem____SWIG_0(std::vector< stree::Nidx > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<unsigned int,std::allocator< unsigned int > >::difference_type id = i;
      std::vector<unsigned int,std::allocator< unsigned int > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_stree_Nidx_Sg____setitem____SWIG_0(std::vector< stree::Nidx > *self,PySliceObject *slice,std::vector< unsigned int,std::allocator< unsigned int > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<unsigned int,std::allocator< unsigned int > >::difference_type id = i;
      std::vector<unsigned int,std::allocator< unsigned int > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_stree_Nidx_Sg____setitem____SWIG_1(std::vector< stree::Nidx > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<unsigned int,std::allocator< unsigned int > >::difference_type id = i;
      std::vector<unsigned int,std::allocator< unsigned int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_stree_Nidx_Sg____delitem____SWIG_1(std::vector< stree::Nidx > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<unsigned int,std::allocator< unsigned int > >::difference_type id = i;
      std::vector<unsigned int,std::allocator< unsigned int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< unsigned int >::value_type const &std_vector_Sl_stree_Nidx_Sg____getitem____SWIG_1(std::vector< stree::Nidx > const *self,std::vector< unsigned int >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_stree_Nidx_Sg____setitem____SWIG_2(std::vector< stree::Nidx > *self,std::vector< unsigned int >::difference_type i,std::vector< unsigned int >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_stree_Nidx_Sg____setitem____SWIG_3(std::vector< stree::Nidx > *self,std::vector< unsigned int >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN void std_vector_Sl_stree_Nidx_Sg__append(std::vector< stree::Nidx > *self,std::vector< unsigned int >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< unsigned int >::iterator std_vector_Sl_stree_Nidx_Sg__erase__SWIG_0(std::vector< stree::Nidx > *self,std::vector< unsigned int >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< unsigned int >::iterator std_vector_Sl_stree_Nidx_Sg__erase__SWIG_1(std::vector< stree::Nidx > *self,std::vector< unsigned int >::iterator first,std::vector< unsigned int >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< unsigned int >::iterator std_vector_Sl_stree_Nidx_Sg__insert__SWIG_0(std::vector< stree::Nidx > *self,std::vector< unsigned int >::iterator pos,std::vector< unsigned int >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_stree_Nidx_Sg__insert__SWIG_1(std::vector< stree::Nidx > *self,std::vector< unsigned int >::iterator pos,std::vector< unsigned int >::size_type n,std::vector< unsigned int >::value_type const &x){ self->insert(pos, n, x); }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "tomlib_wrap.h"

SwigDirector_ios::SwigDirector_ios(PyObject *self, std::basic_streambuf< char,std::char_traits< char > > *__sb): std::basic_ios< char >(__sb), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((std::basic_ios< char > *)this, this); 
}




SwigDirector_ios::SwigDirector_ios(PyObject *self): std::basic_ios< char >(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((std::basic_ios< char > *)this, this); 
}




SwigDirector_ios::~SwigDirector_ios() {
}

SwigDirector_ostream::SwigDirector_ostream(PyObject *self, std::basic_streambuf< char,std::char_traits< char > > *__sb): std::basic_ostream< char >(__sb), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((std::basic_ostream< char > *)this, this); 
}




SwigDirector_ostream::~SwigDirector_ostream() {
}

SwigDirector_istream::SwigDirector_istream(PyObject *self, std::basic_streambuf< char,std::char_traits< char > > *__sb): std::basic_istream< char >(__sb), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((std::basic_istream< char > *)this, this); 
}




SwigDirector_istream::~SwigDirector_istream() {
}

SwigDirector_iostream::SwigDirector_iostream(PyObject *self, std::basic_streambuf< char,std::char_traits< char > > *__sb): std::basic_iostream< char >(__sb), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((std::basic_iostream< char > *)this, this); 
}




SwigDirector_iostream::~SwigDirector_iostream() {
}

SwigDirector_EMStopCondition::SwigDirector_EMStopCondition(PyObject *self, int maxEMIterations, double minRelativeImprovement): tom::EMStopCondition(maxEMIterations, minRelativeImprovement), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((tom::EMStopCondition *)this, this); 
}




bool SwigDirector_EMStopCondition::operator ()(int iteration, double log2Likelihood) {
  bool c_result;
  PyObject *self = NULL;
  (void)self;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(iteration));
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_double(static_cast< double >(log2Likelihood));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call EMStopCondition.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char * const swig_method_name = "__call__";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar((char *)"__call__");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'EMStopCondition.__call__'");
    }
  }
  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'");
  }
  c_result = static_cast< bool >(swig_val);
  return (bool) c_result;
}


SwigDirector_EMStopCondition::~SwigDirector_EMStopCondition() {
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN int _wrap_new_IntIntPair__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::pair< int,int > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::pair< int,int > *)new std::pair< int,int >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_int_int_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_IntIntPair__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::pair< int,int > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntIntPair" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IntIntPair" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (std::pair< int,int > *)new std::pair< int,int >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_int_int_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_IntIntPair__SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::pair< int,int > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::pair< int,int > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::pair<int,int > *ptr = (std::pair<int,int > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IntIntPair" "', argument " "1"" of type '" "std::pair< int,int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IntIntPair" "', argument " "1"" of type '" "std::pair< int,int > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::pair< int,int > *)new std::pair< int,int >((std::pair< int,int > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_int_int_t, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN int _wrap_new_IntIntPair(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_IntIntPair",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_IntIntPair__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_IntIntPair__SWIG_2(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_new_IntIntPair__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_IntIntPair'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::pair< int,int >::pair()\n"
    "    std::pair< int,int >::pair(int,int)\n"
    "    std::pair< int,int >::pair(std::pair< int,int > const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_IntIntPair_first_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__pairT_int_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntIntPair_first_set" "', argument " "1"" of type '" "std::pair< int,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< int,int > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntIntPair_first_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->first = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntIntPair_first_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args,"IntIntPair_first_get",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__pairT_int_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntIntPair_first_get" "', argument " "1"" of type '" "std::pair< int,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< int,int > * >(argp1);
  result = (int) ((arg1)->first);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntIntPair_second_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__pairT_int_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntIntPair_second_set" "', argument " "1"" of type '" "std::pair< int,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< int,int > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntIntPair_second_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->second = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntIntPair_second_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args,"IntIntPair_second_get",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__pairT_int_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntIntPair_second_get" "', argument " "1"" of type '" "std::pair< int,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< int,int > * >(argp1);
  result = (int) ((arg1)->second);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IntIntPair(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"delete_IntIntPair",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__pairT_int_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntIntPair" "', argument " "1"" of type '" "std::pair< int,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< int,int > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"delete_SwigPyIterator",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"SwigPyIterator_value",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==self));
  try {
    try {
      if (upcall) {
        Swig::DirectorPureVirtualException::raise("swig::SwigPyIterator::value");
      } else {
        result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
      }
    }
    catch(swig::stop_iteration &_e) {
      {
        (void)_e;
        SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
        SWIG_fail;
      }
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = result;
  if (director) {
    SWIG_AcquirePtr(resultobj, director->swig_release_ownership(SWIG_as_voidptr(result)));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==self));
  try {
    try {
      if (upcall) {
        Swig::DirectorPureVirtualException::raise("swig::SwigPyIterator::incr");
      } else {
        result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
      }
    }
    catch(swig::stop_iteration &_e) {
      {
        (void)_e;
        SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
        SWIG_fail;
      }
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (director) {
    SWIG_AcquirePtr(resultobj, director->swig_release_ownership(SWIG_as_voidptr(result)));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==self));
  try {
    try {
      if (upcall) {
        Swig::DirectorPureVirtualException::raise("swig::SwigPyIterator::incr");
      } else {
        result = (swig::SwigPyIterator *)(arg1)->incr();
      }
    }
    catch(swig::stop_iteration &_e) {
      {
        (void)_e;
        SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
        SWIG_fail;
      }
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (director) {
    SWIG_AcquirePtr(resultobj, director->swig_release_ownership(SWIG_as_voidptr(result)));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"SwigPyIterator_incr",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_SwigPyIterator_incr__SWIG_1(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_SwigPyIterator_incr__SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==self));
  try {
    try {
      if (upcall) {
        result = (swig::SwigPyIterator *)(arg1)->swig::SwigPyIterator::decr(arg2);
      } else {
        result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
      }
    }
    catch(swig::stop_iteration &_e) {
      {
        (void)_e;
        SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
        SWIG_fail;
      }
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (director) {
    SWIG_AcquirePtr(resultobj, director->swig_release_ownership(SWIG_as_voidptr(result)));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==self));
  try {
    try {
      if (upcall) {
        result = (swig::SwigPyIterator *)(arg1)->swig::SwigPyIterator::decr();
      } else {
        result = (swig::SwigPyIterator *)(arg1)->decr();
      }
    }
    catch(swig::stop_iteration &_e) {
      {
        (void)_e;
        SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
        SWIG_fail;
      }
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (director) {
    SWIG_AcquirePtr(resultobj, director->swig_release_ownership(SWIG_as_voidptr(result)));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"SwigPyIterator_decr",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_SwigPyIterator_decr__SWIG_1(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_SwigPyIterator_decr__SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  ptrdiff_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==self));
  try {
    try {
      if (upcall) {
        result = ((swig::SwigPyIterator const *)arg1)->swig::SwigPyIterator::distance((swig::SwigPyIterator const &)*arg2);
      } else {
        result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
      }
    }
    catch(std::invalid_argument &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==self));
  try {
    try {
      if (upcall) {
        result = (bool)((swig::SwigPyIterator const *)arg1)->swig::SwigPyIterator::equal((swig::SwigPyIterator const &)*arg2);
      } else {
        result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
      }
    }
    catch(std::invalid_argument &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"SwigPyIterator_copy",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==self));
  try {
    if (upcall) {
      Swig::DirectorPureVirtualException::raise("swig::SwigPyIterator::copy");
    } else {
      result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  if (director) {
    SWIG_AcquirePtr(resultobj, director->swig_release_ownership(SWIG_as_voidptr(result)));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"SwigPyIterator_next",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"SwigPyIterator___next__",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGPY_ITERNEXT_CLOSURE(_wrap_SwigPyIterator___next__)

SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"SwigPyIterator_previous",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ptrdiff_t result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"SwigPyIterator___sub__",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_SwigPyIterator___sub____SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    return _wrap_SwigPyIterator___sub____SWIG_0(self, argc, argv);
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_SwigPyIterator___sub__)

SWIGINTERN PyObject *_wrap_IntVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (!SWIG_Python_UnpackTuple(args,"IntVector_iterator",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_iterator" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_int_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_UNARYFUNC_CLOSURE(_wrap_IntVector_iterator)

SWIGINTERN PyObject *_wrap_IntVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"IntVector___nonzero__",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___nonzero__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)std_vector_Sl_int_Sg____nonzero__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_INQUIRY_CLOSURE(_wrap_IntVector___nonzero__)

SWIGINTERN PyObject *_wrap_IntVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"IntVector___bool__",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___bool__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)std_vector_Sl_int_Sg____bool__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args,"IntVector___len__",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___len__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = std_vector_Sl_int_Sg____len__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_LENFUNC_CLOSURE(_wrap_IntVector___len__)

SWIGINTERN PyObject *_wrap_IntVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::value_type result;
  
  if (!SWIG_Python_UnpackTuple(args,"IntVector_pop",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_pop" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  try {
    result = (std::vector< int >::value_type)std_vector_Sl_int_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"IntVector___getslice__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___getslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___getslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector___getslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___setslice____SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___setslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___setslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector___setslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IntVector___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntVector___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_int_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___setslice____SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___setslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___setslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector___setslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    std_vector_Sl_int_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"IntVector___setslice__",0,4,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 3) {
    return _wrap_IntVector___setslice____SWIG_1(self, argc, argv);
  }
  if (argc == 4) {
    return _wrap_IntVector___setslice____SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__setslice__(std::vector< int >::difference_type,std::vector< int >::difference_type,std::vector< int,std::allocator< int > > const &)\n"
    "    std::vector< int >::__setslice__(std::vector< int >::difference_type,std::vector< int >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"IntVector___delslice__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___delslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___delslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector___delslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    std_vector_Sl_int_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___delitem____SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___delitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  try {
    std_vector_Sl_int_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___getitem____SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___getitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___setitem____SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IntVector___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntVector___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___setitem____SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___delitem____SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_int_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"IntVector___delitem__",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_IntVector___delitem____SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    return _wrap_IntVector___delitem____SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__delitem__(std::vector< int >::difference_type)\n"
    "    std::vector< int >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector___getitem____SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___getitem__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___getitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg____getitem____SWIG_1((std::vector< int > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"IntVector___getitem__",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_IntVector___getitem____SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    return _wrap_IntVector___getitem____SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__getitem__(PySliceObject *)\n"
    "    std::vector< int >::__getitem__(std::vector< int >::difference_type) const\n");
  return 0;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_IntVector___getitem__)

SWIGINTERN PyObject *_wrap_IntVector___setitem____SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___setitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector___setitem__" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_2(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___setitem____SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___setitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_3(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"IntVector___setitem__",0,3,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_IntVector___setitem____SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    return _wrap_IntVector___setitem____SWIG_3(self, argc, argv);
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_3;
    {
      int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_IntVector___setitem____SWIG_0(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    return _wrap_IntVector___setitem____SWIG_2(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__setitem__(PySliceObject *,std::vector< int,std::allocator< int > > const &)\n"
    "    std::vector< int >::__setitem__(PySliceObject *)\n"
    "    std::vector< int >::__setitem__(std::vector< int >::difference_type,std::vector< int >::value_type const &)\n"
    "    std::vector< int >::__setitem__(std::vector< int >::difference_type)\n");
  return 0;
}


SWIGPY_OBJOBJARGPROC_CLOSURE(_wrap_IntVector___setitem__)

SWIGINTERN PyObject *_wrap_IntVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_append" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_append" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_int_Sg__append(arg1,(int const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_IntVector__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< int > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< int > *)new std::vector< int >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_IntVector__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< int > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IntVector" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IntVector" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN PyObject *_wrap_IntVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"IntVector_empty",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_empty" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)((std::vector< int > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args,"IntVector_size",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_size" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"IntVector_clear",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_clear" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_swap" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntVector_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntVector_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< int > > result;
  
  if (!SWIG_Python_UnpackTuple(args,"IntVector_get_allocator",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_get_allocator" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< int >::allocator_type(static_cast< const std::vector< int >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args,"IntVector_begin",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_begin" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args,"IntVector_end",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_end" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::reverse_iterator result;
  
  if (!SWIG_Python_UnpackTuple(args,"IntVector_rbegin",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_rbegin" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::reverse_iterator result;
  
  if (!SWIG_Python_UnpackTuple(args,"IntVector_rend",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_rend" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_IntVector__SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntVector" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  result = (std::vector< int > *)new std::vector< int >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_IntVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"IntVector_pop_back",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_pop_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_resize__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_erase__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< int >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  result = std_vector_Sl_int_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_erase__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< int >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
    }
  }
  result = std_vector_Sl_int_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"IntVector_erase",0,3,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    return _wrap_IntVector_erase__SWIG_0(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_IntVector_erase__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::erase(std::vector< int >::iterator)\n"
    "    std::vector< int >::erase(std::vector< int >::iterator,std::vector< int >::iterator)\n");
  return 0;
}


SWIGINTERN int _wrap_new_IntVector__SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  std::vector< int >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< int > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntVector" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IntVector" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< int > *)new std::vector< int >(arg1,(std::vector< int >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_IntVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_IntVector",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_IntVector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[0], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_new_IntVector__SWIG_2(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    return _wrap_new_IntVector__SWIG_1(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_new_IntVector__SWIG_3(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_IntVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::vector()\n"
    "    std::vector< int >::vector(std::vector< int > const &)\n"
    "    std::vector< int >::vector(std::vector< int >::size_type)\n"
    "    std::vector< int >::vector(std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_IntVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_push_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_push_back" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"IntVector_front",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_front" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->front();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"IntVector_back",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_back" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->back();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"IntVector_assign",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_assign" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_assign" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector_assign" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_resize__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector_resize" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"IntVector_resize",0,3,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    return _wrap_IntVector_resize__SWIG_0(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_IntVector_resize__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::resize(std::vector< int >::size_type)\n"
    "    std::vector< int >::resize(std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector_insert__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  std::vector< int >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector_insert" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  result = std_vector_Sl_int_Sg__insert__SWIG_0(arg1,arg2,(int const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_insert__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::size_type arg3 ;
  std::vector< int >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< int >::value_type temp4 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector_insert" "', argument " "3"" of type '" "std::vector< int >::size_type""'");
  } 
  arg3 = static_cast< std::vector< int >::size_type >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IntVector_insert" "', argument " "4"" of type '" "std::vector< int >::value_type""'");
  } 
  temp4 = static_cast< std::vector< int >::value_type >(val4);
  arg4 = &temp4;
  std_vector_Sl_int_Sg__insert__SWIG_1(arg1,arg2,arg3,(int const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"IntVector_insert",0,4,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 3) {
    return _wrap_IntVector_insert__SWIG_0(self, argc, argv);
  }
  if (argc == 4) {
    return _wrap_IntVector_insert__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::insert(std::vector< int >::iterator,std::vector< int >::value_type const &)\n"
    "    std::vector< int >::insert(std::vector< int >::iterator,std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_reserve" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_reserve" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args,"IntVector_capacity",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_capacity" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IntVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"delete_IntVector",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntVector" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (!SWIG_Python_UnpackTuple(args,"DoubleVector_iterator",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_iterator" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_double_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_UNARYFUNC_CLOSURE(_wrap_DoubleVector_iterator)

SWIGINTERN PyObject *_wrap_DoubleVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"DoubleVector___nonzero__",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___nonzero__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)std_vector_Sl_double_Sg____nonzero__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_INQUIRY_CLOSURE(_wrap_DoubleVector___nonzero__)

SWIGINTERN PyObject *_wrap_DoubleVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"DoubleVector___bool__",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___bool__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)std_vector_Sl_double_Sg____bool__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args,"DoubleVector___len__",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___len__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = std_vector_Sl_double_Sg____len__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_LENFUNC_CLOSURE(_wrap_DoubleVector___len__)

SWIGINTERN PyObject *_wrap_DoubleVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::value_type result;
  
  if (!SWIG_Python_UnpackTuple(args,"DoubleVector_pop",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_pop" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  try {
    result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"DoubleVector___getslice__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___getslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___getslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___getslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setslice____SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DoubleVector___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleVector___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_double_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< double,std::allocator< double > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setslice____SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    std_vector_Sl_double_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"DoubleVector___setslice__",0,4,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 3) {
    return _wrap_DoubleVector___setslice____SWIG_1(self, argc, argv);
  }
  if (argc == 4) {
    return _wrap_DoubleVector___setslice____SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DoubleVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__setslice__(std::vector< double >::difference_type,std::vector< double >::difference_type,std::vector< double,std::allocator< double > > const &)\n"
    "    std::vector< double >::__setslice__(std::vector< double >::difference_type,std::vector< double >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"DoubleVector___delslice__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___delslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___delslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___delslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    std_vector_Sl_double_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delitem____SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___delitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  try {
    std_vector_Sl_double_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getitem____SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___getitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setitem____SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DoubleVector___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleVector___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_double_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setitem____SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_double_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delitem____SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_double_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"DoubleVector___delitem__",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_DoubleVector___delitem____SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    return _wrap_DoubleVector___delitem____SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DoubleVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__delitem__(std::vector< double >::difference_type)\n"
    "    std::vector< double >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getitem____SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___getitem__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___getitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg____getitem____SWIG_1((std::vector< double > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"DoubleVector___getitem__",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_DoubleVector___getitem____SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    return _wrap_DoubleVector___getitem____SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DoubleVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__getitem__(PySliceObject *)\n"
    "    std::vector< double >::__getitem__(std::vector< double >::difference_type) const\n");
  return 0;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_DoubleVector___getitem__)

SWIGINTERN PyObject *_wrap_DoubleVector___setitem____SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___setitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___setitem__" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_double_Sg____setitem____SWIG_2(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setitem____SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___setitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  try {
    std_vector_Sl_double_Sg____setitem____SWIG_3(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"DoubleVector___setitem__",0,3,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_DoubleVector___setitem____SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    return _wrap_DoubleVector___setitem____SWIG_3(self, argc, argv);
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_3;
    {
      int res = swig::asptr(argv[2], (std::vector<double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_DoubleVector___setitem____SWIG_0(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    return _wrap_DoubleVector___setitem____SWIG_2(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DoubleVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__setitem__(PySliceObject *,std::vector< double,std::allocator< double > > const &)\n"
    "    std::vector< double >::__setitem__(PySliceObject *)\n"
    "    std::vector< double >::__setitem__(std::vector< double >::difference_type,std::vector< double >::value_type const &)\n"
    "    std::vector< double >::__setitem__(std::vector< double >::difference_type)\n");
  return 0;
}


SWIGPY_OBJOBJARGPROC_CLOSURE(_wrap_DoubleVector___setitem__)

SWIGINTERN PyObject *_wrap_DoubleVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_append" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_append" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_double_Sg__append(arg1,(double const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_DoubleVector__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< double > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< double > *)new std::vector< double >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_DoubleVector__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< double > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN PyObject *_wrap_DoubleVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"DoubleVector_empty",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_empty" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)((std::vector< double > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args,"DoubleVector_size",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_size" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"DoubleVector_clear",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_clear" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_swap" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DoubleVector_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleVector_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< double > > result;
  
  if (!SWIG_Python_UnpackTuple(args,"DoubleVector_get_allocator",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_get_allocator" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< double >::allocator_type(static_cast< const std::vector< double >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args,"DoubleVector_begin",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_begin" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args,"DoubleVector_end",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_end" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::reverse_iterator result;
  
  if (!SWIG_Python_UnpackTuple(args,"DoubleVector_rbegin",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_rbegin" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::reverse_iterator result;
  
  if (!SWIG_Python_UnpackTuple(args,"DoubleVector_rend",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_rend" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_DoubleVector__SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< double > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_DoubleVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"DoubleVector_pop_back",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_pop_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_resize__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_erase__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< double >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  result = std_vector_Sl_double_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_erase__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< double >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
    }
  }
  result = std_vector_Sl_double_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"DoubleVector_erase",0,3,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    return _wrap_DoubleVector_erase__SWIG_0(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_DoubleVector_erase__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DoubleVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::erase(std::vector< double >::iterator)\n"
    "    std::vector< double >::erase(std::vector< double >::iterator,std::vector< double >::iterator)\n");
  return 0;
}


SWIGINTERN int _wrap_new_DoubleVector__SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  std::vector< double >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  std::vector< double > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DoubleVector" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< double > *)new std::vector< double >(arg1,(std::vector< double >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_DoubleVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_DoubleVector",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_DoubleVector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[0], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_new_DoubleVector__SWIG_2(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    return _wrap_new_DoubleVector__SWIG_1(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_new_DoubleVector__SWIG_3(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DoubleVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::vector()\n"
    "    std::vector< double >::vector(std::vector< double > const &)\n"
    "    std::vector< double >::vector(std::vector< double >::size_type)\n"
    "    std::vector< double >::vector(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_DoubleVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_push_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_push_back" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"DoubleVector_front",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_front" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->front();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"DoubleVector_back",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_back" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->back();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"DoubleVector_assign",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_assign" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_assign" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_assign" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< double >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_resize__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_resize" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< double >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"DoubleVector_resize",0,3,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    return _wrap_DoubleVector_resize__SWIG_0(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_DoubleVector_resize__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DoubleVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::resize(std::vector< double >::size_type)\n"
    "    std::vector< double >::resize(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector_insert__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  std::vector< double >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_insert" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  result = std_vector_Sl_double_Sg__insert__SWIG_0(arg1,arg2,(double const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_insert__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::size_type arg3 ;
  std::vector< double >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< double >::value_type temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_insert" "', argument " "3"" of type '" "std::vector< double >::size_type""'");
  } 
  arg3 = static_cast< std::vector< double >::size_type >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DoubleVector_insert" "', argument " "4"" of type '" "std::vector< double >::value_type""'");
  } 
  temp4 = static_cast< std::vector< double >::value_type >(val4);
  arg4 = &temp4;
  std_vector_Sl_double_Sg__insert__SWIG_1(arg1,arg2,arg3,(double const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"DoubleVector_insert",0,4,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 3) {
    return _wrap_DoubleVector_insert__SWIG_0(self, argc, argv);
  }
  if (argc == 4) {
    return _wrap_DoubleVector_insert__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DoubleVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::insert(std::vector< double >::iterator,std::vector< double >::value_type const &)\n"
    "    std::vector< double >::insert(std::vector< double >::iterator,std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_reserve" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_reserve" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args,"DoubleVector_capacity",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_capacity" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DoubleVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"delete_DoubleVector",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DoubleVector" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_ios_base_boolalpha_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_boolalpha is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_boolalpha_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::boolalpha));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_boolalpha_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_boolalpha_get();
}


SWIGINTERN int Swig_var_ios_base_dec_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_dec is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_dec_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::dec));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_dec_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_dec_get();
}


SWIGINTERN int Swig_var_ios_base_fixed_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_fixed is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_fixed_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::fixed));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_fixed_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_fixed_get();
}


SWIGINTERN int Swig_var_ios_base_hex_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_hex is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_hex_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::hex));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_hex_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_hex_get();
}


SWIGINTERN int Swig_var_ios_base_internal_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_internal is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_internal_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::internal));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_internal_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_internal_get();
}


SWIGINTERN int Swig_var_ios_base_left_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_left is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_left_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::left));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_left_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_left_get();
}


SWIGINTERN int Swig_var_ios_base_oct_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_oct is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_oct_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::oct));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_oct_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_oct_get();
}


SWIGINTERN int Swig_var_ios_base_right_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_right is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_right_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::right));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_right_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_right_get();
}


SWIGINTERN int Swig_var_ios_base_scientific_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_scientific is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_scientific_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::scientific));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_scientific_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_scientific_get();
}


SWIGINTERN int Swig_var_ios_base_showbase_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_showbase is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_showbase_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::showbase));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_showbase_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_showbase_get();
}


SWIGINTERN int Swig_var_ios_base_showpoint_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_showpoint is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_showpoint_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::showpoint));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_showpoint_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_showpoint_get();
}


SWIGINTERN int Swig_var_ios_base_showpos_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_showpos is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_showpos_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::showpos));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_showpos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_showpos_get();
}


SWIGINTERN int Swig_var_ios_base_skipws_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_skipws is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_skipws_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::skipws));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_skipws_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_skipws_get();
}


SWIGINTERN int Swig_var_ios_base_unitbuf_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_unitbuf is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_unitbuf_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::unitbuf));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_unitbuf_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_unitbuf_get();
}


SWIGINTERN int Swig_var_ios_base_uppercase_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_uppercase is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_uppercase_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::uppercase));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_uppercase_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_uppercase_get();
}


SWIGINTERN int Swig_var_ios_base_adjustfield_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_adjustfield is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_adjustfield_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::adjustfield));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_adjustfield_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_adjustfield_get();
}


SWIGINTERN int Swig_var_ios_base_basefield_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_basefield is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_basefield_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::basefield));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_basefield_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_basefield_get();
}


SWIGINTERN int Swig_var_ios_base_floatfield_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_floatfield is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_floatfield_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::floatfield));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_floatfield_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_floatfield_get();
}


SWIGINTERN int Swig_var_ios_base_badbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_badbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_badbit_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::badbit));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_badbit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_badbit_get();
}


SWIGINTERN int Swig_var_ios_base_eofbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_eofbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_eofbit_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::eofbit));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_eofbit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_eofbit_get();
}


SWIGINTERN int Swig_var_ios_base_failbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_failbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_failbit_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::failbit));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_failbit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_failbit_get();
}


SWIGINTERN int Swig_var_ios_base_goodbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_goodbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_goodbit_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::goodbit));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_goodbit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_goodbit_get();
}


SWIGINTERN int Swig_var_ios_base_app_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_app is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_app_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::app));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_app_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_app_get();
}


SWIGINTERN int Swig_var_ios_base_ate_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_ate is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_ate_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::ate));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_ate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_ate_get();
}


SWIGINTERN int Swig_var_ios_base_binary_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_binary is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_binary_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::binary));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_binary_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_binary_get();
}


SWIGINTERN int Swig_var_ios_base_ios_base_in_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_ios_base_in is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_ios_base_in_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::in));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_ios_base_in_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_ios_base_in_get();
}


SWIGINTERN int Swig_var_ios_base_out_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_out is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_out_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::out));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_out_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_out_get();
}


SWIGINTERN int Swig_var_ios_base_trunc_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_trunc is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_trunc_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::trunc));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_trunc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_trunc_get();
}


SWIGINTERN int Swig_var_ios_base_beg_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_beg is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_beg_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::beg));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_beg_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_beg_get();
}


SWIGINTERN int Swig_var_ios_base_cur_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_cur is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_cur_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::cur));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_cur_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_cur_get();
}


SWIGINTERN int Swig_var_ios_base_end_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_end is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_end_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::end));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_end_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_ios_base_end_get();
}


SWIGINTERN PyObject *_wrap_ios_base_register_callback(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::event_callback arg2 = (std::ios_base::event_callback) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"ios_base_register_callback",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_register_callback" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg2), SWIGTYPE_p_f_enum_std__ios_base__event_r_std__ios_base_int__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ios_base_register_callback" "', argument " "2"" of type '" "std::ios_base::event_callback""'"); 
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ios_base_register_callback" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->register_callback(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_flags__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::ios_base::fmtflags result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_flags" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = (std::ios_base::fmtflags)((std::ios_base const *)arg1)->flags();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_flags__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::ios_base::fmtflags result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_flags" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_flags" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  result = (std::ios_base::fmtflags)(arg1)->flags(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_flags(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"ios_base_flags",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_ios_base_flags__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_ios_base_flags__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_base_flags'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::ios_base::flags() const\n"
    "    std::ios_base::flags(std::ios_base::fmtflags)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_base_setf__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::ios_base::fmtflags result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_setf" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_setf" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  result = (std::ios_base::fmtflags)(arg1)->setf(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_setf__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  std::ios_base::fmtflags arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::ios_base::fmtflags result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_setf" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_setf" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ios_base_setf" "', argument " "3"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg3 = static_cast< std::ios_base::fmtflags >(val3);
  result = (std::ios_base::fmtflags)(arg1)->setf(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_setf(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"ios_base_setf",0,3,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    return _wrap_ios_base_setf__SWIG_0(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_ios_base_setf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_base_setf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::ios_base::setf(std::ios_base::fmtflags)\n"
    "    std::ios_base::setf(std::ios_base::fmtflags,std::ios_base::fmtflags)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_base_unsetf(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_unsetf" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_unsetf" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  (arg1)->unsetf(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_precision__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::streamsize result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_precision" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = ((std::ios_base const *)arg1)->precision();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_precision__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::streamsize arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::streamsize result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_precision" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_precision" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  result = (arg1)->precision(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_precision(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"ios_base_precision",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_ios_base_precision__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_ios_base_precision__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_base_precision'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::ios_base::precision() const\n"
    "    std::ios_base::precision(std::streamsize)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_base_width__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::streamsize result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_width" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = ((std::ios_base const *)arg1)->width();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_width__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::streamsize arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::streamsize result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_width" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_width" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  result = (arg1)->width(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_width(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"ios_base_width",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_ios_base_width__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_ios_base_width__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_base_width'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::ios_base::width() const\n"
    "    std::ios_base::width(std::streamsize)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_base_sync_with_stdio__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ios_base_sync_with_stdio" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  result = (bool)std::ios_base::sync_with_stdio(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_sync_with_stdio__SWIG_1(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  bool result;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (bool)std::ios_base::sync_with_stdio();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_sync_with_stdio(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"ios_base_sync_with_stdio",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_ios_base_sync_with_stdio__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_ios_base_sync_with_stdio__SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_base_sync_with_stdio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::ios_base::sync_with_stdio(bool)\n"
    "    std::ios_base::sync_with_stdio()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_base_imbue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::locale *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::locale result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_imbue" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__locale,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_base_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ios_base_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  arg2 = reinterpret_cast< std::locale * >(argp2);
  result = (arg1)->imbue((std::locale const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::locale(static_cast< const std::locale& >(result))), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_getloc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::locale result;
  
  if (!SWIG_Python_UnpackTuple(args,"ios_base_getloc",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_getloc" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = ((std::ios_base const *)arg1)->getloc();
  resultobj = SWIG_NewPointerObj((new std::locale(static_cast< const std::locale& >(result))), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_xalloc(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args,"ios_base_xalloc",0,0,0)) SWIG_fail;
  result = (int)std::ios_base::xalloc();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_iword(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  long *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_iword" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_iword" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (long *) &(arg1)->iword(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_long, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_pword(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  void **result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_pword" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_pword" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (void **) &(arg1)->pword(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ios_base(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"delete_ios_base",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__ios_base, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ios_base" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_rdstate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::ios_base::iostate result;
  
  if (!SWIG_Python_UnpackTuple(args,"ios_rdstate",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_rdstate" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::ios_base::iostate)((std::basic_ios< char > const *)arg1)->rdstate();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_clear__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::ios_base::iostate arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_clear" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_clear" "', argument " "2"" of type '" "std::ios_base::iostate""'");
  } 
  arg2 = static_cast< std::ios_base::iostate >(val2);
  (arg1)->clear(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_clear__SWIG_1(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_clear" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_clear(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"ios_clear",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_ios_clear__SWIG_1(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_ios_clear__SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_clear'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ios< char >::clear(std::ios_base::iostate)\n"
    "    std::basic_ios< char >::clear()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_setstate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::ios_base::iostate arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_setstate" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_setstate" "', argument " "2"" of type '" "std::ios_base::iostate""'");
  } 
  arg2 = static_cast< std::ios_base::iostate >(val2);
  (arg1)->setstate(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_good(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"ios_good",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_good" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (bool)((std::basic_ios< char > const *)arg1)->good();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_eof(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"ios_eof",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_eof" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (bool)((std::basic_ios< char > const *)arg1)->eof();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fail(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"ios_fail",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_fail" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (bool)((std::basic_ios< char > const *)arg1)->fail();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_bad(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"ios_bad",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_bad" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (bool)((std::basic_ios< char > const *)arg1)->bad();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_exceptions__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::ios_base::iostate result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_exceptions" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::ios_base::iostate)((std::basic_ios< char > const *)arg1)->exceptions();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_exceptions__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::ios_base::iostate arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_exceptions" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_exceptions" "', argument " "2"" of type '" "std::ios_base::iostate""'");
  } 
  arg2 = static_cast< std::ios_base::iostate >(val2);
  (arg1)->exceptions(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_exceptions(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"ios_exceptions",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_ios_exceptions__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_ios_exceptions__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_exceptions'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ios< char >::exceptions() const\n"
    "    std::basic_ios< char >::exceptions(std::ios_base::iostate)\n");
  return 0;
}


SWIGINTERN int _wrap_new_ios__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_ios< char > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  arg1 = self;
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ios" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  if ( self->ob_type != ((SwigPyClientData*) (SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t)->clientdata)->pytype ) {
    /* subclassed */
    result = (std::basic_ios< char > *)new SwigDirector_ios(arg1,arg2); 
  } else {
    result = (std::basic_ios< char > *)new std::basic_ios< char >(arg2); 
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_ios(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"delete_ios",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ios" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_tie__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_tie" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::basic_ostream< char,std::char_traits< char > > *)((std::basic_ios< char > const *)arg1)->tie();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_tie__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = (std::basic_ostream< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_tie" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_tie" "', argument " "2"" of type '" "std::basic_ostream< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_ostream< char,std::char_traits< char > > *)(arg1)->tie(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_tie(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"ios_tie",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_ios_tie__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_ios_tie__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_tie'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ios< char >::tie() const\n"
    "    std::basic_ios< char >::tie(std::basic_ostream< char,std::char_traits< char > > *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_rdbuf__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_rdbuf" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::basic_streambuf< char,std::char_traits< char > > *)((std::basic_ios< char > const *)arg1)->rdbuf();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_rdbuf__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_rdbuf" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_rdbuf" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_streambuf< char,std::char_traits< char > > *)(arg1)->rdbuf(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_rdbuf(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"ios_rdbuf",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_ios_rdbuf__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_ios_rdbuf__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_rdbuf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ios< char >::rdbuf() const\n"
    "    std::basic_ios< char >::rdbuf(std::basic_streambuf< char,std::char_traits< char > > *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_copyfmt(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ios< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::basic_ios< char > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_copyfmt" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_copyfmt" "', argument " "2"" of type '" "std::basic_ios< char > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ios_copyfmt" "', argument " "2"" of type '" "std::basic_ios< char > const &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_ios< char > * >(argp2);
  result = (std::basic_ios< char > *) &(arg1)->copyfmt((std::basic_ios< char > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fill__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_ios< char >::char_type result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_fill" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::basic_ios< char >::char_type)((std::basic_ios< char > const *)arg1)->fill();
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fill__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ios< char >::char_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  std::basic_ios< char >::char_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_fill" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_fill" "', argument " "2"" of type '" "std::basic_ios< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_ios< char >::char_type >(val2);
  result = (std::basic_ios< char >::char_type)(arg1)->fill(arg2);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fill(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"ios_fill",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_ios_fill__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_ios_fill__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ios_fill'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ios< char >::fill() const\n"
    "    std::basic_ios< char >::fill(std::basic_ios< char >::char_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_imbue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::locale *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::locale result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_imbue" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__locale,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ios_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  arg2 = reinterpret_cast< std::locale * >(argp2);
  result = (arg1)->imbue((std::locale const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::locale(static_cast< const std::locale& >(result))), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_narrow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ios< char >::char_type arg2 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  char result;
  
  if (!SWIG_Python_UnpackTuple(args,"ios_narrow",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_narrow" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_narrow" "', argument " "2"" of type '" "std::basic_ios< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_ios< char >::char_type >(val2);
  ecode3 = SWIG_AsVal_char(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ios_narrow" "', argument " "3"" of type '" "char""'");
  } 
  arg3 = static_cast< char >(val3);
  result = (char)((std::basic_ios< char > const *)arg1)->narrow(arg2,arg3);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_widen(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::basic_ios< char >::char_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_widen" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_widen" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = (std::basic_ios< char >::char_type)((std::basic_ios< char > const *)arg1)->widen(arg2);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_ios__SWIG_1(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  std::basic_ios< char > *result = 0 ;
  
  if (!(self->ob_type != ((SwigPyClientData*) (SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t)->clientdata)->pytype)) {
    SWIG_SetErrorMsg(PyExc_RuntimeError, "accessing abstract class or protected constructor");
    SWIG_fail;
  }
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  arg1 = self;
  if ( self->ob_type != ((SwigPyClientData*) (SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t)->clientdata)->pytype ) {
    /* subclassed */
    result = (std::basic_ios< char > *)new SwigDirector_ios(arg1); 
  } else {
    SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
    SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_ios(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_ios",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_new_ios__SWIG_1(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_new_ios__SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ios'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ios< char >::basic_ios(std::basic_streambuf< char,std::char_traits< char > > *)\n"
    "    std::basic_ios< char >::basic_ios(PyObject *)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_disown_ios(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_ios" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_cin_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cin is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cin_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::cin), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_cout_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cout is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cout_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::cout), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_cerr_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cerr is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cerr_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::cerr), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_clog_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable clog is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_clog_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::clog), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN int _wrap_new_ostream(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::basic_ostream< char > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_ostream",1,1,swig_obj)) SWIG_fail;
  arg1 = self;
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ostream" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  if ( self->ob_type != ((SwigPyClientData*) (SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t)->clientdata)->pytype ) {
    /* subclassed */
    result = (std::basic_ostream< char > *)new SwigDirector_ostream(arg1,arg2); 
  } else {
    result = (std::basic_ostream< char > *)new std::basic_ostream< char >(arg2); 
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_ostream(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"delete_ostream",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ostream" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > &(*arg2)(std::basic_ostream< char,std::char_traits< char > > &) = (std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)""'"); 
    }
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ios< char,std::char_traits< char > > &(*arg2)(std::basic_ios< char,std::char_traits< char > > &) = (std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)""'"); 
    }
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::ios_base &(*arg2)(std::ios_base &) = (std::ios_base &(*)(std::ios_base &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::ios_base &(*)(std::ios_base &)""'"); 
    }
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_4(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_5(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_6(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_7(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_8(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_9(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_10(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_11(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  arg2 = static_cast< unsigned long long >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_12(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_13(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_14(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  long double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long double""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long double""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_15(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "void const *""'"); 
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<((void const *)arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_16(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_17(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_string< char,std::char_traits< char >,std::allocator< char > > * >(argp2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &std_basic_ostream_Sl_char_Sg__operator_Sl__Sl___SWIG_17(arg1,(std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"ostream___lshift__",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_ostream___lshift____SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_ostream___lshift____SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_ostream___lshift____SWIG_2(self, argc, argv);
  }
check_3:
  
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_long_double, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_4;
    return _wrap_ostream___lshift____SWIG_14(self, argc, argv);
  }
check_4:
  
  if (argc == 2) {
    int _v = 0;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_5;
    return _wrap_ostream___lshift____SWIG_16(self, argc, argv);
  }
check_5:
  
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_6;
    return _wrap_ostream___lshift____SWIG_17(self, argc, argv);
  }
check_6:
  
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_7;
    return _wrap_ostream___lshift____SWIG_15(self, argc, argv);
  }
check_7:
  
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_8;
    return _wrap_ostream___lshift____SWIG_5(self, argc, argv);
  }
check_8:
  
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_9;
    return _wrap_ostream___lshift____SWIG_7(self, argc, argv);
  }
check_9:
  
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_10;
    return _wrap_ostream___lshift____SWIG_6(self, argc, argv);
  }
check_10:
  
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_11;
    return _wrap_ostream___lshift____SWIG_9(self, argc, argv);
  }
check_11:
  
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_12;
    return _wrap_ostream___lshift____SWIG_8(self, argc, argv);
  }
check_12:
  
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_13;
    return _wrap_ostream___lshift____SWIG_4(self, argc, argv);
  }
check_13:
  
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_14;
    return _wrap_ostream___lshift____SWIG_3(self, argc, argv);
  }
check_14:
  
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_15;
    return _wrap_ostream___lshift____SWIG_11(self, argc, argv);
  }
check_15:
  
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_16;
    return _wrap_ostream___lshift____SWIG_10(self, argc, argv);
  }
check_16:
  
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_17;
    return _wrap_ostream___lshift____SWIG_13(self, argc, argv);
  }
check_17:
  
  if (argc == 2) {
    return _wrap_ostream___lshift____SWIG_12(self, argc, argv);
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_ostream___lshift__)

SWIGINTERN PyObject *_wrap_ostream_put(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::char_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_put" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream_put" "', argument " "2"" of type '" "std::basic_ostream< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_ostream< char >::char_type >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->put(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_write(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::char_type *arg2 = (std::basic_ostream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"ostream_write",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_write" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream_write" "', argument " "2"" of type '" "std::basic_ostream< char >::char_type const *""'");
  }
  arg2 = reinterpret_cast< std::basic_ostream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ostream_write" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->write((std::basic_ostream< char >::char_type const *)arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_flush(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"ostream_flush",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_flush" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->flush();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_tellp(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_ostream< char >::pos_type result;
  
  if (!SWIG_Python_UnpackTuple(args,"ostream_tellp",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_tellp" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  result = (arg1)->tellp();
  resultobj = SWIG_NewPointerObj((new std::basic_ostream< char >::pos_type(static_cast< const std::basic_ostream< char >::pos_type& >(result))), SWIGTYPE_p_streampos, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_seekp__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::pos_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_seekp" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_streampos,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::pos_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::pos_type""'");
    } else {
      std::basic_ostream< char >::pos_type * temp = reinterpret_cast< std::basic_ostream< char >::pos_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->seekp(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_seekp__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::off_type arg2 ;
  std::ios_base::seekdir arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_seekp" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_streamoff,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::off_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::off_type""'");
    } else {
      std::basic_ostream< char >::off_type * temp = reinterpret_cast< std::basic_ostream< char >::off_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ostream_seekp" "', argument " "3"" of type '" "std::ios_base::seekdir""'");
  } 
  arg3 = static_cast< std::ios_base::seekdir >(val3);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->seekp(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_seekp(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"ostream_seekp",0,3,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    return _wrap_ostream_seekp__SWIG_0(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_ostream_seekp__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ostream_seekp'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ostream< char >::seekp(std::basic_ostream< char >::pos_type)\n"
    "    std::basic_ostream< char >::seekp(std::basic_ostream< char >::off_type,std::ios_base::seekdir)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_disown_ostream(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_ostream" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_istream(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::basic_istream< char > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_istream",1,1,swig_obj)) SWIG_fail;
  arg1 = self;
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_istream" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  if ( self->ob_type != ((SwigPyClientData*) (SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t)->clientdata)->pytype ) {
    /* subclassed */
    result = (std::basic_istream< char > *)new SwigDirector_istream(arg1,arg2); 
  } else {
    result = (std::basic_istream< char > *)new std::basic_istream< char >(arg2); 
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_istream(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"delete_istream",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_istream" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char,std::char_traits< char > > &(*arg2)(std::basic_istream< char,std::char_traits< char > > &) = (std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)""'"); 
    }
  }
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_ios< char,std::char_traits< char > > &(*arg2)(std::basic_ios< char,std::char_traits< char > > &) = (std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)""'"); 
    }
  }
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::ios_base &(*arg2)(std::ios_base &) = (std::ios_base &(*)(std::ios_base &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::ios_base &(*)(std::ios_base &)""'"); 
    }
  }
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "bool &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "bool &""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_4(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_short,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "short &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "short &""'"); 
  }
  arg2 = reinterpret_cast< short * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_5(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned short &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned short &""'"); 
  }
  arg2 = reinterpret_cast< unsigned short * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_6(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "int &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "int &""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_7(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_unsigned_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned int &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned int &""'"); 
  }
  arg2 = reinterpret_cast< unsigned int * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_8(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "long &""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_9(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_unsigned_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long &""'"); 
  }
  arg2 = reinterpret_cast< unsigned long * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_10(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "long long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "long long &""'"); 
  }
  arg2 = reinterpret_cast< long long * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_11(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_unsigned_long_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long long &""'"); 
  }
  arg2 = reinterpret_cast< unsigned long long * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_12(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "float &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "float &""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_13(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_14(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  long double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "long double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "long double &""'"); 
  }
  arg2 = reinterpret_cast< long double * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_15(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_p_void,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "void *&""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "void *&""'"); 
  }
  arg2 = reinterpret_cast< void ** >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_16(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"istream___rshift__",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_istream___rshift____SWIG_0(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_istream___rshift____SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_istream___rshift____SWIG_2(self, argc, argv);
  }
check_3:
  
  if (argc == 2) {
    int _v = 0;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_bool, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_4;
    return _wrap_istream___rshift____SWIG_3(self, argc, argv);
  }
check_4:
  
  if (argc == 2) {
    int _v = 0;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_short, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_5;
    return _wrap_istream___rshift____SWIG_4(self, argc, argv);
  }
check_5:
  
  if (argc == 2) {
    int _v = 0;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_short, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_6;
    return _wrap_istream___rshift____SWIG_5(self, argc, argv);
  }
check_6:
  
  if (argc == 2) {
    int _v = 0;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_int, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_7;
    return _wrap_istream___rshift____SWIG_6(self, argc, argv);
  }
check_7:
  
  if (argc == 2) {
    int _v = 0;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_int, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_8;
    return _wrap_istream___rshift____SWIG_7(self, argc, argv);
  }
check_8:
  
  if (argc == 2) {
    int _v = 0;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_9;
    return _wrap_istream___rshift____SWIG_8(self, argc, argv);
  }
check_9:
  
  if (argc == 2) {
    int _v = 0;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_long, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_10;
    return _wrap_istream___rshift____SWIG_9(self, argc, argv);
  }
check_10:
  
  if (argc == 2) {
    int _v = 0;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long_long, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_11;
    return _wrap_istream___rshift____SWIG_10(self, argc, argv);
  }
check_11:
  
  if (argc == 2) {
    int _v = 0;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_long_long, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_12;
    return _wrap_istream___rshift____SWIG_11(self, argc, argv);
  }
check_12:
  
  if (argc == 2) {
    int _v = 0;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_13;
    return _wrap_istream___rshift____SWIG_12(self, argc, argv);
  }
check_13:
  
  if (argc == 2) {
    int _v = 0;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_14;
    return _wrap_istream___rshift____SWIG_13(self, argc, argv);
  }
check_14:
  
  if (argc == 2) {
    int _v = 0;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long_double, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_15;
    return _wrap_istream___rshift____SWIG_14(self, argc, argv);
  }
check_15:
  
  if (argc == 2) {
    int _v = 0;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_void, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_16;
    return _wrap_istream___rshift____SWIG_15(self, argc, argv);
  }
check_16:
  
  if (argc == 2) {
    return _wrap_istream___rshift____SWIG_16(self, argc, argv);
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_istream___rshift__)

SWIGINTERN PyObject *_wrap_istream_gcount(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::streamsize result;
  
  if (!SWIG_Python_UnpackTuple(args,"istream_gcount",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_gcount" "', argument " "1"" of type '" "std::basic_istream< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = ((std::basic_istream< char > const *)arg1)->gcount();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_istream< char >::int_type result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (std::basic_istream< char >::int_type)(arg1)->get();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_char,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  std::basic_istream< char >::char_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_get" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  ecode4 = SWIG_AsVal_char(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "istream_get" "', argument " "4"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg4 = static_cast< std::basic_istream< char >::char_type >(val4);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_get" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_4(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = 0 ;
  std::basic_istream< char >::char_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  ecode3 = SWIG_AsVal_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_get" "', argument " "3"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg3 = static_cast< std::basic_istream< char >::char_type >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_5(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"istream_get",0,4,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_istream_get__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_char, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_istream_get__SWIG_1(self, argc, argv);
  }
check_2:
  
  if (argc == 2) {
    return _wrap_istream_get__SWIG_5(self, argc, argv);
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_4;
    {
      {
        int res = SWIG_AsVal_char(argv[2], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_4;
    return _wrap_istream_get__SWIG_4(self, argc, argv);
  }
check_4:
  
  if (argc == 3) {
    return _wrap_istream_get__SWIG_3(self, argc, argv);
  }
  if (argc == 4) {
    return _wrap_istream_get__SWIG_2(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'istream_get'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_istream< char >::get()\n"
    "    std::basic_istream< char >::get(std::basic_istream< char >::char_type &)\n"
    "    std::basic_istream< char >::get(std::basic_istream< char >::char_type *,std::streamsize,std::basic_istream< char >::char_type)\n"
    "    std::basic_istream< char >::get(std::basic_istream< char >::char_type *,std::streamsize)\n"
    "    std::basic_istream< char >::get(std::basic_streambuf< char,std::char_traits< char > > &,std::basic_istream< char >::char_type)\n"
    "    std::basic_istream< char >::get(std::basic_streambuf< char,std::char_traits< char > > &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_istream_getline__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  std::basic_istream< char >::char_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_getline" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_getline" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_getline" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  ecode4 = SWIG_AsVal_char(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "istream_getline" "', argument " "4"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg4 = static_cast< std::basic_istream< char >::char_type >(val4);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->getline(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_getline__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_getline" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_getline" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_getline" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->getline(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_getline(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"istream_getline",0,4,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 3) {
    return _wrap_istream_getline__SWIG_1(self, argc, argv);
  }
  if (argc == 4) {
    return _wrap_istream_getline__SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'istream_getline'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_istream< char >::getline(std::basic_istream< char >::char_type *,std::streamsize,std::basic_istream< char >::char_type)\n"
    "    std::basic_istream< char >::getline(std::basic_istream< char >::char_type *,std::streamsize)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_istream_ignore__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::streamsize arg2 ;
  std::basic_istream< char >::int_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_ignore" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "istream_ignore" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_ignore" "', argument " "3"" of type '" "std::basic_istream< char >::int_type""'");
  } 
  arg3 = static_cast< std::basic_istream< char >::int_type >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->ignore(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::streamsize arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_ignore" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "istream_ignore" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->ignore(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore__SWIG_2(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_ignore" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->ignore();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"istream_ignore",0,3,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_istream_ignore__SWIG_2(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_istream_ignore__SWIG_1(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_istream_ignore__SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'istream_ignore'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_istream< char >::ignore(std::streamsize,std::basic_istream< char >::int_type)\n"
    "    std::basic_istream< char >::ignore(std::streamsize)\n"
    "    std::basic_istream< char >::ignore()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_istream_peek(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_istream< char >::int_type result;
  
  if (!SWIG_Python_UnpackTuple(args,"istream_peek",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_peek" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (std::basic_istream< char >::int_type)(arg1)->peek();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_read(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"istream_read",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_read" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_read" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_read" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->read(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_readsome(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::streamsize result;
  
  if (!SWIG_Python_UnpackTuple(args,"istream_readsome",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_readsome" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_readsome" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_readsome" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (arg1)->readsome(arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_putback(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_putback" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "istream_putback" "', argument " "2"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_istream< char >::char_type >(val2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->putback(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_unget(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"istream_unget",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_unget" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->unget();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_sync(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args,"istream_sync",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_sync" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (int)(arg1)->sync();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_tellg(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_istream< char >::pos_type result;
  
  if (!SWIG_Python_UnpackTuple(args,"istream_tellg",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_tellg" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (arg1)->tellg();
  resultobj = SWIG_NewPointerObj((new std::basic_istream< char >::pos_type(static_cast< const std::basic_istream< char >::pos_type& >(result))), SWIGTYPE_p_streampos, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_seekg__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::pos_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_seekg" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_streampos,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::pos_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::pos_type""'");
    } else {
      std::basic_istream< char >::pos_type * temp = reinterpret_cast< std::basic_istream< char >::pos_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->seekg(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_seekg__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::off_type arg2 ;
  std::ios_base::seekdir arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_seekg" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_streamoff,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::off_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::off_type""'");
    } else {
      std::basic_istream< char >::off_type * temp = reinterpret_cast< std::basic_istream< char >::off_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_seekg" "', argument " "3"" of type '" "std::ios_base::seekdir""'");
  } 
  arg3 = static_cast< std::ios_base::seekdir >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->seekg(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_seekg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"istream_seekg",0,3,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    return _wrap_istream_seekg__SWIG_0(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_istream_seekg__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'istream_seekg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_istream< char >::seekg(std::basic_istream< char >::pos_type)\n"
    "    std::basic_istream< char >::seekg(std::basic_istream< char >::off_type,std::ios_base::seekdir)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_disown_istream(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_istream" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_iostream(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::basic_iostream< char > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_iostream",1,1,swig_obj)) SWIG_fail;
  arg1 = self;
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_iostream" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  if ( self->ob_type != ((SwigPyClientData*) (SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t)->clientdata)->pytype ) {
    /* subclassed */
    result = (std::basic_iostream< char > *)new SwigDirector_iostream(arg1,arg2); 
  } else {
    result = (std::basic_iostream< char > *)new std::basic_iostream< char >(arg2); 
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_iostream(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_iostream< char > *arg1 = (std::basic_iostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"delete_iostream",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_iostream" "', argument " "1"" of type '" "std::basic_iostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_iostream< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_iostream(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_iostream< char > *arg1 = (std::basic_iostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_iostream" "', argument " "1"" of type '" "std::basic_iostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_iostream< char > * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_endl(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char,std::char_traits< char > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "endl" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "endl" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &std::SWIGTEMPLATEDISAMBIGUATOR endl< char,std::char_traits< char > >(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ends(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char,std::char_traits< char > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ends" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ends" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &std::SWIGTEMPLATEDISAMBIGUATOR ends< char,std::char_traits< char > >(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flush(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char,std::char_traits< char > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flush" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "flush" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &std::SWIGTEMPLATEDISAMBIGUATOR flush< char,std::char_traits< char > >(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ipow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args,"ipow",2,2,swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ipow" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ipow" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)tom::ipow(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_normalize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Eigen::DenseBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg1 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  result = (double)tom::SWIGTEMPLATEDISAMBIGUATOR normalize< MatrixMd >((Eigen::DenseBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (arg1) delete arg1; 
  }
  return resultobj;
fail:
  {
    if (arg1) delete arg1; 
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_normalizeRows(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Eigen::DenseBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg1 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  result = (bool)tom::SWIGTEMPLATEDISAMBIGUATOR normalizeRows< MatrixMd >((Eigen::DenseBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if (arg1) delete arg1; 
  }
  return resultobj;
fail:
  {
    if (arg1) delete arg1; 
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_normalizeCols(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Eigen::DenseBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg1 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  result = (bool)tom::SWIGTEMPLATEDISAMBIGUATOR normalizeCols< MatrixMd >((Eigen::DenseBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if (arg1) delete arg1; 
  }
  return resultobj;
fail:
  {
    if (arg1) delete arg1; 
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_kron(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > *arg1 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg2 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg3 = 0 ;
  PyObject *swig_obj[2] ;
  
  {
    arg1 = new Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>();
  }
  if (!SWIG_Python_UnpackTuple(args,"kron",2,2,swig_obj)) SWIG_fail;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg2 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg3 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  tom::SWIGTEMPLATEDISAMBIGUATOR kron< Eigen::MatrixXd,MatrixMd,MatrixMd >((Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &)*arg1,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg2,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg3);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg1->rows(), arg1->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg1->derived().data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg1; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg1, clean<Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic>*>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  return resultobj;
fail:
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_pinvFast__SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > *arg1 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  {
    arg1 = new Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>();
  }
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg2 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "pinvFast" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pinvFast" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  tom::SWIGTEMPLATEDISAMBIGUATOR pinvFast< Eigen::MatrixXd,MatrixMd >((Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &)*arg1,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg2,(std::string const &)*arg3);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg1->rows(), arg1->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg1->derived().data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg1; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg1, clean<Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic>*>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  {
    if (arg2) delete arg2; 
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  {
    if (arg2) delete arg2; 
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_pinvFast__SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > *arg1 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg2 = 0 ;
  
  {
    arg1 = new Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>();
  }
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg2 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  tom::SWIGTEMPLATEDISAMBIGUATOR pinvFast< Eigen::MatrixXd,MatrixMd >((Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &)*arg1,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg1->rows(), arg1->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg1->derived().data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg1; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg1, clean<Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic>*>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  {
    if (arg2) delete arg2; 
  }
  return resultobj;
fail:
  {
    if (arg2) delete arg2; 
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_pinvFast(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"pinvFast",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_pinvFast__SWIG_3(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_pinvFast__SWIG_2(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'pinvFast'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::pinvFast< Eigen::MatrixXd,MatrixMd >(Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,std::string const &)\n"
    "    tom::pinvFast< Eigen::MatrixXd,MatrixMd >(Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_pinv__SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > *arg1 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg2 = 0 ;
  double arg3 ;
  std::string *arg4 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  {
    arg1 = new Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>();
  }
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg2 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pinv" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "pinv" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pinv" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  tom::SWIGTEMPLATEDISAMBIGUATOR pinv< Eigen::MatrixXd,MatrixMd >((Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &)*arg1,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg2,arg3,(std::string const &)*arg4);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg1->rows(), arg1->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg1->derived().data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg1; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg1, clean<Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic>*>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  {
    if (arg2) delete arg2; 
  }
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  {
    if (arg2) delete arg2; 
  }
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_pinv__SWIG_4(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > *arg1 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg2 = 0 ;
  double arg3 ;
  double val3 ;
  int ecode3 = 0 ;
  
  {
    arg1 = new Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>();
  }
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg2 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pinv" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  tom::SWIGTEMPLATEDISAMBIGUATOR pinv< Eigen::MatrixXd,MatrixMd >((Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &)*arg1,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg1->rows(), arg1->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg1->derived().data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg1; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg1, clean<Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic>*>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  {
    if (arg2) delete arg2; 
  }
  return resultobj;
fail:
  {
    if (arg2) delete arg2; 
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_pinv__SWIG_5(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > *arg1 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg2 = 0 ;
  
  {
    arg1 = new Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>();
  }
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg2 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  tom::SWIGTEMPLATEDISAMBIGUATOR pinv< Eigen::MatrixXd,MatrixMd >((Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &)*arg1,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg1->rows(), arg1->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg1->derived().data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg1; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg1, clean<Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic>*>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  {
    if (arg2) delete arg2; 
  }
  return resultobj;
fail:
  {
    if (arg2) delete arg2; 
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_pinv(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"pinv",0,3,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_pinv__SWIG_5(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_pinv__SWIG_4(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_pinv__SWIG_3(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'pinv'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::pinv< Eigen::MatrixXd,MatrixMd >(Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,double,std::string const &)\n"
    "    tom::pinv< Eigen::MatrixXd,MatrixMd >(Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,double)\n"
    "    tom::pinv< Eigen::MatrixXd,MatrixMd >(Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_eigensolve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Eigen::VectorXcd *arg1 = 0 ;
  Eigen::MatrixXcd *arg2 = 0 ;
  Eigen::MatrixXd *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > temp3 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"eigensolve",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Eigen__VectorXcd,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eigensolve" "', argument " "1"" of type '" "Eigen::VectorXcd &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "eigensolve" "', argument " "1"" of type '" "Eigen::VectorXcd &""'"); 
  }
  arg1 = reinterpret_cast< Eigen::VectorXcd * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Eigen__MatrixXcd,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "eigensolve" "', argument " "2"" of type '" "Eigen::MatrixXcd &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "eigensolve" "', argument " "2"" of type '" "Eigen::MatrixXcd &""'"); 
  }
  arg2 = reinterpret_cast< Eigen::MatrixXcd * >(argp2);
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if(array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    temp3 = Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
    arg3 = &temp3;
  }
  tom::eigensolve(*arg1,*arg2,(Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_solveFastOLS__SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > *arg1 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg2 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg3 = 0 ;
  bool arg4 ;
  std::string *arg5 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  
  {
    arg1 = new Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>();
  }
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg2 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg3 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  ecode4 = SWIG_AsVal_bool(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "solveFastOLS" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "solveFastOLS" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "solveFastOLS" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  tom::SWIGTEMPLATEDISAMBIGUATOR solveFastOLS< Eigen::MatrixXd,MatrixMd,MatrixMd >((Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &)*arg1,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg2,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg3,arg4,(std::string const &)*arg5);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg1->rows(), arg1->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg1->derived().data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg1; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg1, clean<Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic>*>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_solveFastOLS__SWIG_4(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > *arg1 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg2 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg3 = 0 ;
  bool arg4 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  {
    arg1 = new Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>();
  }
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg2 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg3 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  ecode4 = SWIG_AsVal_bool(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "solveFastOLS" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  tom::SWIGTEMPLATEDISAMBIGUATOR solveFastOLS< Eigen::MatrixXd,MatrixMd,MatrixMd >((Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &)*arg1,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg2,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg3,arg4);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg1->rows(), arg1->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg1->derived().data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg1; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg1, clean<Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic>*>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  return resultobj;
fail:
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_solveFastOLS__SWIG_5(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > *arg1 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg2 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg3 = 0 ;
  
  {
    arg1 = new Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>();
  }
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg2 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg3 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  tom::SWIGTEMPLATEDISAMBIGUATOR solveFastOLS< Eigen::MatrixXd,MatrixMd,MatrixMd >((Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &)*arg1,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg2,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg3);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg1->rows(), arg1->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg1->derived().data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg1; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg1, clean<Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic>*>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  return resultobj;
fail:
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_solveFastOLS(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"solveFastOLS",0,4,argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    return _wrap_solveFastOLS__SWIG_5(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_solveFastOLS__SWIG_4(self, argc, argv);
  }
  if (argc == 4) {
    return _wrap_solveFastOLS__SWIG_3(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'solveFastOLS'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::solveFastOLS< Eigen::MatrixXd,MatrixMd,MatrixMd >(Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,bool,std::string const &)\n"
    "    tom::solveFastOLS< Eigen::MatrixXd,MatrixMd,MatrixMd >(Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,bool)\n"
    "    tom::solveFastOLS< Eigen::MatrixXd,MatrixMd,MatrixMd >(Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_solveOLS__SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > *arg1 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg2 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg3 = 0 ;
  bool arg4 ;
  std::string *arg5 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  
  {
    arg1 = new Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>();
  }
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg2 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg3 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  ecode4 = SWIG_AsVal_bool(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "solveOLS" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "solveOLS" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "solveOLS" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  tom::SWIGTEMPLATEDISAMBIGUATOR solveOLS< Eigen::MatrixXd,MatrixMd,MatrixMd >((Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &)*arg1,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg2,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg3,arg4,(std::string const &)*arg5);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg1->rows(), arg1->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg1->derived().data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg1; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg1, clean<Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic>*>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_solveOLS__SWIG_4(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > *arg1 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg2 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg3 = 0 ;
  bool arg4 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  {
    arg1 = new Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>();
  }
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg2 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg3 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  ecode4 = SWIG_AsVal_bool(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "solveOLS" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  tom::SWIGTEMPLATEDISAMBIGUATOR solveOLS< Eigen::MatrixXd,MatrixMd,MatrixMd >((Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &)*arg1,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg2,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg3,arg4);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg1->rows(), arg1->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg1->derived().data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg1; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg1, clean<Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic>*>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  return resultobj;
fail:
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_solveOLS__SWIG_5(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > *arg1 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg2 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg3 = 0 ;
  
  {
    arg1 = new Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>();
  }
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg2 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg3 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  tom::SWIGTEMPLATEDISAMBIGUATOR solveOLS< Eigen::MatrixXd,MatrixMd,MatrixMd >((Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &)*arg1,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg2,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg3);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg1->rows(), arg1->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg1->derived().data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg1; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg1, clean<Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic>*>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  return resultobj;
fail:
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_solveOLS(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"solveOLS",0,4,argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    return _wrap_solveOLS__SWIG_5(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_solveOLS__SWIG_4(self, argc, argv);
  }
  if (argc == 4) {
    return _wrap_solveOLS__SWIG_3(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'solveOLS'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::solveOLS< Eigen::MatrixXd,MatrixMd,MatrixMd >(Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,bool,std::string const &)\n"
    "    tom::solveOLS< Eigen::MatrixXd,MatrixMd,MatrixMd >(Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,bool)\n"
    "    tom::solveOLS< Eigen::MatrixXd,MatrixMd,MatrixMd >(Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_solveFastWLS__SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > *arg1 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg2 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg3 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg4 = 0 ;
  bool arg5 ;
  std::string *arg6 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  
  {
    arg1 = new Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>();
  }
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg2 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg3 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg4 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  ecode5 = SWIG_AsVal_bool(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "solveFastWLS" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(swig_obj[4], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "solveFastWLS" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "solveFastWLS" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  tom::SWIGTEMPLATEDISAMBIGUATOR solveFastWLS< Eigen::MatrixXd,MatrixMd,MatrixMd,MatrixMd >((Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &)*arg1,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg2,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg3,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg4,arg5,(std::string const &)*arg6);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg1->rows(), arg1->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg1->derived().data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg1; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg1, clean<Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic>*>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  {
    if (arg4) delete arg4; 
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  {
    if (arg4) delete arg4; 
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_solveFastWLS__SWIG_4(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > *arg1 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg2 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg3 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg4 = 0 ;
  bool arg5 ;
  bool val5 ;
  int ecode5 = 0 ;
  
  {
    arg1 = new Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>();
  }
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg2 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg3 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg4 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  ecode5 = SWIG_AsVal_bool(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "solveFastWLS" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  tom::SWIGTEMPLATEDISAMBIGUATOR solveFastWLS< Eigen::MatrixXd,MatrixMd,MatrixMd,MatrixMd >((Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &)*arg1,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg2,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg3,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg1->rows(), arg1->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg1->derived().data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg1; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg1, clean<Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic>*>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  {
    if (arg4) delete arg4; 
  }
  return resultobj;
fail:
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  {
    if (arg4) delete arg4; 
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_solveFastWLS__SWIG_5(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > *arg1 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg2 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg3 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg4 = 0 ;
  
  {
    arg1 = new Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>();
  }
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg2 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg3 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg4 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  tom::SWIGTEMPLATEDISAMBIGUATOR solveFastWLS< Eigen::MatrixXd,MatrixMd,MatrixMd,MatrixMd >((Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &)*arg1,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg2,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg3,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg4);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg1->rows(), arg1->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg1->derived().data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg1; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg1, clean<Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic>*>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  {
    if (arg4) delete arg4; 
  }
  return resultobj;
fail:
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  {
    if (arg4) delete arg4; 
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_solveFastWLS(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"solveFastWLS",0,5,argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    return _wrap_solveFastWLS__SWIG_5(self, argc, argv);
  }
  if (argc == 4) {
    return _wrap_solveFastWLS__SWIG_4(self, argc, argv);
  }
  if (argc == 5) {
    return _wrap_solveFastWLS__SWIG_3(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'solveFastWLS'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::solveFastWLS< Eigen::MatrixXd,MatrixMd,MatrixMd,MatrixMd >(Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,bool,std::string const &)\n"
    "    tom::solveFastWLS< Eigen::MatrixXd,MatrixMd,MatrixMd,MatrixMd >(Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,bool)\n"
    "    tom::solveFastWLS< Eigen::MatrixXd,MatrixMd,MatrixMd,MatrixMd >(Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_solveWLS__SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > *arg1 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg2 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg3 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg4 = 0 ;
  bool arg5 ;
  std::string *arg6 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  
  {
    arg1 = new Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>();
  }
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg2 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg3 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg4 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  ecode5 = SWIG_AsVal_bool(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "solveWLS" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(swig_obj[4], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "solveWLS" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "solveWLS" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  tom::SWIGTEMPLATEDISAMBIGUATOR solveWLS< Eigen::MatrixXd,MatrixMd,MatrixMd,MatrixMd >((Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &)*arg1,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg2,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg3,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg4,arg5,(std::string const &)*arg6);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg1->rows(), arg1->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg1->derived().data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg1; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg1, clean<Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic>*>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  {
    if (arg4) delete arg4; 
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  {
    if (arg4) delete arg4; 
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_solveWLS__SWIG_4(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > *arg1 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg2 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg3 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg4 = 0 ;
  bool arg5 ;
  bool val5 ;
  int ecode5 = 0 ;
  
  {
    arg1 = new Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>();
  }
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg2 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg3 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg4 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  ecode5 = SWIG_AsVal_bool(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "solveWLS" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  tom::SWIGTEMPLATEDISAMBIGUATOR solveWLS< Eigen::MatrixXd,MatrixMd,MatrixMd,MatrixMd >((Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &)*arg1,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg2,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg3,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg1->rows(), arg1->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg1->derived().data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg1; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg1, clean<Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic>*>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  {
    if (arg4) delete arg4; 
  }
  return resultobj;
fail:
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  {
    if (arg4) delete arg4; 
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_solveWLS__SWIG_5(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > *arg1 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg2 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg3 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg4 = 0 ;
  
  {
    arg1 = new Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>();
  }
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg2 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg3 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg4 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  tom::SWIGTEMPLATEDISAMBIGUATOR solveWLS< Eigen::MatrixXd,MatrixMd,MatrixMd,MatrixMd >((Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &)*arg1,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg2,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg3,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg4);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg1->rows(), arg1->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg1->derived().data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg1; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg1, clean<Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic>*>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  {
    if (arg4) delete arg4; 
  }
  return resultobj;
fail:
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  {
    if (arg4) delete arg4; 
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_solveWLS(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"solveWLS",0,5,argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    return _wrap_solveWLS__SWIG_5(self, argc, argv);
  }
  if (argc == 4) {
    return _wrap_solveWLS__SWIG_4(self, argc, argv);
  }
  if (argc == 5) {
    return _wrap_solveWLS__SWIG_3(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'solveWLS'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::solveWLS< Eigen::MatrixXd,MatrixMd,MatrixMd,MatrixMd >(Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,bool,std::string const &)\n"
    "    tom::solveWLS< Eigen::MatrixXd,MatrixMd,MatrixMd,MatrixMd >(Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,bool)\n"
    "    tom::solveWLS< Eigen::MatrixXd,MatrixMd,MatrixMd,MatrixMd >(Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_solveFastGLS__SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Eigen::MatrixXd *arg1 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg2 = 0 ;
  Eigen::MatrixXd *arg3 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg4 = 0 ;
  bool arg5 ;
  std::string *arg6 = 0 ;
  Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > temp3 ;
  bool val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  
  {
    arg1 = new Eigen::MatrixXd();
  }
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg2 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if(array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    temp3 = Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
    arg3 = &temp3;
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg4 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  ecode5 = SWIG_AsVal_bool(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "solveFastGLS" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(swig_obj[4], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "solveFastGLS" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "solveFastGLS" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  tom::SWIGTEMPLATEDISAMBIGUATOR solveFastGLS< MatrixMd,MatrixMd >(*arg1,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg2,(Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > const &)*arg3,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg4,arg5,(std::string const &)*arg6);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg1->rows(), arg1->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg1->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg1; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg1, clean<Eigen::MatrixXd *>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg4) delete arg4; 
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg4) delete arg4; 
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_solveFastGLS__SWIG_4(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Eigen::MatrixXd *arg1 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg2 = 0 ;
  Eigen::MatrixXd *arg3 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg4 = 0 ;
  bool arg5 ;
  Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > temp3 ;
  bool val5 ;
  int ecode5 = 0 ;
  
  {
    arg1 = new Eigen::MatrixXd();
  }
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg2 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if(array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    temp3 = Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
    arg3 = &temp3;
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg4 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  ecode5 = SWIG_AsVal_bool(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "solveFastGLS" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  tom::SWIGTEMPLATEDISAMBIGUATOR solveFastGLS< MatrixMd,MatrixMd >(*arg1,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg2,(Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > const &)*arg3,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg1->rows(), arg1->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg1->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg1; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg1, clean<Eigen::MatrixXd *>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg4) delete arg4; 
  }
  return resultobj;
fail:
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg4) delete arg4; 
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_solveFastGLS__SWIG_5(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Eigen::MatrixXd *arg1 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg2 = 0 ;
  Eigen::MatrixXd *arg3 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg4 = 0 ;
  Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > temp3 ;
  
  {
    arg1 = new Eigen::MatrixXd();
  }
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg2 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if(array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    temp3 = Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
    arg3 = &temp3;
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg4 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  tom::SWIGTEMPLATEDISAMBIGUATOR solveFastGLS< MatrixMd,MatrixMd >(*arg1,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg2,(Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > const &)*arg3,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg4);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg1->rows(), arg1->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg1->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg1; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg1, clean<Eigen::MatrixXd *>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg4) delete arg4; 
  }
  return resultobj;
fail:
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg4) delete arg4; 
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_solveFastGLS(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"solveFastGLS",0,5,argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    return _wrap_solveFastGLS__SWIG_5(self, argc, argv);
  }
  if (argc == 4) {
    return _wrap_solveFastGLS__SWIG_4(self, argc, argv);
  }
  if (argc == 5) {
    return _wrap_solveFastGLS__SWIG_3(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'solveFastGLS'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::solveFastGLS< MatrixMd,MatrixMd >(Eigen::MatrixXd &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixXd const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,bool,std::string const &)\n"
    "    tom::solveFastGLS< MatrixMd,MatrixMd >(Eigen::MatrixXd &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixXd const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,bool)\n"
    "    tom::solveFastGLS< MatrixMd,MatrixMd >(Eigen::MatrixXd &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixXd const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_solveGLS__SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Eigen::MatrixXd *arg1 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg2 = 0 ;
  Eigen::MatrixXd *arg3 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg4 = 0 ;
  bool arg5 ;
  std::string *arg6 = 0 ;
  Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > temp3 ;
  bool val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  
  {
    arg1 = new Eigen::MatrixXd();
  }
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg2 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if(array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    temp3 = Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
    arg3 = &temp3;
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg4 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  ecode5 = SWIG_AsVal_bool(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "solveGLS" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(swig_obj[4], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "solveGLS" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "solveGLS" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  tom::SWIGTEMPLATEDISAMBIGUATOR solveGLS< MatrixMd,MatrixMd >(*arg1,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg2,(Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > const &)*arg3,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg4,arg5,(std::string const &)*arg6);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg1->rows(), arg1->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg1->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg1; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg1, clean<Eigen::MatrixXd *>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg4) delete arg4; 
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg4) delete arg4; 
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_solveGLS__SWIG_4(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Eigen::MatrixXd *arg1 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg2 = 0 ;
  Eigen::MatrixXd *arg3 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg4 = 0 ;
  bool arg5 ;
  Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > temp3 ;
  bool val5 ;
  int ecode5 = 0 ;
  
  {
    arg1 = new Eigen::MatrixXd();
  }
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg2 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if(array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    temp3 = Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
    arg3 = &temp3;
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg4 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  ecode5 = SWIG_AsVal_bool(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "solveGLS" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  tom::SWIGTEMPLATEDISAMBIGUATOR solveGLS< MatrixMd,MatrixMd >(*arg1,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg2,(Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > const &)*arg3,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg1->rows(), arg1->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg1->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg1; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg1, clean<Eigen::MatrixXd *>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg4) delete arg4; 
  }
  return resultobj;
fail:
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg4) delete arg4; 
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_solveGLS__SWIG_5(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Eigen::MatrixXd *arg1 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg2 = 0 ;
  Eigen::MatrixXd *arg3 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg4 = 0 ;
  Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > temp3 ;
  
  {
    arg1 = new Eigen::MatrixXd();
  }
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg2 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if(array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    temp3 = Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
    arg3 = &temp3;
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg4 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  tom::SWIGTEMPLATEDISAMBIGUATOR solveGLS< MatrixMd,MatrixMd >(*arg1,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg2,(Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > const &)*arg3,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg4);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg1->rows(), arg1->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg1->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg1; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg1, clean<Eigen::MatrixXd *>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg4) delete arg4; 
  }
  return resultobj;
fail:
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg4) delete arg4; 
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_solveGLS(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"solveGLS",0,5,argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    return _wrap_solveGLS__SWIG_5(self, argc, argv);
  }
  if (argc == 4) {
    return _wrap_solveGLS__SWIG_4(self, argc, argv);
  }
  if (argc == 5) {
    return _wrap_solveGLS__SWIG_3(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'solveGLS'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::solveGLS< MatrixMd,MatrixMd >(Eigen::MatrixXd &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixXd const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,bool,std::string const &)\n"
    "    tom::solveGLS< MatrixMd,MatrixMd >(Eigen::MatrixXd &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixXd const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,bool)\n"
    "    tom::solveGLS< MatrixMd,MatrixMd >(Eigen::MatrixXd &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixXd const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_improveWLRA__SWIG_4(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg1 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg2 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg3 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg4 = 0 ;
  double arg5 ;
  int arg6 ;
  std::string *arg7 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int res7 = SWIG_OLDOBJ ;
  double result;
  
  if ((nobjs < 7) || (nobjs > 7)) SWIG_fail;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg1 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg2 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg3 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[3], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg4 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "improveWLRA" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "improveWLRA" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    std::string *ptr = (std::string *)0;
    res7 = SWIG_AsPtr_std_string(swig_obj[6], &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "improveWLRA" "', argument " "7"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "improveWLRA" "', argument " "7"" of type '" "std::string const &""'"); 
    }
    arg7 = ptr;
  }
  result = (double)tom::SWIGTEMPLATEDISAMBIGUATOR improveWLRA< MatrixMd,MatrixMd,MatrixMd,MatrixMd >((Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg1,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg2,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg3,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg4,arg5,arg6,(std::string const &)*arg7);
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (arg1) delete arg1; 
  }
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  {
    if (arg4) delete arg4; 
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  return resultobj;
fail:
  {
    if (arg1) delete arg1; 
  }
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  {
    if (arg4) delete arg4; 
  }
  if (SWIG_IsNewObj(res7)) delete arg7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_improveWLRA__SWIG_5(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg1 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg2 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg3 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg4 = 0 ;
  double arg5 ;
  int arg6 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  double result;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg1 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg2 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg3 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[3], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg4 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "improveWLRA" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "improveWLRA" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  result = (double)tom::SWIGTEMPLATEDISAMBIGUATOR improveWLRA< MatrixMd,MatrixMd,MatrixMd,MatrixMd >((Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg1,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg2,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg3,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg4,arg5,arg6);
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (arg1) delete arg1; 
  }
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  {
    if (arg4) delete arg4; 
  }
  return resultobj;
fail:
  {
    if (arg1) delete arg1; 
  }
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  {
    if (arg4) delete arg4; 
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_improveWLRA__SWIG_6(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg1 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg2 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg3 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg4 = 0 ;
  double arg5 ;
  double val5 ;
  int ecode5 = 0 ;
  double result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg1 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg2 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg3 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[3], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg4 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "improveWLRA" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  result = (double)tom::SWIGTEMPLATEDISAMBIGUATOR improveWLRA< MatrixMd,MatrixMd,MatrixMd,MatrixMd >((Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg1,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg2,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg3,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg4,arg5);
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (arg1) delete arg1; 
  }
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  {
    if (arg4) delete arg4; 
  }
  return resultobj;
fail:
  {
    if (arg1) delete arg1; 
  }
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  {
    if (arg4) delete arg4; 
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_improveWLRA__SWIG_7(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg1 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg2 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg3 = 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > *arg4 = 0 ;
  double result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg1 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg2 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg3 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[3], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if (array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    arg4 = new Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
  }
  result = (double)tom::SWIGTEMPLATEDISAMBIGUATOR improveWLRA< MatrixMd,MatrixMd,MatrixMd,MatrixMd >((Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg1,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg2,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg3,(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)*arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (arg1) delete arg1; 
  }
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  {
    if (arg4) delete arg4; 
  }
  return resultobj;
fail:
  {
    if (arg1) delete arg1; 
  }
  {
    if (arg2) delete arg2; 
  }
  {
    if (arg3) delete arg3; 
  }
  {
    if (arg4) delete arg4; 
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_improveWLRA(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"improveWLRA",0,7,argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    return _wrap_improveWLRA__SWIG_7(self, argc, argv);
  }
  if (argc == 5) {
    return _wrap_improveWLRA__SWIG_6(self, argc, argv);
  }
  if (argc == 6) {
    return _wrap_improveWLRA__SWIG_5(self, argc, argv);
  }
  if (argc == 7) {
    return _wrap_improveWLRA__SWIG_4(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'improveWLRA'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::improveWLRA< MatrixMd,MatrixMd,MatrixMd,MatrixMd >(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,double,int,std::string const &)\n"
    "    tom::improveWLRA< MatrixMd,MatrixMd,MatrixMd,MatrixMd >(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,double,int)\n"
    "    tom::improveWLRA< MatrixMd,MatrixMd,MatrixMd,MatrixMd >(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,double)\n"
    "    tom::improveWLRA< MatrixMd,MatrixMd,MatrixMd,MatrixMd >(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &,Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const &)\n");
  return 0;
}


SWIGINTERN int _wrap_new_Random__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  tom::Random *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (tom::Random *)new tom::Random();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tom__Random, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Random__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  tom::Random *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Random" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (tom::Random *)new tom::Random(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tom__Random, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Random(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Random",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Random__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Random__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Random'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Random::Random()\n"
    "    tom::Random::Random(unsigned int)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_Random_seed__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  tom::Random *arg1 = (tom::Random *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Random, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Random_seed" "', argument " "1"" of type '" "tom::Random *""'"); 
  }
  arg1 = reinterpret_cast< tom::Random * >(argp1);
  result = (unsigned int)(arg1)->seed();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Random_seed__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Random *arg1 = (tom::Random *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Random, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Random_seed" "', argument " "1"" of type '" "tom::Random *""'"); 
  }
  arg1 = reinterpret_cast< tom::Random * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Random_seed" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->seed(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Random_seed(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Random_seed",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_Random_seed__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Random_seed__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Random_seed'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Random::seed()\n"
    "    tom::Random::seed(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Random_random__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  tom::Random *arg1 = (tom::Random *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Random, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Random_random" "', argument " "1"" of type '" "tom::Random *""'"); 
  }
  arg1 = reinterpret_cast< tom::Random * >(argp1);
  result = (double)(arg1)->random();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Random_random__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Random *arg1 = (tom::Random *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Random, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Random_random" "', argument " "1"" of type '" "tom::Random *""'"); 
  }
  arg1 = reinterpret_cast< tom::Random * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Random_random" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Random_random" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    Eigen::MatrixXd* temp = new Eigen::MatrixXd((const Eigen::MatrixXd &)(arg1)->random(arg2,arg3));
    npy_intp dims[2] = {
      temp->rows(), temp->cols() 
    };
    resultobj = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) temp->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!resultobj) {
      delete temp; SWIG_fail; 
    }
    array_setbase(resultobj, encapsulate(temp, clean<Eigen::MatrixXd*>));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Random_random(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Random_random",0,3,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_Random_random__SWIG_0(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_Random_random__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Random_random'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Random::random()\n"
    "    tom::Random::random(int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Random_integer(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Random *arg1 = (tom::Random *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Random, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Random_integer" "', argument " "1"" of type '" "tom::Random *""'"); 
  }
  arg1 = reinterpret_cast< tom::Random * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Random_integer" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int)(arg1)->integer(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Random_sample(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Random *arg1 = (tom::Random *) 0 ;
  Eigen::MatrixBase< Eigen::Map< Eigen::Array< double,Eigen::Dynamic,1 >,0,Eigen::InnerStride< Eigen::Dynamic > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Random, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Random_sample" "', argument " "1"" of type '" "tom::Random *""'"); 
  }
  arg1 = reinterpret_cast< tom::Random * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_Eigen__MatrixBaseT_Eigen__MapT_Eigen__ArrayT_double_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Random_sample" "', argument " "2"" of type '" "Eigen::MatrixBase< Eigen::Map< Eigen::Array< double,Eigen::Dynamic,1 >,0,Eigen::InnerStride< Eigen::Dynamic > > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Random_sample" "', argument " "2"" of type '" "Eigen::MatrixBase< Eigen::Map< Eigen::Array< double,Eigen::Dynamic,1 >,0,Eigen::InnerStride< Eigen::Dynamic > > > const &""'"); 
  }
  arg2 = reinterpret_cast< Eigen::MatrixBase< Eigen::Map< Eigen::Array< double,Eigen::Dynamic,1 >,0,Eigen::InnerStride< Eigen::Dynamic > > > * >(argp2);
  result = (unsigned int)(arg1)->SWIGTEMPLATEDISAMBIGUATOR sample< ArrayMd >((Eigen::MatrixBase< Eigen::Map< Eigen::Array< double,Eigen::Dynamic,1 >,0,Eigen::InnerStride< Eigen::Dynamic > > > const &)*arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Random(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Random *arg1 = (tom::Random *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"delete_Random",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Random, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Random" "', argument " "1"" of type '" "tom::Random *""'"); 
  }
  arg1 = reinterpret_cast< tom::Random * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_NoIndex_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable NoIndex is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_NoIndex_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_long(static_cast< long >(tom::NoIndex));
  return pyobj;
}


SWIGINTERN int _wrap_new_Sequence__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tom::Symbol,std::allocator< tom::Symbol > > *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  tom::Sequence *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Sequence" "', argument " "1"" of type '" "std::vector< tom::Symbol,std::allocator< tom::Symbol > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Sequence" "', argument " "1"" of type '" "std::vector< tom::Symbol,std::allocator< tom::Symbol > > const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Sequence" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Sequence" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (tom::Sequence *)new tom::Sequence((std::vector< tom::Symbol,std::allocator< tom::Symbol > > const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tom__Sequence, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN int _wrap_new_Sequence__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tom::Symbol,std::allocator< tom::Symbol > > *arg1 = 0 ;
  int arg2 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  tom::Sequence *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Sequence" "', argument " "1"" of type '" "std::vector< tom::Symbol,std::allocator< tom::Symbol > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Sequence" "', argument " "1"" of type '" "std::vector< tom::Symbol,std::allocator< tom::Symbol > > const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Sequence" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (tom::Sequence *)new tom::Sequence((std::vector< tom::Symbol,std::allocator< tom::Symbol > > const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tom__Sequence, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN int _wrap_new_Sequence__SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  unsigned long arg1 ;
  int arg2 ;
  int arg3 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  tom::Sequence *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Sequence" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Sequence" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Sequence" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (tom::Sequence *)new tom::Sequence(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tom__Sequence, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Sequence__SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  unsigned long arg1 ;
  int arg2 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  tom::Sequence *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Sequence" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Sequence" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (tom::Sequence *)new tom::Sequence(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tom__Sequence, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Sequence__SWIG_4(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  unsigned long arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  tom::Sequence *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Sequence" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  result = (tom::Sequence *)new tom::Sequence(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tom__Sequence, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Sequence__SWIG_5(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  tom::Sequence *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (tom::Sequence *)new tom::Sequence();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tom__Sequence, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Sequence__SWIG_6(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  tom::Sequence *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Sequence" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Sequence" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (tom::Sequence *)new tom::Sequence((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tom__Sequence, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN int _wrap_new_Sequence(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Sequence",0,3,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Sequence__SWIG_5(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_new_Sequence__SWIG_4(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    return _wrap_new_Sequence__SWIG_6(self, argc, argv);
  }
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_4;
    return _wrap_new_Sequence__SWIG_3(self, argc, argv);
  }
check_4:
  
  if (argc == 2) {
    return _wrap_new_Sequence__SWIG_1(self, argc, argv);
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_6;
    return _wrap_new_Sequence__SWIG_2(self, argc, argv);
  }
check_6:
  
  if (argc == 3) {
    return _wrap_new_Sequence__SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Sequence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Sequence::Sequence(std::vector< tom::Symbol,std::allocator< tom::Symbol > > const &,int,int)\n"
    "    tom::Sequence::Sequence(std::vector< tom::Symbol,std::allocator< tom::Symbol > > const &,int)\n"
    "    tom::Sequence::Sequence(unsigned long,int,int)\n"
    "    tom::Sequence::Sequence(unsigned long,int)\n"
    "    tom::Sequence::Sequence(unsigned long)\n"
    "    tom::Sequence::Sequence()\n"
    "    tom::Sequence::Sequence(std::string const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_Sequence_nU(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequence_nU",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_nU" "', argument " "1"" of type '" "tom::Sequence const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  result = (int)((tom::Sequence const *)arg1)->nU();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence_nO(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequence_nO",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_nO" "', argument " "1"" of type '" "tom::Sequence const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  result = (int)((tom::Sequence const *)arg1)->nO();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned long result;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequence_size",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_size" "', argument " "1"" of type '" "tom::Sequence const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  result = (unsigned long)((tom::Sequence const *)arg1)->size();
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence_isReversed(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequence_isReversed",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_isReversed" "', argument " "1"" of type '" "tom::Sequence const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  result = (bool)((tom::Sequence const *)arg1)->isReversed();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence_pos(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned long result;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequence_pos",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_pos" "', argument " "1"" of type '" "tom::Sequence const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  result = (unsigned long)((tom::Sequence const *)arg1)->pos();
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence_at(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  tom::Symbol result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_at" "', argument " "1"" of type '" "tom::Sequence const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sequence_at" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  result = (tom::Symbol)((tom::Sequence const *)arg1)->at(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  tom::Sequence result;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequence_copy",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_copy" "', argument " "1"" of type '" "tom::Sequence const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  result = ((tom::Sequence const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj((new tom::Sequence(static_cast< const tom::Sequence& >(result))), SWIGTYPE_p_tom__Sequence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence_mergeToIo__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  tom::Sequence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  tom::Sequence result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_mergeToIo" "', argument " "1"" of type '" "tom::Sequence const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Sequence_mergeToIo" "', argument " "2"" of type '" "tom::Sequence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Sequence_mergeToIo" "', argument " "2"" of type '" "tom::Sequence const &""'"); 
  }
  arg2 = reinterpret_cast< tom::Sequence * >(argp2);
  result = ((tom::Sequence const *)arg1)->mergeToIo((tom::Sequence const &)*arg2);
  resultobj = SWIG_NewPointerObj((new tom::Sequence(static_cast< const tom::Sequence& >(result))), SWIGTYPE_p_tom__Sequence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence_mergeToIo__SWIG_1(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tom::Sequence result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_mergeToIo" "', argument " "1"" of type '" "tom::Sequence const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  result = ((tom::Sequence const *)arg1)->mergeToIo();
  resultobj = SWIG_NewPointerObj((new tom::Sequence(static_cast< const tom::Sequence& >(result))), SWIGTYPE_p_tom__Sequence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence_mergeToIo(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sequence_mergeToIo",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_Sequence_mergeToIo__SWIG_1(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sequence_mergeToIo__SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sequence_mergeToIo'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Sequence::mergeToIo(tom::Sequence const &) const\n"
    "    tom::Sequence::mergeToIo() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sequence_reverse(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequence_reverse",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_reverse" "', argument " "1"" of type '" "tom::Sequence *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  (arg1)->reverse();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence_sub(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  unsigned long arg2 ;
  unsigned long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  tom::Sequence result;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequence_sub",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_sub" "', argument " "1"" of type '" "tom::Sequence const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sequence_sub" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Sequence_sub" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = static_cast< unsigned long >(val3);
  result = ((tom::Sequence const *)arg1)->sub(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new tom::Sequence(static_cast< const tom::Sequence& >(result))), SWIGTYPE_p_tom__Sequence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence_slice__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  long arg2 ;
  long arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  tom::Sequence result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_slice" "', argument " "1"" of type '" "tom::Sequence const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  ecode2 = SWIG_AsVal_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sequence_slice" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Sequence_slice" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Sequence_slice" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = ((tom::Sequence const *)arg1)->slice(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new tom::Sequence(static_cast< const tom::Sequence& >(result))), SWIGTYPE_p_tom__Sequence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence_slice__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  long arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  tom::Sequence result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_slice" "', argument " "1"" of type '" "tom::Sequence const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  ecode2 = SWIG_AsVal_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sequence_slice" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Sequence_slice" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  result = ((tom::Sequence const *)arg1)->slice(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new tom::Sequence(static_cast< const tom::Sequence& >(result))), SWIGTYPE_p_tom__Sequence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence_slice__SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  tom::Sequence result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_slice" "', argument " "1"" of type '" "tom::Sequence const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  ecode2 = SWIG_AsVal_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sequence_slice" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = ((tom::Sequence const *)arg1)->slice(arg2);
  resultobj = SWIG_NewPointerObj((new tom::Sequence(static_cast< const tom::Sequence& >(result))), SWIGTYPE_p_tom__Sequence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence_slice__SWIG_3(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tom::Sequence result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_slice" "', argument " "1"" of type '" "tom::Sequence const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  result = ((tom::Sequence const *)arg1)->slice();
  resultobj = SWIG_NewPointerObj((new tom::Sequence(static_cast< const tom::Sequence& >(result))), SWIGTYPE_p_tom__Sequence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence_slice(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sequence_slice",0,4,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_Sequence_slice__SWIG_3(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Sequence_slice__SWIG_2(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_Sequence_slice__SWIG_1(self, argc, argv);
  }
  if (argc == 4) {
    return _wrap_Sequence_slice__SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sequence_slice'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Sequence::slice(long,long,bool) const\n"
    "    tom::Sequence::slice(long,long) const\n"
    "    tom::Sequence::slice(long) const\n"
    "    tom::Sequence::slice() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sequence_substr(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  unsigned long arg2 ;
  unsigned long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  tom::Sequence result;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequence_substr",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_substr" "', argument " "1"" of type '" "tom::Sequence const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sequence_substr" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Sequence_substr" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = static_cast< unsigned long >(val3);
  result = ((tom::Sequence const *)arg1)->substr(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new tom::Sequence(static_cast< const tom::Sequence& >(result))), SWIGTYPE_p_tom__Sequence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence___eq__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  tom::Sequence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence___eq__" "', argument " "1"" of type '" "tom::Sequence const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Sequence___eq__" "', argument " "2"" of type '" "tom::Sequence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Sequence___eq__" "', argument " "2"" of type '" "tom::Sequence const &""'"); 
  }
  arg2 = reinterpret_cast< tom::Sequence * >(argp2);
  result = (bool)((tom::Sequence const *)arg1)->operator ==((tom::Sequence const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  tom::Sequence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_count" "', argument " "1"" of type '" "tom::Sequence const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Sequence_count" "', argument " "2"" of type '" "tom::Sequence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Sequence_count" "', argument " "2"" of type '" "tom::Sequence const &""'"); 
  }
  arg2 = reinterpret_cast< tom::Sequence * >(argp2);
  result = (unsigned int)((tom::Sequence const *)arg1)->count((tom::Sequence const &)*arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence_isStrictlyIO(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequence_isStrictlyIO",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_isStrictlyIO" "', argument " "1"" of type '" "tom::Sequence const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  result = (bool)((tom::Sequence const *)arg1)->isStrictlyIO();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence_isAlignedIO(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequence_isAlignedIO",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_isAlignedIO" "', argument " "1"" of type '" "tom::Sequence const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  result = (bool)((tom::Sequence const *)arg1)->isAlignedIO();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence_isValidIO(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequence_isValidIO",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_isValidIO" "', argument " "1"" of type '" "tom::Sequence const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  result = (bool)((tom::Sequence const *)arg1)->isValidIO();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence_subIO(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  unsigned long arg2 ;
  unsigned long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  tom::Sequence result;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequence_subIO",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_subIO" "', argument " "1"" of type '" "tom::Sequence const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sequence_subIO" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Sequence_subIO" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = static_cast< unsigned long >(val3);
  result = ((tom::Sequence const *)arg1)->subIO(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new tom::Sequence(static_cast< const tom::Sequence& >(result))), SWIGTYPE_p_tom__Sequence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence_length(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned long result;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequence_length",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_length" "', argument " "1"" of type '" "tom::Sequence const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  result = (unsigned long)((tom::Sequence const *)arg1)->length();
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence_o__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  tom::Symbol result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_o" "', argument " "1"" of type '" "tom::Sequence const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sequence_o" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  result = (tom::Symbol)((tom::Sequence const *)arg1)->o(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence_o__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  unsigned long arg2 ;
  tom::Symbol arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_o" "', argument " "1"" of type '" "tom::Sequence *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sequence_o" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Sequence_o" "', argument " "3"" of type '" "tom::Symbol""'");
  } 
  arg3 = static_cast< tom::Symbol >(val3);
  (arg1)->o(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence_o(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sequence_o",0,3,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    return _wrap_Sequence_o__SWIG_0(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_Sequence_o__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sequence_o'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Sequence::o(unsigned long) const\n"
    "    tom::Sequence::o(unsigned long,tom::Symbol)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sequence_u__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  tom::Symbol result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_u" "', argument " "1"" of type '" "tom::Sequence const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sequence_u" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  result = (tom::Symbol)((tom::Sequence const *)arg1)->u(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence_u__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  unsigned long arg2 ;
  tom::Symbol arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_u" "', argument " "1"" of type '" "tom::Sequence *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sequence_u" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Sequence_u" "', argument " "3"" of type '" "tom::Symbol""'");
  } 
  arg3 = static_cast< tom::Symbol >(val3);
  (arg1)->u(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence_u(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sequence_u",0,3,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    return _wrap_Sequence_u__SWIG_0(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_Sequence_u__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sequence_u'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Sequence::u(unsigned long) const\n"
    "    tom::Sequence::u(unsigned long,tom::Symbol)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sequence_toString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequence_toString",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_toString" "', argument " "1"" of type '" "tom::Sequence const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  result = ((tom::Sequence const *)arg1)->toString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence_toJSON(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequence_toJSON",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_toJSON" "', argument " "1"" of type '" "tom::Sequence const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  result = ((tom::Sequence const *)arg1)->toJSON();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence_fromJSON(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_fromJSON" "', argument " "1"" of type '" "tom::Sequence *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Sequence_fromJSON" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->fromJSON((char const *)arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence_repr(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequence_repr",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence_repr" "', argument " "1"" of type '" "tom::Sequence const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  result = ((tom::Sequence const *)arg1)->repr();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_REPRFUNC_CLOSURE(_wrap_Sequence_repr)

SWIGINTERN PyObject *_wrap_Sequence___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  long result;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequence___len__",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence___len__" "', argument " "1"" of type '" "tom::Sequence const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  result = (long)tom_Sequence___len__((tom::Sequence const *)arg1);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_LENFUNC_CLOSURE(_wrap_Sequence___len__)

SWIGINTERN PyObject *_wrap_Sequence___getitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  tom::Symbol result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence___getitem__" "', argument " "1"" of type '" "tom::Sequence *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  ecode2 = SWIG_AsVal_long(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sequence___getitem__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = (tom::Symbol)tom_Sequence___getitem__(arg1,arg2); 
    }
    catch(std::out_of_range) {
      SWIG_exception(SWIG_IndexError, "Index out of bounds"); 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequence___setitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  long arg2 ;
  tom::Symbol *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  tom::Symbol temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequence___setitem__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequence___setitem__" "', argument " "1"" of type '" "tom::Sequence *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  ecode2 = SWIG_AsVal_long(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sequence___setitem__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Sequence___setitem__" "', argument " "3"" of type '" "tom::Symbol""'");
  } 
  temp3 = static_cast< tom::Symbol >(val3);
  arg3 = &temp3;
  {
    try {
      tom_Sequence___setitem__(arg1,arg2,(int const &)*arg3); 
    }
    catch(std::out_of_range) {
      SWIG_exception(SWIG_IndexError, "Index out of bounds"); 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_OBJOBJARGPROC_CLOSURE(_wrap_Sequence___setitem__)

SWIGINTERN PyObject *_wrap_delete_Sequence(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Sequence *arg1 = (tom::Sequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"delete_Sequence",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Sequence, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Sequence" "', argument " "1"" of type '" "tom::Sequence *""'"); 
  }
  arg1 = reinterpret_cast< tom::Sequence * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (!SWIG_Python_UnpackTuple(args,"Sequences_iterator",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences_iterator" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (swig::SwigPyIterator *)std_vector_Sl_tom_Sequence_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_UNARYFUNC_CLOSURE(_wrap_Sequences_iterator)

SWIGINTERN PyObject *_wrap_Sequences___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > const > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequences___nonzero__",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences___nonzero__" "', argument " "1"" of type '" "std::vector< tom::Sequence > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (bool)std_vector_Sl_tom_Sequence_Sg____nonzero__((std::vector< tom::Sequence > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_INQUIRY_CLOSURE(_wrap_Sequences___nonzero__)

SWIGINTERN PyObject *_wrap_Sequences___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > const > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequences___bool__",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences___bool__" "', argument " "1"" of type '" "std::vector< tom::Sequence > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (bool)std_vector_Sl_tom_Sequence_Sg____bool__((std::vector< tom::Sequence > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > const > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< tom::Sequence >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequences___len__",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences___len__" "', argument " "1"" of type '" "std::vector< tom::Sequence > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = std_vector_Sl_tom_Sequence_Sg____len__((std::vector< tom::Sequence > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_LENFUNC_CLOSURE(_wrap_Sequences___len__)

SWIGINTERN PyObject *_wrap_Sequences_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< tom::Sequence >::value_type result;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequences_pop",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences_pop" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  try {
    result = std_vector_Sl_tom_Sequence_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< tom::Sequence >::value_type(static_cast< const std::vector< tom::Sequence >::value_type& >(result))), SWIGTYPE_p_tom__Sequence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  std::vector< tom::Sequence >::difference_type arg2 ;
  std::vector< tom::Sequence >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< tom::Sequence,std::allocator< tom::Sequence > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequences___getslice__",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences___getslice__" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sequences___getslice__" "', argument " "2"" of type '" "std::vector< tom::Sequence >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< tom::Sequence >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Sequences___getslice__" "', argument " "3"" of type '" "std::vector< tom::Sequence >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< tom::Sequence >::difference_type >(val3);
  try {
    result = (std::vector< tom::Sequence,std::allocator< tom::Sequence > > *)std_vector_Sl_tom_Sequence_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  {
    std::shared_ptr<  std::vector<tom::Sequence> > *smartresult = result ? new std::shared_ptr<  std::vector<tom::Sequence> >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, SWIG_POINTER_OWN | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences___setslice____SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  std::vector< tom::Sequence >::difference_type arg2 ;
  std::vector< tom::Sequence >::difference_type arg3 ;
  std::vector< tom::Sequence,std::allocator< tom::Sequence > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences___setslice__" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sequences___setslice__" "', argument " "2"" of type '" "std::vector< tom::Sequence >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< tom::Sequence >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Sequences___setslice__" "', argument " "3"" of type '" "std::vector< tom::Sequence >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< tom::Sequence >::difference_type >(val3);
  {
    std::vector<tom::Sequence,std::allocator< tom::Sequence > > *ptr = (std::vector<tom::Sequence,std::allocator< tom::Sequence > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Sequences___setslice__" "', argument " "4"" of type '" "std::vector< tom::Sequence,std::allocator< tom::Sequence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Sequences___setslice__" "', argument " "4"" of type '" "std::vector< tom::Sequence,std::allocator< tom::Sequence > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_tom_Sequence_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< tom::Sequence,std::allocator< tom::Sequence > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences___setslice____SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  std::vector< tom::Sequence >::difference_type arg2 ;
  std::vector< tom::Sequence >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences___setslice__" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sequences___setslice__" "', argument " "2"" of type '" "std::vector< tom::Sequence >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< tom::Sequence >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Sequences___setslice__" "', argument " "3"" of type '" "std::vector< tom::Sequence >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< tom::Sequence >::difference_type >(val3);
  try {
    std_vector_Sl_tom_Sequence_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sequences___setslice__",0,4,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 3) {
    return _wrap_Sequences___setslice____SWIG_1(self, argc, argv);
  }
  if (argc == 4) {
    return _wrap_Sequences___setslice____SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sequences___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< tom::Sequence >::__setslice__(std::vector< tom::Sequence >::difference_type,std::vector< tom::Sequence >::difference_type,std::vector< tom::Sequence,std::allocator< tom::Sequence > > const &)\n"
    "    std::vector< tom::Sequence >::__setslice__(std::vector< tom::Sequence >::difference_type,std::vector< tom::Sequence >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sequences___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  std::vector< tom::Sequence >::difference_type arg2 ;
  std::vector< tom::Sequence >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequences___delslice__",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences___delslice__" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sequences___delslice__" "', argument " "2"" of type '" "std::vector< tom::Sequence >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< tom::Sequence >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Sequences___delslice__" "', argument " "3"" of type '" "std::vector< tom::Sequence >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< tom::Sequence >::difference_type >(val3);
  try {
    std_vector_Sl_tom_Sequence_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences___delitem____SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  std::vector< tom::Sequence >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences___delitem__" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sequences___delitem__" "', argument " "2"" of type '" "std::vector< tom::Sequence >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< tom::Sequence >::difference_type >(val2);
  try {
    std_vector_Sl_tom_Sequence_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences___getitem____SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  std::vector< tom::Sequence,std::allocator< tom::Sequence > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences___getitem__" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Sequences___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< tom::Sequence,std::allocator< tom::Sequence > > *)std_vector_Sl_tom_Sequence_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  {
    std::shared_ptr<  std::vector<tom::Sequence> > *smartresult = result ? new std::shared_ptr<  std::vector<tom::Sequence> >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, SWIG_POINTER_OWN | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences___setitem____SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< tom::Sequence,std::allocator< tom::Sequence > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences___setitem__" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Sequences___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector<tom::Sequence,std::allocator< tom::Sequence > > *ptr = (std::vector<tom::Sequence,std::allocator< tom::Sequence > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Sequences___setitem__" "', argument " "3"" of type '" "std::vector< tom::Sequence,std::allocator< tom::Sequence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Sequences___setitem__" "', argument " "3"" of type '" "std::vector< tom::Sequence,std::allocator< tom::Sequence > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_tom_Sequence_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< tom::Sequence,std::allocator< tom::Sequence > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences___setitem____SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences___setitem__" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Sequences___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_tom_Sequence_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences___delitem____SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences___delitem__" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Sequences___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_tom_Sequence_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sequences___delitem__",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_Sequences___delitem____SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    return _wrap_Sequences___delitem____SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sequences___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< tom::Sequence >::__delitem__(std::vector< tom::Sequence >::difference_type)\n"
    "    std::vector< tom::Sequence >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sequences___getitem____SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  std::vector< tom::Sequence >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > const > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > const > *smartarg1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< tom::Sequence >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences___getitem__" "', argument " "1"" of type '" "std::vector< tom::Sequence > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sequences___getitem__" "', argument " "2"" of type '" "std::vector< tom::Sequence >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< tom::Sequence >::difference_type >(val2);
  try {
    result = (std::vector< tom::Sequence >::value_type *) &std_vector_Sl_tom_Sequence_Sg____getitem____SWIG_1((std::vector< tom::Sequence > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tom__Sequence, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sequences___getitem__",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_Sequences___getitem____SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    return _wrap_Sequences___getitem____SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sequences___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< tom::Sequence >::__getitem__(PySliceObject *)\n"
    "    std::vector< tom::Sequence >::__getitem__(std::vector< tom::Sequence >::difference_type) const\n");
  return 0;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_Sequences___getitem__)

SWIGINTERN PyObject *_wrap_Sequences___setitem____SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  std::vector< tom::Sequence >::difference_type arg2 ;
  std::vector< tom::Sequence >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences___setitem__" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sequences___setitem__" "', argument " "2"" of type '" "std::vector< tom::Sequence >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< tom::Sequence >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Sequences___setitem__" "', argument " "3"" of type '" "std::vector< tom::Sequence >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Sequences___setitem__" "', argument " "3"" of type '" "std::vector< tom::Sequence >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< tom::Sequence >::value_type * >(argp3);
  try {
    std_vector_Sl_tom_Sequence_Sg____setitem____SWIG_2(arg1,arg2,(tom::Sequence const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences___setitem____SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  std::vector< tom::Sequence >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences___setitem__" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sequences___setitem__" "', argument " "2"" of type '" "std::vector< tom::Sequence >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< tom::Sequence >::difference_type >(val2);
  try {
    std_vector_Sl_tom_Sequence_Sg____setitem____SWIG_3(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sequences___setitem__",0,3,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_Sequences___setitem____SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    return _wrap_Sequences___setitem____SWIG_3(self, argc, argv);
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_3;
    {
      int res = swig::asptr(argv[2], (std::vector<tom::Sequence,std::allocator< tom::Sequence > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_Sequences___setitem____SWIG_0(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    return _wrap_Sequences___setitem____SWIG_2(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sequences___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< tom::Sequence >::__setitem__(PySliceObject *,std::vector< tom::Sequence,std::allocator< tom::Sequence > > const &)\n"
    "    std::vector< tom::Sequence >::__setitem__(PySliceObject *)\n"
    "    std::vector< tom::Sequence >::__setitem__(std::vector< tom::Sequence >::difference_type,std::vector< tom::Sequence >::value_type const &)\n"
    "    std::vector< tom::Sequence >::__setitem__(std::vector< tom::Sequence >::difference_type)\n");
  return 0;
}


SWIGPY_OBJOBJARGPROC_CLOSURE(_wrap_Sequences___setitem__)

SWIGINTERN PyObject *_wrap_Sequences_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  std::vector< tom::Sequence >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences_append" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Sequences_append" "', argument " "2"" of type '" "std::vector< tom::Sequence >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Sequences_append" "', argument " "2"" of type '" "std::vector< tom::Sequence >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< tom::Sequence >::value_type * >(argp2);
  std_vector_Sl_tom_Sequence_Sg__append(arg1,(tom::Sequence const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_Sequences__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< tom::Sequence > *)new std::vector< tom::Sequence >();
  {
    std::shared_ptr<  std::vector<tom::Sequence> > *smartresult = result ? new std::shared_ptr<  std::vector<tom::Sequence> >(result SWIG_NO_NULL_DELETER_SWIG_BUILTIN_INIT) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, SWIG_BUILTIN_INIT | SWIG_POINTER_OWN);
  }
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Sequences__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< tom::Sequence > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector<tom::Sequence,std::allocator< tom::Sequence > > *ptr = (std::vector<tom::Sequence,std::allocator< tom::Sequence > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Sequences" "', argument " "1"" of type '" "std::vector< tom::Sequence > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Sequences" "', argument " "1"" of type '" "std::vector< tom::Sequence > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< tom::Sequence > *)new std::vector< tom::Sequence >((std::vector< tom::Sequence > const &)*arg1);
  {
    std::shared_ptr<  std::vector<tom::Sequence> > *smartresult = result ? new std::shared_ptr<  std::vector<tom::Sequence> >(result SWIG_NO_NULL_DELETER_SWIG_BUILTIN_INIT) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, SWIG_BUILTIN_INIT | SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN PyObject *_wrap_Sequences_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > const > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequences_empty",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences_empty" "', argument " "1"" of type '" "std::vector< tom::Sequence > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (bool)((std::vector< tom::Sequence > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > const > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< tom::Sequence >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequences_size",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences_size" "', argument " "1"" of type '" "std::vector< tom::Sequence > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((std::vector< tom::Sequence > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequences_clear",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences_clear" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  std::vector< tom::Sequence > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared2 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences_swap" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp2, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Sequences_swap" "', argument " "2"" of type '" "std::vector< tom::Sequence > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Sequences_swap" "', argument " "2"" of type '" "std::vector< tom::Sequence > &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp2);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp2);
      arg2 = const_cast< std::vector< tom::Sequence > * >(tempshared2.get());
    } else {
      arg2 = const_cast< std::vector< tom::Sequence > * >(reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp2)->get());
    }
  }
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > const > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< tom::Sequence > > result;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequences_get_allocator",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences_get_allocator" "', argument " "1"" of type '" "std::vector< tom::Sequence > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((std::vector< tom::Sequence > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< tom::Sequence >::allocator_type(static_cast< const std::vector< tom::Sequence >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_tom__Sequence_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< tom::Sequence >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequences_begin",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences_begin" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< tom::Sequence >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< tom::Sequence >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequences_end",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences_end" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< tom::Sequence >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< tom::Sequence >::reverse_iterator result;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequences_rbegin",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences_rbegin" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< tom::Sequence >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< tom::Sequence >::reverse_iterator result;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequences_rend",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences_rend" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< tom::Sequence >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_Sequences__SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< tom::Sequence > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Sequences" "', argument " "1"" of type '" "std::vector< tom::Sequence >::size_type""'");
  } 
  arg1 = static_cast< std::vector< tom::Sequence >::size_type >(val1);
  result = (std::vector< tom::Sequence > *)new std::vector< tom::Sequence >(arg1);
  {
    std::shared_ptr<  std::vector<tom::Sequence> > *smartresult = result ? new std::shared_ptr<  std::vector<tom::Sequence> >(result SWIG_NO_NULL_DELETER_SWIG_BUILTIN_INIT) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, SWIG_BUILTIN_INIT | SWIG_POINTER_OWN);
  }
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_Sequences_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequences_pop_back",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences_pop_back" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences_resize__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  std::vector< tom::Sequence >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences_resize" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sequences_resize" "', argument " "2"" of type '" "std::vector< tom::Sequence >::size_type""'");
  } 
  arg2 = static_cast< std::vector< tom::Sequence >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences_erase__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  std::vector< tom::Sequence >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< tom::Sequence >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences_erase" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Sequences_erase" "', argument " "2"" of type '" "std::vector< tom::Sequence >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< tom::Sequence >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< tom::Sequence >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Sequences_erase" "', argument " "2"" of type '" "std::vector< tom::Sequence >::iterator""'");
    }
  }
  result = std_vector_Sl_tom_Sequence_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< tom::Sequence >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences_erase__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  std::vector< tom::Sequence >::iterator arg2 ;
  std::vector< tom::Sequence >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< tom::Sequence >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences_erase" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Sequences_erase" "', argument " "2"" of type '" "std::vector< tom::Sequence >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< tom::Sequence >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< tom::Sequence >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Sequences_erase" "', argument " "2"" of type '" "std::vector< tom::Sequence >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Sequences_erase" "', argument " "3"" of type '" "std::vector< tom::Sequence >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< tom::Sequence >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< tom::Sequence >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Sequences_erase" "', argument " "3"" of type '" "std::vector< tom::Sequence >::iterator""'");
    }
  }
  result = std_vector_Sl_tom_Sequence_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< tom::Sequence >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sequences_erase",0,3,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    return _wrap_Sequences_erase__SWIG_0(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_Sequences_erase__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sequences_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< tom::Sequence >::erase(std::vector< tom::Sequence >::iterator)\n"
    "    std::vector< tom::Sequence >::erase(std::vector< tom::Sequence >::iterator,std::vector< tom::Sequence >::iterator)\n");
  return 0;
}


SWIGINTERN int _wrap_new_Sequences__SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence >::size_type arg1 ;
  std::vector< tom::Sequence >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< tom::Sequence > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Sequences" "', argument " "1"" of type '" "std::vector< tom::Sequence >::size_type""'");
  } 
  arg1 = static_cast< std::vector< tom::Sequence >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Sequences" "', argument " "2"" of type '" "std::vector< tom::Sequence >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Sequences" "', argument " "2"" of type '" "std::vector< tom::Sequence >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< tom::Sequence >::value_type * >(argp2);
  result = (std::vector< tom::Sequence > *)new std::vector< tom::Sequence >(arg1,(std::vector< tom::Sequence >::value_type const &)*arg2);
  {
    std::shared_ptr<  std::vector<tom::Sequence> > *smartresult = result ? new std::shared_ptr<  std::vector<tom::Sequence> >(result SWIG_NO_NULL_DELETER_SWIG_BUILTIN_INIT) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, SWIG_BUILTIN_INIT | SWIG_POINTER_OWN);
  }
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Sequences(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Sequences",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Sequences__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[0], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_new_Sequences__SWIG_2(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    return _wrap_new_Sequences__SWIG_1(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_new_Sequences__SWIG_3(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Sequences'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< tom::Sequence >::vector()\n"
    "    std::vector< tom::Sequence >::vector(std::vector< tom::Sequence > const &)\n"
    "    std::vector< tom::Sequence >::vector(std::vector< tom::Sequence >::size_type)\n"
    "    std::vector< tom::Sequence >::vector(std::vector< tom::Sequence >::size_type,std::vector< tom::Sequence >::value_type const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_Sequences_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  std::vector< tom::Sequence >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences_push_back" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Sequences_push_back" "', argument " "2"" of type '" "std::vector< tom::Sequence >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Sequences_push_back" "', argument " "2"" of type '" "std::vector< tom::Sequence >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< tom::Sequence >::value_type * >(argp2);
  (arg1)->push_back((std::vector< tom::Sequence >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > const > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< tom::Sequence >::value_type *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequences_front",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences_front" "', argument " "1"" of type '" "std::vector< tom::Sequence > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::vector< tom::Sequence >::value_type *) &((std::vector< tom::Sequence > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tom__Sequence, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > const > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< tom::Sequence >::value_type *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequences_back",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences_back" "', argument " "1"" of type '" "std::vector< tom::Sequence > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::vector< tom::Sequence >::value_type *) &((std::vector< tom::Sequence > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tom__Sequence, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  std::vector< tom::Sequence >::size_type arg2 ;
  std::vector< tom::Sequence >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequences_assign",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences_assign" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sequences_assign" "', argument " "2"" of type '" "std::vector< tom::Sequence >::size_type""'");
  } 
  arg2 = static_cast< std::vector< tom::Sequence >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[1], &argp3, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Sequences_assign" "', argument " "3"" of type '" "std::vector< tom::Sequence >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Sequences_assign" "', argument " "3"" of type '" "std::vector< tom::Sequence >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< tom::Sequence >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< tom::Sequence >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences_resize__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  std::vector< tom::Sequence >::size_type arg2 ;
  std::vector< tom::Sequence >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences_resize" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sequences_resize" "', argument " "2"" of type '" "std::vector< tom::Sequence >::size_type""'");
  } 
  arg2 = static_cast< std::vector< tom::Sequence >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Sequences_resize" "', argument " "3"" of type '" "std::vector< tom::Sequence >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Sequences_resize" "', argument " "3"" of type '" "std::vector< tom::Sequence >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< tom::Sequence >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< tom::Sequence >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sequences_resize",0,3,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    return _wrap_Sequences_resize__SWIG_0(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_Sequences_resize__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sequences_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< tom::Sequence >::resize(std::vector< tom::Sequence >::size_type)\n"
    "    std::vector< tom::Sequence >::resize(std::vector< tom::Sequence >::size_type,std::vector< tom::Sequence >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sequences_insert__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  std::vector< tom::Sequence >::iterator arg2 ;
  std::vector< tom::Sequence >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< tom::Sequence >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences_insert" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Sequences_insert" "', argument " "2"" of type '" "std::vector< tom::Sequence >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< tom::Sequence >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< tom::Sequence >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Sequences_insert" "', argument " "2"" of type '" "std::vector< tom::Sequence >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Sequences_insert" "', argument " "3"" of type '" "std::vector< tom::Sequence >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Sequences_insert" "', argument " "3"" of type '" "std::vector< tom::Sequence >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< tom::Sequence >::value_type * >(argp3);
  result = std_vector_Sl_tom_Sequence_Sg__insert__SWIG_0(arg1,arg2,(tom::Sequence const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< tom::Sequence >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences_insert__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  std::vector< tom::Sequence >::iterator arg2 ;
  std::vector< tom::Sequence >::size_type arg3 ;
  std::vector< tom::Sequence >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences_insert" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Sequences_insert" "', argument " "2"" of type '" "std::vector< tom::Sequence >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< tom::Sequence >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< tom::Sequence >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Sequences_insert" "', argument " "2"" of type '" "std::vector< tom::Sequence >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Sequences_insert" "', argument " "3"" of type '" "std::vector< tom::Sequence >::size_type""'");
  } 
  arg3 = static_cast< std::vector< tom::Sequence >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Sequences_insert" "', argument " "4"" of type '" "std::vector< tom::Sequence >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Sequences_insert" "', argument " "4"" of type '" "std::vector< tom::Sequence >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< tom::Sequence >::value_type * >(argp4);
  std_vector_Sl_tom_Sequence_Sg__insert__SWIG_1(arg1,arg2,arg3,(tom::Sequence const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Sequences_insert",0,4,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 3) {
    return _wrap_Sequences_insert__SWIG_0(self, argc, argv);
  }
  if (argc == 4) {
    return _wrap_Sequences_insert__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Sequences_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< tom::Sequence >::insert(std::vector< tom::Sequence >::iterator,std::vector< tom::Sequence >::value_type const &)\n"
    "    std::vector< tom::Sequence >::insert(std::vector< tom::Sequence >::iterator,std::vector< tom::Sequence >::size_type,std::vector< tom::Sequence >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Sequences_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  std::vector< tom::Sequence >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences_reserve" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sequences_reserve" "', argument " "2"" of type '" "std::vector< tom::Sequence >::size_type""'");
  } 
  arg2 = static_cast< std::vector< tom::Sequence >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sequences_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > const > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< tom::Sequence >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args,"Sequences_capacity",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sequences_capacity" "', argument " "1"" of type '" "std::vector< tom::Sequence > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((std::vector< tom::Sequence > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Sequences(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< tom::Sequence > *arg1 = (std::vector< tom::Sequence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< tom::Sequence > > tempshared1 ;
  std::shared_ptr< std::vector< tom::Sequence > > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"delete_Sequences",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Sequences" "', argument " "1"" of type '" "std::vector< tom::Sequence > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<tom::Sequence> > * >(argp1);
      arg1 = const_cast< std::vector< tom::Sequence > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Policy_nU__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Policy *arg1 = (tom::Policy *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Policy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Policy_nU__set" "', argument " "1"" of type '" "tom::Policy *""'"); 
  }
  arg1 = reinterpret_cast< tom::Policy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Policy_nU__set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->nU_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Policy_nU__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Policy *arg1 = (tom::Policy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!SWIG_Python_UnpackTuple(args,"Policy_nU__get",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Policy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Policy_nU__get" "', argument " "1"" of type '" "tom::Policy *""'"); 
  }
  arg1 = reinterpret_cast< tom::Policy * >(argp1);
  result = (unsigned int) ((arg1)->nU_);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Policy_exploration__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Policy *arg1 = (tom::Policy *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Policy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Policy_exploration__set" "', argument " "1"" of type '" "tom::Policy *""'"); 
  }
  arg1 = reinterpret_cast< tom::Policy * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Policy_exploration__set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->exploration_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Policy_exploration__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Policy *arg1 = (tom::Policy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"Policy_exploration__get",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Policy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Policy_exploration__get" "', argument " "1"" of type '" "tom::Policy *""'"); 
  }
  arg1 = reinterpret_cast< tom::Policy * >(argp1);
  result = (double) ((arg1)->exploration_);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_Policy__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  double arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  tom::Policy *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Policy" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Policy" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (tom::Policy *)new tom::Policy(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tom__Policy, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Policy__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  tom::Policy *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Policy" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (tom::Policy *)new tom::Policy(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tom__Policy, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Policy__SWIG_2(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  tom::Policy *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (tom::Policy *)new tom::Policy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tom__Policy, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Policy(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Policy",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Policy__SWIG_2(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Policy__SWIG_1(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_new_Policy__SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Policy'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Policy::Policy(unsigned int,double)\n"
    "    tom::Policy::Policy(unsigned int)\n"
    "    tom::Policy::Policy()\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_Policy_u(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Policy *arg1 = (tom::Policy *) 0 ;
  Eigen::VectorXd *arg2 = 0 ;
  tom::Random *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::Matrix< double,Eigen::Dynamic,1 > temp2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args,"Policy_u",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Policy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Policy_u" "', argument " "1"" of type '" "tom::Policy const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Policy * >(argp1);
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if(array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    temp2 = Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
    arg2 = &temp2;
  }
  res3 = SWIG_ConvertPtr(swig_obj[1], &argp3, SWIGTYPE_p_tom__Random,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Policy_u" "', argument " "3"" of type '" "tom::Random &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Policy_u" "', argument " "3"" of type '" "tom::Random &""'"); 
  }
  arg3 = reinterpret_cast< tom::Random * >(argp3);
  result = (int)((tom::Policy const *)arg1)->u((Eigen::VectorXd const &)*arg2,*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Policy_p(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Policy *arg1 = (tom::Policy *) 0 ;
  Eigen::VectorXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::Matrix< double,Eigen::Dynamic,1 > temp2 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Policy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Policy_p" "', argument " "1"" of type '" "tom::Policy const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Policy * >(argp1);
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if(array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    temp2 = Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
    arg2 = &temp2;
  }
  {
    Eigen::VectorXd* temp = new Eigen::VectorXd((const Eigen::VectorXd &)((tom::Policy const *)arg1)->p((Eigen::VectorXd const &)*arg2));
    npy_intp dims[2] = {
      temp->rows(), temp->cols() 
    };
    resultobj = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) temp->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!resultobj) {
      delete temp; SWIG_fail; 
    }
    array_setbase(resultobj, encapsulate(temp, clean<Eigen::VectorXd*>));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Policy_addPlane(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Policy *arg1 = (tom::Policy *) 0 ;
  int arg2 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  std::vector< double,std::allocator< double > > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[4] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Policy_addPlane",3,3,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Policy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Policy_addPlane" "', argument " "1"" of type '" "tom::Policy *""'"); 
  }
  arg1 = reinterpret_cast< tom::Policy * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Policy_addPlane" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Policy_addPlane" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Policy_addPlane" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    int res = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Policy_addPlane" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->addPlane(arg2,(std::vector< int,std::allocator< int > > const &)*arg3,arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Policy_toJSON(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Policy *arg1 = (tom::Policy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!SWIG_Python_UnpackTuple(args,"Policy_toJSON",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Policy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Policy_toJSON" "', argument " "1"" of type '" "tom::Policy const *""'"); 
  }
  arg1 = reinterpret_cast< tom::Policy * >(argp1);
  result = ((tom::Policy const *)arg1)->toJSON();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Policy_fromJSON(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Policy *arg1 = (tom::Policy *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Policy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Policy_fromJSON" "', argument " "1"" of type '" "tom::Policy *""'"); 
  }
  arg1 = reinterpret_cast< tom::Policy * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Policy_fromJSON" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->fromJSON((char const *)arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Policy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Policy *arg1 = (tom::Policy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"delete_Policy",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Policy, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Policy" "', argument " "1"" of type '" "tom::Policy *""'"); 
  }
  arg1 = reinterpret_cast< tom::Policy * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_Oom__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  tom::Oom *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (tom::Oom *)new tom::Oom();
  {
    std::shared_ptr<  tom::Oom > *smartresult = result ? new std::shared_ptr<  tom::Oom >(result SWIG_NO_NULL_DELETER_SWIG_BUILTIN_INIT) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, SWIG_BUILTIN_INIT | SWIG_POINTER_OWN);
  }
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Oom__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  tom::Random *arg5 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  tom::Oom *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Oom" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Oom" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Oom" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Oom" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5, SWIGTYPE_p_tom__Random,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_Oom" "', argument " "5"" of type '" "tom::Random const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Oom" "', argument " "5"" of type '" "tom::Random const &""'"); 
  }
  arg5 = reinterpret_cast< tom::Random * >(argp5);
  result = (tom::Oom *)new tom::Oom(arg1,arg2,arg3,arg4,(tom::Random const &)*arg5);
  {
    std::shared_ptr<  tom::Oom > *smartresult = result ? new std::shared_ptr<  tom::Oom >(result SWIG_NO_NULL_DELETER_SWIG_BUILTIN_INIT) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, SWIG_BUILTIN_INIT | SWIG_POINTER_OWN);
  }
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Oom__SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  tom::Oom *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Oom" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Oom" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Oom" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Oom" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (tom::Oom *)new tom::Oom(arg1,arg2,arg3,arg4);
  {
    std::shared_ptr<  tom::Oom > *smartresult = result ? new std::shared_ptr<  tom::Oom >(result SWIG_NO_NULL_DELETER_SWIG_BUILTIN_INIT) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, SWIG_BUILTIN_INIT | SWIG_POINTER_OWN);
  }
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Oom__SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  tom::Oom *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Oom" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Oom" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Oom" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (tom::Oom *)new tom::Oom(arg1,arg2,arg3);
  {
    std::shared_ptr<  tom::Oom > *smartresult = result ? new std::shared_ptr<  tom::Oom >(result SWIG_NO_NULL_DELETER_SWIG_BUILTIN_INIT) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, SWIG_BUILTIN_INIT | SWIG_POINTER_OWN);
  }
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Oom__SWIG_4(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  tom::Oom *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Oom" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Oom" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (tom::Oom *)new tom::Oom(arg1,arg2);
  {
    std::shared_ptr<  tom::Oom > *smartresult = result ? new std::shared_ptr<  tom::Oom >(result SWIG_NO_NULL_DELETER_SWIG_BUILTIN_INIT) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, SWIG_BUILTIN_INIT | SWIG_POINTER_OWN);
  }
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Oom__SWIG_5(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  tom::Oom *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Oom" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Oom" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (tom::Oom *)new tom::Oom((std::string const &)*arg1);
  {
    std::shared_ptr<  tom::Oom > *smartresult = result ? new std::shared_ptr<  tom::Oom >(result SWIG_NO_NULL_DELETER_SWIG_BUILTIN_INIT) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, SWIG_BUILTIN_INIT | SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN int _wrap_new_Oom(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Oom",0,5,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Oom__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_Oom__SWIG_5(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_new_Oom__SWIG_4(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_new_Oom__SWIG_3(self, argc, argv);
  }
  if (argc == 4) {
    return _wrap_new_Oom__SWIG_2(self, argc, argv);
  }
  if (argc == 5) {
    return _wrap_new_Oom__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Oom'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Oom::Oom()\n"
    "    tom::Oom::Oom(int,int,int,double,tom::Random const &)\n"
    "    tom::Oom::Oom(int,int,int,double)\n"
    "    tom::Oom::Oom(int,int,int)\n"
    "    tom::Oom::Oom(int,int)\n"
    "    tom::Oom::Oom(std::string const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_Oom_setSize__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_setSize" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oom_setSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Oom_setSize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Oom_setSize" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  (arg1)->setSize(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_setSize__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_setSize" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oom_setSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Oom_setSize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->setSize(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_setSize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Oom_setSize",0,4,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 3) {
    return _wrap_Oom_setSize__SWIG_1(self, argc, argv);
  }
  if (argc == 4) {
    return _wrap_Oom_setSize__SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Oom_setSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Oom::setSize(int,int,int)\n"
    "    tom::Oom::setSize(int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Oom_init(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Oom_init",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_init" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->init();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_validate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Oom_validate",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_validate" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->validate();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_nU(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom const > tempshared1 ;
  std::shared_ptr< tom::Oom const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args,"Oom_nU",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_nU" "', argument " "1"" of type '" "tom::Oom const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)((tom::Oom const *)arg1)->nU();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_nO(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom const > tempshared1 ;
  std::shared_ptr< tom::Oom const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args,"Oom_nO",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_nO" "', argument " "1"" of type '" "tom::Oom const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)((tom::Oom const *)arg1)->nO();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_dim(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom const > tempshared1 ;
  std::shared_ptr< tom::Oom const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args,"Oom_dim",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_dim" "', argument " "1"" of type '" "tom::Oom const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)((tom::Oom const *)arg1)->dim();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_sig__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom const > tempshared1 ;
  std::shared_ptr< tom::Oom const > *smartarg1 = 0 ;
  Eigen::RowVectorXd *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_sig" "', argument " "1"" of type '" "tom::Oom const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Eigen::RowVectorXd *) &((tom::Oom const *)arg1)->sig();
  {
    npy_intp dims[2] = {
      result->rows(), result->cols() 
    };
    resultobj = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) const_cast<Eigen::RowVectorXd *>(result)->data(), 0, NPY_ARRAY_FARRAY_RO, NULL);
    if (!resultobj) SWIG_fail;
    array_setbase(resultobj,encapsulate(result, NULL));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_sig__SWIG_1(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  Eigen::RowVectorXd *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_sig" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Eigen::RowVectorXd *) &(arg1)->sig();
  {
    npy_intp dims[2] = {
      result->rows(), result->cols() 
    };
    resultobj = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) const_cast<Eigen::RowVectorXd *>(result)->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!resultobj) SWIG_fail;
    array_setbase(resultobj,encapsulate(result, NULL));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_sig__SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  Eigen::RowVectorXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  Eigen::Matrix< double,1,Eigen::Dynamic > temp2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_sig" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if(array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    temp2 = Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
    arg2 = &temp2;
  }
  (arg1)->sig((Eigen::RowVectorXd const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_sig(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Oom_sig",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_Oom_sig__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_Oom_sig__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Oom_sig__SWIG_2(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Oom_sig'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Oom::sig() const\n"
    "    tom::Oom::sig()\n"
    "    tom::Oom::sig(Eigen::RowVectorXd const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Oom_tau__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  tom::Symbol arg2 ;
  tom::Symbol arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom const > tempshared1 ;
  std::shared_ptr< tom::Oom const > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  Eigen::MatrixXd *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_tau" "', argument " "1"" of type '" "tom::Oom const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oom_tau" "', argument " "2"" of type '" "tom::Symbol""'");
  } 
  arg2 = static_cast< tom::Symbol >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Oom_tau" "', argument " "3"" of type '" "tom::Symbol""'");
  } 
  arg3 = static_cast< tom::Symbol >(val3);
  result = (Eigen::MatrixXd *) &((tom::Oom const *)arg1)->tau(arg2,arg3);
  {
    npy_intp dims[2] = {
      result->rows(), result->cols() 
    };
    resultobj = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) const_cast<Eigen::MatrixXd *>(result)->data(), 0, NPY_ARRAY_FARRAY_RO, NULL);
    if (!resultobj) SWIG_fail;
    array_setbase(resultobj,encapsulate(result, NULL));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_tau__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  tom::Symbol arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom const > tempshared1 ;
  std::shared_ptr< tom::Oom const > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Eigen::MatrixXd *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_tau" "', argument " "1"" of type '" "tom::Oom const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oom_tau" "', argument " "2"" of type '" "tom::Symbol""'");
  } 
  arg2 = static_cast< tom::Symbol >(val2);
  result = (Eigen::MatrixXd *) &((tom::Oom const *)arg1)->tau(arg2);
  {
    npy_intp dims[2] = {
      result->rows(), result->cols() 
    };
    resultobj = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) const_cast<Eigen::MatrixXd *>(result)->data(), 0, NPY_ARRAY_FARRAY_RO, NULL);
    if (!resultobj) SWIG_fail;
    array_setbase(resultobj,encapsulate(result, NULL));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_tau__SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  tom::Symbol arg2 ;
  tom::Symbol arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  Eigen::MatrixXd *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_tau" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oom_tau" "', argument " "2"" of type '" "tom::Symbol""'");
  } 
  arg2 = static_cast< tom::Symbol >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Oom_tau" "', argument " "3"" of type '" "tom::Symbol""'");
  } 
  arg3 = static_cast< tom::Symbol >(val3);
  result = (Eigen::MatrixXd *) &(arg1)->tau(arg2,arg3);
  {
    npy_intp dims[2] = {
      result->rows(), result->cols() 
    };
    resultobj = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) const_cast<Eigen::MatrixXd *>(result)->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!resultobj) SWIG_fail;
    array_setbase(resultobj,encapsulate(result, NULL));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_tau__SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  tom::Symbol arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Eigen::MatrixXd *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_tau" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oom_tau" "', argument " "2"" of type '" "tom::Symbol""'");
  } 
  arg2 = static_cast< tom::Symbol >(val2);
  result = (Eigen::MatrixXd *) &(arg1)->tau(arg2);
  {
    npy_intp dims[2] = {
      result->rows(), result->cols() 
    };
    resultobj = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) const_cast<Eigen::MatrixXd *>(result)->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!resultobj) SWIG_fail;
    array_setbase(resultobj,encapsulate(result, NULL));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_tau__SWIG_4(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  tom::Symbol arg2 ;
  tom::Symbol arg3 ;
  Eigen::MatrixXd *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > temp4 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_tau" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oom_tau" "', argument " "2"" of type '" "tom::Symbol""'");
  } 
  arg2 = static_cast< tom::Symbol >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Oom_tau" "', argument " "3"" of type '" "tom::Symbol""'");
  } 
  arg3 = static_cast< tom::Symbol >(val3);
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[3], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if(array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    temp4 = Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
    arg4 = &temp4;
  }
  (arg1)->tau(arg2,arg3,(Eigen::MatrixXd const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_tau(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Oom_tau",0,4,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    return _wrap_Oom_tau__SWIG_3(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Oom_tau__SWIG_1(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_Oom_tau__SWIG_2(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_Oom_tau__SWIG_0(self, argc, argv);
  }
  if (argc == 4) {
    return _wrap_Oom_tau__SWIG_4(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Oom_tau'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Oom::tau(tom::Symbol,tom::Symbol) const\n"
    "    tom::Oom::tau(tom::Symbol) const\n"
    "    tom::Oom::tau(tom::Symbol,tom::Symbol)\n"
    "    tom::Oom::tau(tom::Symbol)\n"
    "    tom::Oom::tau(tom::Symbol,tom::Symbol,Eigen::MatrixXd const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Oom_w0__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom const > tempshared1 ;
  std::shared_ptr< tom::Oom const > *smartarg1 = 0 ;
  Eigen::VectorXd *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_w0" "', argument " "1"" of type '" "tom::Oom const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Eigen::VectorXd *) &((tom::Oom const *)arg1)->w0();
  {
    npy_intp dims[2] = {
      result->rows(), result->cols() 
    };
    resultobj = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) const_cast<Eigen::VectorXd *>(result)->data(), 0, NPY_ARRAY_FARRAY_RO, NULL);
    if (!resultobj) SWIG_fail;
    array_setbase(resultobj,encapsulate(result, NULL));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_w0__SWIG_1(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  Eigen::VectorXd *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_w0" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Eigen::VectorXd *) &(arg1)->w0();
  {
    npy_intp dims[2] = {
      result->rows(), result->cols() 
    };
    resultobj = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) const_cast<Eigen::VectorXd *>(result)->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!resultobj) SWIG_fail;
    array_setbase(resultobj,encapsulate(result, NULL));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_w0__SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  Eigen::VectorXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  Eigen::Matrix< double,Eigen::Dynamic,1 > temp2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_w0" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if(array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    temp2 = Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
    arg2 = &temp2;
  }
  (arg1)->w0((Eigen::VectorXd const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_w0(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Oom_w0",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_Oom_w0__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_Oom_w0__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Oom_w0__SWIG_2(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Oom_w0'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Oom::w0() const\n"
    "    tom::Oom::w0()\n"
    "    tom::Oom::w0(Eigen::VectorXd const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Oom_wt__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  Eigen::VectorXd *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_wt" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Eigen::VectorXd *) &(arg1)->wt();
  {
    npy_intp dims[2] = {
      result->rows(), result->cols() 
    };
    resultobj = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) const_cast<Eigen::VectorXd *>(result)->data(), 0, NPY_ARRAY_FARRAY_RO, NULL);
    if (!resultobj) SWIG_fail;
    array_setbase(resultobj,encapsulate(result, NULL));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_wt__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  Eigen::VectorXd *arg2 = 0 ;
  tom::Sequence arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  Eigen::Matrix< double,Eigen::Dynamic,1 > temp2 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_wt" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if(array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    temp2 = Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
    arg2 = &temp2;
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_tom__Sequence,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Oom_wt" "', argument " "3"" of type '" "tom::Sequence""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Oom_wt" "', argument " "3"" of type '" "tom::Sequence""'");
    } else {
      tom::Sequence * temp = reinterpret_cast< tom::Sequence * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->wt((Eigen::VectorXd const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_wt__SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  Eigen::VectorXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  Eigen::Matrix< double,Eigen::Dynamic,1 > temp2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_wt" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if(array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    temp2 = Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
    arg2 = &temp2;
  }
  (arg1)->wt((Eigen::VectorXd const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_wt(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Oom_wt",0,3,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_Oom_wt__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Oom_wt__SWIG_2(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_Oom_wt__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Oom_wt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Oom::wt()\n"
    "    tom::Oom::wt(Eigen::VectorXd const &,tom::Sequence)\n"
    "    tom::Oom::wt(Eigen::VectorXd const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Oom_prediction__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  Eigen::VectorXd *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_prediction" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Eigen::VectorXd *) &(arg1)->prediction();
  {
    npy_intp dims[2] = {
      result->rows(), result->cols() 
    };
    resultobj = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) const_cast<Eigen::VectorXd *>(result)->data(), 0, NPY_ARRAY_FARRAY_RO, NULL);
    if (!resultobj) SWIG_fail;
    array_setbase(resultobj,encapsulate(result, NULL));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_prediction__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  tom::Symbol arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_prediction" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oom_prediction" "', argument " "2"" of type '" "tom::Symbol""'");
  } 
  arg2 = static_cast< tom::Symbol >(val2);
  result = (double)(arg1)->prediction(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_prediction(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Oom_prediction",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_Oom_prediction__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Oom_prediction__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Oom_prediction'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Oom::prediction()\n"
    "    tom::Oom::prediction(tom::Symbol)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Oom_history(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  tom::Sequence arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_history" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_tom__Sequence,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Oom_history" "', argument " "2"" of type '" "tom::Sequence const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Oom_history" "', argument " "2"" of type '" "tom::Sequence const""'");
    } else {
      tom::Sequence * temp = reinterpret_cast< tom::Sequence * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->history(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_reset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Oom_reset",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_reset" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->reset();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_resetCounters(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Oom_resetCounters",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_resetCounters" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->resetCounters();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_update__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  tom::Symbol arg2 ;
  tom::Symbol arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_update" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oom_update" "', argument " "2"" of type '" "tom::Symbol""'");
  } 
  arg2 = static_cast< tom::Symbol >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Oom_update" "', argument " "3"" of type '" "tom::Symbol""'");
  } 
  arg3 = static_cast< tom::Symbol >(val3);
  (arg1)->update(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_update__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  tom::Symbol arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_update" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oom_update" "', argument " "2"" of type '" "tom::Symbol""'");
  } 
  arg2 = static_cast< tom::Symbol >(val2);
  (arg1)->update(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_update(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Oom_update",0,3,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    return _wrap_Oom_update__SWIG_1(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_Oom_update__SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Oom_update'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Oom::update(tom::Symbol,tom::Symbol)\n"
    "    tom::Oom::update(tom::Symbol)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Oom_condition__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  tom::Symbol arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_condition" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oom_condition" "', argument " "2"" of type '" "tom::Symbol""'");
  } 
  arg2 = static_cast< tom::Symbol >(val2);
  (arg1)->condition(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_condition__SWIG_1(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_condition" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->condition();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_condition(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Oom_condition",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_Oom_condition__SWIG_1(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Oom_condition__SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Oom_condition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Oom::condition(tom::Symbol)\n"
    "    tom::Oom::condition()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Oom_generate__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  unsigned long arg2 ;
  tom::Random *arg3 = 0 ;
  tom::Policy *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  tom::Sequence result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_generate" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oom_generate" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_tom__Random,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Oom_generate" "', argument " "3"" of type '" "tom::Random &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Oom_generate" "', argument " "3"" of type '" "tom::Random &""'"); 
  }
  arg3 = reinterpret_cast< tom::Random * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_tom__Policy,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Oom_generate" "', argument " "4"" of type '" "tom::Policy const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Oom_generate" "', argument " "4"" of type '" "tom::Policy const &""'"); 
  }
  arg4 = reinterpret_cast< tom::Policy * >(argp4);
  result = (arg1)->generate(arg2,*arg3,(tom::Policy const &)*arg4);
  resultobj = SWIG_NewPointerObj((new tom::Sequence(static_cast< const tom::Sequence& >(result))), SWIGTYPE_p_tom__Sequence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_generate__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  unsigned long arg2 ;
  tom::Random *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  tom::Sequence result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_generate" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oom_generate" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_tom__Random,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Oom_generate" "', argument " "3"" of type '" "tom::Random &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Oom_generate" "', argument " "3"" of type '" "tom::Random &""'"); 
  }
  arg3 = reinterpret_cast< tom::Random * >(argp3);
  result = (arg1)->generate(arg2,*arg3);
  resultobj = SWIG_NewPointerObj((new tom::Sequence(static_cast< const tom::Sequence& >(result))), SWIGTYPE_p_tom__Sequence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_generate__SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  unsigned long arg2 ;
  tom::Random *arg3 = 0 ;
  double arg4 ;
  tom::Policy *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  tom::Sequence result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_generate" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oom_generate" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_tom__Random,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Oom_generate" "', argument " "3"" of type '" "tom::Random &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Oom_generate" "', argument " "3"" of type '" "tom::Random &""'"); 
  }
  arg3 = reinterpret_cast< tom::Random * >(argp3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Oom_generate" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5, SWIGTYPE_p_tom__Policy,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Oom_generate" "', argument " "5"" of type '" "tom::Policy const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Oom_generate" "', argument " "5"" of type '" "tom::Policy const &""'"); 
  }
  arg5 = reinterpret_cast< tom::Policy * >(argp5);
  result = (arg1)->generate(arg2,*arg3,arg4,(tom::Policy const &)*arg5);
  resultobj = SWIG_NewPointerObj((new tom::Sequence(static_cast< const tom::Sequence& >(result))), SWIGTYPE_p_tom__Sequence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_generate__SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  unsigned long arg2 ;
  tom::Random *arg3 = 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  tom::Sequence result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_generate" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oom_generate" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_tom__Random,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Oom_generate" "', argument " "3"" of type '" "tom::Random &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Oom_generate" "', argument " "3"" of type '" "tom::Random &""'"); 
  }
  arg3 = reinterpret_cast< tom::Random * >(argp3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Oom_generate" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (arg1)->generate(arg2,*arg3,arg4);
  resultobj = SWIG_NewPointerObj((new tom::Sequence(static_cast< const tom::Sequence& >(result))), SWIGTYPE_p_tom__Sequence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_generate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Oom_generate",0,5,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 3) {
    return _wrap_Oom_generate__SWIG_1(self, argc, argv);
  }
  if (argc == 4) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_tom__Policy, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_Oom_generate__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 4) {
    return _wrap_Oom_generate__SWIG_3(self, argc, argv);
  }
  if (argc == 5) {
    return _wrap_Oom_generate__SWIG_2(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Oom_generate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Oom::generate(unsigned long,tom::Random &,tom::Policy const &)\n"
    "    tom::Oom::generate(unsigned long,tom::Random &)\n"
    "    tom::Oom::generate(unsigned long,tom::Random &,double,tom::Policy const &)\n"
    "    tom::Oom::generate(unsigned long,tom::Random &,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Oom_f__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  tom::Symbol arg2 ;
  tom::Symbol arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_f" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oom_f" "', argument " "2"" of type '" "tom::Symbol""'");
  } 
  arg2 = static_cast< tom::Symbol >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Oom_f" "', argument " "3"" of type '" "tom::Symbol""'");
  } 
  arg3 = static_cast< tom::Symbol >(val3);
  result = (double)(arg1)->f(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_f__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  tom::Symbol arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_f" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oom_f" "', argument " "2"" of type '" "tom::Symbol""'");
  } 
  arg2 = static_cast< tom::Symbol >(val2);
  result = (double)(arg1)->f(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_f__SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  tom::Sequence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_f" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Oom_f" "', argument " "2"" of type '" "tom::Sequence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Oom_f" "', argument " "2"" of type '" "tom::Sequence const &""'"); 
  }
  arg2 = reinterpret_cast< tom::Sequence * >(argp2);
  result = (double)(arg1)->f((tom::Sequence const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_f__SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  tom::Sequences *arg2 = 0 ;
  tom::Sequences *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::shared_ptr< tom::Sequences const > tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::shared_ptr< tom::Sequences const > tempshared3 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_f" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Oom_f" "', argument " "2"" of type '" "tom::Sequences const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Oom_f" "', argument " "2"" of type '" "tom::Sequences const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp2);
      delete reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp2);
      arg2 = const_cast< tom::Sequences * >(tempshared2.get());
    } else {
      arg2 = const_cast< tom::Sequences * >(reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp2)->get());
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Oom_f" "', argument " "3"" of type '" "tom::Sequences const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Oom_f" "', argument " "3"" of type '" "tom::Sequences const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp3);
      delete reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp3);
      arg3 = const_cast< tom::Sequences * >(tempshared3.get());
    } else {
      arg3 = const_cast< tom::Sequences * >(reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp3)->get());
    }
  }
  {
    Eigen::MatrixXd* temp = new Eigen::MatrixXd((const Eigen::MatrixXd &)(arg1)->f((tom::Sequences const &)*arg2,(tom::Sequences const &)*arg3));
    npy_intp dims[2] = {
      temp->rows(), temp->cols() 
    };
    resultobj = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) temp->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!resultobj) {
      delete temp; SWIG_fail; 
    }
    array_setbase(resultobj, encapsulate(temp, clean<Eigen::MatrixXd*>));
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_f__SWIG_4(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  tom::Sequences *arg2 = 0 ;
  tom::Sequences *arg3 = 0 ;
  tom::Symbol arg4 ;
  tom::Symbol arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::shared_ptr< tom::Sequences const > tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::shared_ptr< tom::Sequences const > tempshared3 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_f" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Oom_f" "', argument " "2"" of type '" "tom::Sequences const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Oom_f" "', argument " "2"" of type '" "tom::Sequences const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp2);
      delete reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp2);
      arg2 = const_cast< tom::Sequences * >(tempshared2.get());
    } else {
      arg2 = const_cast< tom::Sequences * >(reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp2)->get());
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Oom_f" "', argument " "3"" of type '" "tom::Sequences const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Oom_f" "', argument " "3"" of type '" "tom::Sequences const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp3);
      delete reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp3);
      arg3 = const_cast< tom::Sequences * >(tempshared3.get());
    } else {
      arg3 = const_cast< tom::Sequences * >(reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp3)->get());
    }
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Oom_f" "', argument " "4"" of type '" "tom::Symbol""'");
  } 
  arg4 = static_cast< tom::Symbol >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Oom_f" "', argument " "5"" of type '" "tom::Symbol""'");
  } 
  arg5 = static_cast< tom::Symbol >(val5);
  {
    Eigen::MatrixXd* temp = new Eigen::MatrixXd((const Eigen::MatrixXd &)(arg1)->f((tom::Sequences const &)*arg2,(tom::Sequences const &)*arg3,arg4,arg5));
    npy_intp dims[2] = {
      temp->rows(), temp->cols() 
    };
    resultobj = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) temp->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!resultobj) {
      delete temp; SWIG_fail; 
    }
    array_setbase(resultobj, encapsulate(temp, clean<Eigen::MatrixXd*>));
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_f__SWIG_5(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  tom::Sequences *arg2 = 0 ;
  tom::Sequences *arg3 = 0 ;
  tom::Symbol arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::shared_ptr< tom::Sequences const > tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::shared_ptr< tom::Sequences const > tempshared3 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_f" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Oom_f" "', argument " "2"" of type '" "tom::Sequences const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Oom_f" "', argument " "2"" of type '" "tom::Sequences const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp2);
      delete reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp2);
      arg2 = const_cast< tom::Sequences * >(tempshared2.get());
    } else {
      arg2 = const_cast< tom::Sequences * >(reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp2)->get());
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Oom_f" "', argument " "3"" of type '" "tom::Sequences const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Oom_f" "', argument " "3"" of type '" "tom::Sequences const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp3);
      delete reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp3);
      arg3 = const_cast< tom::Sequences * >(tempshared3.get());
    } else {
      arg3 = const_cast< tom::Sequences * >(reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp3)->get());
    }
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Oom_f" "', argument " "4"" of type '" "tom::Symbol""'");
  } 
  arg4 = static_cast< tom::Symbol >(val4);
  {
    Eigen::MatrixXd* temp = new Eigen::MatrixXd((const Eigen::MatrixXd &)(arg1)->f((tom::Sequences const &)*arg2,(tom::Sequences const &)*arg3,arg4));
    npy_intp dims[2] = {
      temp->rows(), temp->cols() 
    };
    resultobj = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) temp->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!resultobj) {
      delete temp; SWIG_fail; 
    }
    array_setbase(resultobj, encapsulate(temp, clean<Eigen::MatrixXd*>));
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_f(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Oom_f",0,5,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_tom__Sequence, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_Oom_f__SWIG_2(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    return _wrap_Oom_f__SWIG_1(self, argc, argv);
  }
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    {
      int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_Oom_f__SWIG_3(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    return _wrap_Oom_f__SWIG_0(self, argc, argv);
  }
  if (argc == 4) {
    return _wrap_Oom_f__SWIG_5(self, argc, argv);
  }
  if (argc == 5) {
    return _wrap_Oom_f__SWIG_4(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Oom_f'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Oom::f(tom::Symbol,tom::Symbol)\n"
    "    tom::Oom::f(tom::Symbol)\n"
    "    tom::Oom::f(tom::Sequence const &)\n"
    "    tom::Oom::f(tom::Sequences const &,tom::Sequences const &)\n"
    "    tom::Oom::f(tom::Sequences const &,tom::Sequences const &,tom::Symbol,tom::Symbol)\n"
    "    tom::Oom::f(tom::Sequences const &,tom::Sequences const &,tom::Symbol)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Oom_log_f(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  tom::Sequence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_log_f" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Oom_log_f" "', argument " "2"" of type '" "tom::Sequence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Oom_log_f" "', argument " "2"" of type '" "tom::Sequence const &""'"); 
  }
  arg2 = reinterpret_cast< tom::Sequence * >(argp2);
  result = (double)(arg1)->log_f((tom::Sequence const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_ll(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  tom::Sequence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_ll" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Oom_ll" "', argument " "2"" of type '" "tom::Sequence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Oom_ll" "', argument " "2"" of type '" "tom::Sequence const &""'"); 
  }
  arg2 = reinterpret_cast< tom::Sequence * >(argp2);
  result = (double)(arg1)->ll((tom::Sequence const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_averageOneStepPredictionError(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  tom::Oom *arg2 = 0 ;
  tom::Sequence *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::shared_ptr< tom::Oom > tempshared2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"Oom_averageOneStepPredictionError",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_averageOneStepPredictionError" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp2, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Oom_averageOneStepPredictionError" "', argument " "2"" of type '" "tom::Oom &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Oom_averageOneStepPredictionError" "', argument " "2"" of type '" "tom::Oom &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp2);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp2);
      arg2 = const_cast< tom::Oom * >(tempshared2.get());
    } else {
      arg2 = const_cast< tom::Oom * >(reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp2)->get());
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[1], &argp3, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Oom_averageOneStepPredictionError" "', argument " "3"" of type '" "tom::Sequence const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Oom_averageOneStepPredictionError" "', argument " "3"" of type '" "tom::Sequence const &""'"); 
  }
  arg3 = reinterpret_cast< tom::Sequence * >(argp3);
  result = (double)(arg1)->averageOneStepPredictionError(*arg2,(tom::Sequence const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_harvestStates(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  tom::Sequence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Eigen::MatrixXf *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_harvestStates" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Oom_harvestStates" "', argument " "2"" of type '" "tom::Sequence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Oom_harvestStates" "', argument " "2"" of type '" "tom::Sequence const &""'"); 
  }
  arg2 = reinterpret_cast< tom::Sequence * >(argp2);
  result = (Eigen::MatrixXf *)(arg1)->harvestStates((tom::Sequence const &)*arg2);
  {
    npy_intp dims[2] = {
      result->rows(), result->cols() 
    };
    resultobj = PyArray_New(&PyArray_Type, 2, dims, NPY_FLOAT, NULL, (void*) result->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!resultobj) SWIG_fail;
    array_setbase(resultobj, encapsulate(result, clean<Eigen::MatrixXf *>));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_stationaryState(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom const > tempshared1 ;
  std::shared_ptr< tom::Oom const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Oom_stationaryState",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_stationaryState" "', argument " "1"" of type '" "tom::Oom const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    Eigen::VectorXd* temp = new Eigen::VectorXd((const Eigen::VectorXd &)((tom::Oom const *)arg1)->stationaryState());
    npy_intp dims[2] = {
      temp->rows(), temp->cols() 
    };
    resultobj = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) temp->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!resultobj) {
      delete temp; SWIG_fail; 
    }
    array_setbase(resultobj, encapsulate(temp, clean<Eigen::VectorXd*>));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_reverse__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom const > tempshared1 ;
  std::shared_ptr< tom::Oom const > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::shared_ptr< tom::Oom > result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_reverse" "', argument " "1"" of type '" "tom::Oom const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oom_reverse" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((tom::Oom const *)arg1)->reverse(arg2);
  {
    std::shared_ptr<  tom::Oom > *smartresult = result ? new std::shared_ptr<  tom::Oom >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_reverse__SWIG_1(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom const > tempshared1 ;
  std::shared_ptr< tom::Oom const > *smartarg1 = 0 ;
  std::shared_ptr< tom::Oom > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_reverse" "', argument " "1"" of type '" "tom::Oom const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((tom::Oom const *)arg1)->reverse();
  {
    std::shared_ptr<  tom::Oom > *smartresult = result ? new std::shared_ptr<  tom::Oom >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_reverse(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Oom_reverse",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_Oom_reverse__SWIG_1(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Oom_reverse__SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Oom_reverse'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Oom::reverse(int) const\n"
    "    tom::Oom::reverse() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Oom_transform__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  Eigen::RowVectorXd *arg2 = 0 ;
  Eigen::VectorXd *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  Eigen::Matrix< double,1,Eigen::Dynamic > temp2 ;
  Eigen::Matrix< double,Eigen::Dynamic,1 > temp3 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_transform" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if(array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    temp2 = Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
    arg2 = &temp2;
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if(array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    temp3 = Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
    arg3 = &temp3;
  }
  (arg1)->transform((Eigen::RowVectorXd const &)*arg2,(Eigen::VectorXd const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_transform__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  Eigen::RowVectorXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  Eigen::Matrix< double,1,Eigen::Dynamic > temp2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_transform" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if(array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    temp2 = Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
    arg2 = &temp2;
  }
  (arg1)->transform((Eigen::RowVectorXd const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_transform(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Oom_transform",0,3,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    return _wrap_Oom_transform__SWIG_1(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_Oom_transform__SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Oom_transform'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Oom::transform(Eigen::RowVectorXd const &,Eigen::VectorXd const &)\n"
    "    tom::Oom::transform(Eigen::RowVectorXd const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Oom_conjugate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  Eigen::MatrixXd *arg2 = 0 ;
  Eigen::MatrixXd *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > temp2 ;
  Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > temp3 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Oom_conjugate",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_conjugate" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if(array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    temp2 = Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
    arg2 = &temp2;
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if(array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    temp3 = Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
    arg3 = &temp3;
  }
  (arg1)->conjugate((Eigen::MatrixXd const &)*arg2,(Eigen::MatrixXd const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom___eq__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  tom::Oom *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom const > tempshared1 ;
  std::shared_ptr< tom::Oom const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::shared_ptr< tom::Oom const > tempshared2 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom___eq__" "', argument " "1"" of type '" "tom::Oom const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp2, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Oom___eq__" "', argument " "2"" of type '" "tom::Oom const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Oom___eq__" "', argument " "2"" of type '" "tom::Oom const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp2);
      delete reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp2);
      arg2 = const_cast< tom::Oom * >(tempshared2.get());
    } else {
      arg2 = const_cast< tom::Oom * >(reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp2)->get());
    }
  }
  result = (bool)((tom::Oom const *)arg1)->operator ==((tom::Oom const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_toString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom const > tempshared1 ;
  std::shared_ptr< tom::Oom const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!SWIG_Python_UnpackTuple(args,"Oom_toString",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_toString" "', argument " "1"" of type '" "tom::Oom const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((tom::Oom const *)arg1)->toString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_toJSON(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom const > tempshared1 ;
  std::shared_ptr< tom::Oom const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!SWIG_Python_UnpackTuple(args,"Oom_toJSON",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_toJSON" "', argument " "1"" of type '" "tom::Oom const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((tom::Oom const *)arg1)->toJSON();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_fromJSON(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_fromJSON" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Oom_fromJSON" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->fromJSON((char const *)arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_repr(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom const > tempshared1 ;
  std::shared_ptr< tom::Oom const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!SWIG_Python_UnpackTuple(args,"Oom_repr",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_repr" "', argument " "1"" of type '" "tom::Oom const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((tom::Oom const *)arg1)->repr();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_REPRFUNC_CLOSURE(_wrap_Oom_repr)

SWIGINTERN PyObject *_wrap_Oom___lshift__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  std::istream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::istream *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom___lshift__" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Oom___lshift__" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Oom___lshift__" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  arg2 = reinterpret_cast< std::istream * >(argp2);
  result = (std::istream *) &(arg1)->operator <<(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom___rshift__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom const > tempshared1 ;
  std::shared_ptr< tom::Oom const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::ostream *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom___rshift__" "', argument " "1"" of type '" "tom::Oom const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Oom___rshift__" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Oom___rshift__" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  result = (std::ostream *) &((tom::Oom const *)arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_normalizePrediction(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"Oom_normalizePrediction",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_normalizePrediction" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double)(arg1)->normalizePrediction();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_setBack(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"Oom_setBack",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_setBack" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (bool)(arg1)->setBack();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_valid__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_valid__set" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_bool(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oom_valid__set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->valid_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_valid__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"Oom_valid__get",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_valid__get" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (bool) ((arg1)->valid_);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_minPrediction__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_minPrediction__set" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oom_minPrediction__set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->minPrediction_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_minPrediction__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"Oom_minPrediction__get",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_minPrediction__get" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double) ((arg1)->minPrediction_);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_maxPredictionError__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_maxPredictionError__set" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oom_maxPredictionError__set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->maxPredictionError_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_maxPredictionError__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"Oom_maxPredictionError__get",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_maxPredictionError__get" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double) ((arg1)->maxPredictionError_);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_fixPredictionMargin__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_fixPredictionMargin__set" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oom_fixPredictionMargin__set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->fixPredictionMargin_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_fixPredictionMargin__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"Oom_fixPredictionMargin__get",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_fixPredictionMargin__get" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double) ((arg1)->fixPredictionMargin_);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_nSetback__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_nSetback__set" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oom_nSetback__set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->nSetback_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_nSetback__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args,"Oom_nSetback__get",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_nSetback__get" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int) ((arg1)->nSetback_);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_nFixPrediction__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_nFixPrediction__set" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oom_nFixPrediction__set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->nFixPrediction_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_nFixPrediction__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args,"Oom_nFixPrediction__get",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_nFixPrediction__get" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int) ((arg1)->nFixPrediction_);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_nImpossible__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_nImpossible__set" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oom_nImpossible__set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->nImpossible_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_nImpossible__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args,"Oom_nImpossible__get",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_nImpossible__get" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int) ((arg1)->nImpossible_);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_epsilonZero__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_epsilonZero__set" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oom_epsilonZero__set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->epsilonZero_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_epsilonZero__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"Oom_epsilonZero__get",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_epsilonZero__get" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (double) ((arg1)->epsilonZero_);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_outputPrecision__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_outputPrecision__set" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oom_outputPrecision__set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->outputPrecision_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_outputPrecision__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args,"Oom_outputPrecision__get",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_outputPrecision__get" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int) ((arg1)->outputPrecision_);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_maxSetback__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_maxSetback__set" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Oom_maxSetback__set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  tom_Oom_maxSetback__set(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Oom_maxSetback__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args,"Oom_maxSetback__get",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Oom_maxSetback__get" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)tom_Oom_maxSetback__get(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Oom(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = (tom::Oom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom > tempshared1 ;
  std::shared_ptr< tom::Oom > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"delete_Oom",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Oom" "', argument " "1"" of type '" "tom::Oom *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EMStopCondition_maxEMIterations__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::EMStopCondition *arg1 = (tom::EMStopCondition *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__EMStopCondition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EMStopCondition_maxEMIterations__set" "', argument " "1"" of type '" "tom::EMStopCondition *""'"); 
  }
  arg1 = reinterpret_cast< tom::EMStopCondition * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EMStopCondition_maxEMIterations__set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->maxEMIterations_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EMStopCondition_maxEMIterations__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::EMStopCondition *arg1 = (tom::EMStopCondition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args,"EMStopCondition_maxEMIterations__get",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__EMStopCondition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EMStopCondition_maxEMIterations__get" "', argument " "1"" of type '" "tom::EMStopCondition *""'"); 
  }
  arg1 = reinterpret_cast< tom::EMStopCondition * >(argp1);
  result = (int) ((arg1)->maxEMIterations_);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EMStopCondition_minRelativeImprovement__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::EMStopCondition *arg1 = (tom::EMStopCondition *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__EMStopCondition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EMStopCondition_minRelativeImprovement__set" "', argument " "1"" of type '" "tom::EMStopCondition *""'"); 
  }
  arg1 = reinterpret_cast< tom::EMStopCondition * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EMStopCondition_minRelativeImprovement__set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->minRelativeImprovement_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EMStopCondition_minRelativeImprovement__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::EMStopCondition *arg1 = (tom::EMStopCondition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"EMStopCondition_minRelativeImprovement__get",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__EMStopCondition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EMStopCondition_minRelativeImprovement__get" "', argument " "1"" of type '" "tom::EMStopCondition *""'"); 
  }
  arg1 = reinterpret_cast< tom::EMStopCondition * >(argp1);
  result = (double) ((arg1)->minRelativeImprovement_);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EMStopCondition_previousLog2Likelihood__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::EMStopCondition *arg1 = (tom::EMStopCondition *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__EMStopCondition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EMStopCondition_previousLog2Likelihood__set" "', argument " "1"" of type '" "tom::EMStopCondition *""'"); 
  }
  arg1 = reinterpret_cast< tom::EMStopCondition * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EMStopCondition_previousLog2Likelihood__set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->previousLog2Likelihood_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EMStopCondition_previousLog2Likelihood__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::EMStopCondition *arg1 = (tom::EMStopCondition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"EMStopCondition_previousLog2Likelihood__get",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__EMStopCondition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EMStopCondition_previousLog2Likelihood__get" "', argument " "1"" of type '" "tom::EMStopCondition *""'"); 
  }
  arg1 = reinterpret_cast< tom::EMStopCondition * >(argp1);
  result = (double) ((arg1)->previousLog2Likelihood_);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_EMStopCondition__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  int arg2 ;
  double arg3 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  tom::EMStopCondition *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  arg1 = self;
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_EMStopCondition" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_EMStopCondition" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  if ( self->ob_type != ((SwigPyClientData*) (SWIGTYPE_p_tom__EMStopCondition)->clientdata)->pytype ) {
    /* subclassed */
    result = (tom::EMStopCondition *)new SwigDirector_EMStopCondition(arg1,arg2,arg3); 
  } else {
    result = (tom::EMStopCondition *)new tom::EMStopCondition(arg2,arg3); 
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tom__EMStopCondition, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_EMStopCondition__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  tom::EMStopCondition *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  arg1 = self;
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_EMStopCondition" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if ( self->ob_type != ((SwigPyClientData*) (SWIGTYPE_p_tom__EMStopCondition)->clientdata)->pytype ) {
    /* subclassed */
    result = (tom::EMStopCondition *)new SwigDirector_EMStopCondition(arg1,arg2); 
  } else {
    result = (tom::EMStopCondition *)new tom::EMStopCondition(arg2); 
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tom__EMStopCondition, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_EMStopCondition__SWIG_2(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  tom::EMStopCondition *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  arg1 = self;
  if ( self->ob_type != ((SwigPyClientData*) (SWIGTYPE_p_tom__EMStopCondition)->clientdata)->pytype ) {
    /* subclassed */
    result = (tom::EMStopCondition *)new SwigDirector_EMStopCondition(arg1); 
  } else {
    result = (tom::EMStopCondition *)new tom::EMStopCondition(); 
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tom__EMStopCondition, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_EMStopCondition(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_EMStopCondition",0,3,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_new_EMStopCondition__SWIG_2(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_new_EMStopCondition__SWIG_1(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_new_EMStopCondition__SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_EMStopCondition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::EMStopCondition::EMStopCondition(int,double)\n"
    "    tom::EMStopCondition::EMStopCondition(int)\n"
    "    tom::EMStopCondition::EMStopCondition(PyObject *)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_EMStopCondition___call__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::EMStopCondition *arg1 = (tom::EMStopCondition *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"EMStopCondition___call__",2,2,swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__EMStopCondition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EMStopCondition___call__" "', argument " "1"" of type '" "tom::EMStopCondition *""'"); 
  }
  arg1 = reinterpret_cast< tom::EMStopCondition * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EMStopCondition___call__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EMStopCondition___call__" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==self));
  try {
    if (upcall) {
      result = (bool)(arg1)->tom::EMStopCondition::operator ()(arg2,arg3);
    } else {
      result = (bool)(arg1)->operator ()(arg2,arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_TERNARYCALLFUNC_CLOSURE(_wrap_EMStopCondition___call__)

SWIGINTERN PyObject *_wrap_delete_EMStopCondition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::EMStopCondition *arg1 = (tom::EMStopCondition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"delete_EMStopCondition",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__EMStopCondition, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EMStopCondition" "', argument " "1"" of type '" "tom::EMStopCondition *""'"); 
  }
  arg1 = reinterpret_cast< tom::EMStopCondition * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_EMStopCondition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::EMStopCondition *arg1 = (tom::EMStopCondition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_tom__EMStopCondition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_EMStopCondition" "', argument " "1"" of type '" "tom::EMStopCondition *""'"); 
  }
  arg1 = reinterpret_cast< tom::EMStopCondition * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_Hmm__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  tom::Random *arg5 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  tom::Hmm *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Hmm" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Hmm" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Hmm" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Hmm" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5, SWIGTYPE_p_tom__Random,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_Hmm" "', argument " "5"" of type '" "tom::Random const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Hmm" "', argument " "5"" of type '" "tom::Random const &""'"); 
  }
  arg5 = reinterpret_cast< tom::Random * >(argp5);
  result = (tom::Hmm *)new tom::Hmm(arg1,arg2,arg3,arg4,(tom::Random const &)*arg5);
  {
    std::shared_ptr<  tom::Hmm > *smartresult = result ? new std::shared_ptr<  tom::Hmm >(result SWIG_NO_NULL_DELETER_SWIG_BUILTIN_INIT) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, SWIG_BUILTIN_INIT | SWIG_POINTER_OWN);
  }
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Hmm__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  tom::Hmm *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Hmm" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Hmm" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Hmm" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Hmm" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (tom::Hmm *)new tom::Hmm(arg1,arg2,arg3,arg4);
  {
    std::shared_ptr<  tom::Hmm > *smartresult = result ? new std::shared_ptr<  tom::Hmm >(result SWIG_NO_NULL_DELETER_SWIG_BUILTIN_INIT) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, SWIG_BUILTIN_INIT | SWIG_POINTER_OWN);
  }
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Hmm__SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  tom::Hmm *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Hmm" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Hmm" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Hmm" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (tom::Hmm *)new tom::Hmm(arg1,arg2,arg3);
  {
    std::shared_ptr<  tom::Hmm > *smartresult = result ? new std::shared_ptr<  tom::Hmm >(result SWIG_NO_NULL_DELETER_SWIG_BUILTIN_INIT) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, SWIG_BUILTIN_INIT | SWIG_POINTER_OWN);
  }
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Hmm__SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  tom::Hmm *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Hmm" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Hmm" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (tom::Hmm *)new tom::Hmm(arg1,arg2);
  {
    std::shared_ptr<  tom::Hmm > *smartresult = result ? new std::shared_ptr<  tom::Hmm >(result SWIG_NO_NULL_DELETER_SWIG_BUILTIN_INIT) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, SWIG_BUILTIN_INIT | SWIG_POINTER_OWN);
  }
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Hmm(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_Hmm",0,5,argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    return _wrap_new_Hmm__SWIG_3(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_new_Hmm__SWIG_2(self, argc, argv);
  }
  if (argc == 4) {
    return _wrap_new_Hmm__SWIG_1(self, argc, argv);
  }
  if (argc == 5) {
    return _wrap_new_Hmm__SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Hmm'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Hmm::Hmm(int,int,int,double,tom::Random const &)\n"
    "    tom::Hmm::Hmm(int,int,int,double)\n"
    "    tom::Hmm::Hmm(int,int,int)\n"
    "    tom::Hmm::Hmm(int,int)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_Hmm_randomize__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Hmm *arg1 = (tom::Hmm *) 0 ;
  double arg2 ;
  tom::Random *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Hmm > tempshared1 ;
  std::shared_ptr< tom::Hmm > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hmm_randomize" "', argument " "1"" of type '" "tom::Hmm *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Hmm_randomize" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_tom__Random,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Hmm_randomize" "', argument " "3"" of type '" "tom::Random const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Hmm_randomize" "', argument " "3"" of type '" "tom::Random const &""'"); 
  }
  arg3 = reinterpret_cast< tom::Random * >(argp3);
  (arg1)->randomize(arg2,(tom::Random const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hmm_randomize__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Hmm *arg1 = (tom::Hmm *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Hmm > tempshared1 ;
  std::shared_ptr< tom::Hmm > *smartarg1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hmm_randomize" "', argument " "1"" of type '" "tom::Hmm *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Hmm_randomize" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->randomize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hmm_randomize__SWIG_2(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  tom::Hmm *arg1 = (tom::Hmm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Hmm > tempshared1 ;
  std::shared_ptr< tom::Hmm > *smartarg1 = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hmm_randomize" "', argument " "1"" of type '" "tom::Hmm *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->randomize();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hmm_randomize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Hmm_randomize",0,3,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_Hmm_randomize__SWIG_2(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Hmm_randomize__SWIG_1(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_Hmm_randomize__SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Hmm_randomize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Hmm::randomize(double,tom::Random const &)\n"
    "    tom::Hmm::randomize(double)\n"
    "    tom::Hmm::randomize()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Hmm_normalize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Hmm *arg1 = (tom::Hmm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Hmm > tempshared1 ;
  std::shared_ptr< tom::Hmm > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"Hmm_normalize",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hmm_normalize" "', argument " "1"" of type '" "tom::Hmm *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (bool)(arg1)->normalize();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hmm_init(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Hmm *arg1 = (tom::Hmm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Hmm > tempshared1 ;
  std::shared_ptr< tom::Hmm > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"Hmm_init",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hmm_init" "', argument " "1"" of type '" "tom::Hmm *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->init();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hmm_trainEM__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Hmm *arg1 = (tom::Hmm *) 0 ;
  tom::Sequence *arg2 = 0 ;
  tom::EMStopCondition *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Hmm > tempshared1 ;
  std::shared_ptr< tom::Hmm > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hmm_trainEM" "', argument " "1"" of type '" "tom::Hmm *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hmm_trainEM" "', argument " "2"" of type '" "tom::Sequence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Hmm_trainEM" "', argument " "2"" of type '" "tom::Sequence const &""'"); 
  }
  arg2 = reinterpret_cast< tom::Sequence * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_tom__EMStopCondition,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Hmm_trainEM" "', argument " "3"" of type '" "tom::EMStopCondition const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Hmm_trainEM" "', argument " "3"" of type '" "tom::EMStopCondition const &""'"); 
  }
  arg3 = reinterpret_cast< tom::EMStopCondition * >(argp3);
  result = (double)(arg1)->trainEM((tom::Sequence const &)*arg2,(tom::EMStopCondition const &)*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hmm_trainEM__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Hmm *arg1 = (tom::Hmm *) 0 ;
  tom::Sequence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Hmm > tempshared1 ;
  std::shared_ptr< tom::Hmm > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hmm_trainEM" "', argument " "1"" of type '" "tom::Hmm *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hmm_trainEM" "', argument " "2"" of type '" "tom::Sequence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Hmm_trainEM" "', argument " "2"" of type '" "tom::Sequence const &""'"); 
  }
  arg2 = reinterpret_cast< tom::Sequence * >(argp2);
  result = (double)(arg1)->trainEM((tom::Sequence const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hmm_trainEM(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Hmm_trainEM",0,3,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    return _wrap_Hmm_trainEM__SWIG_1(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_Hmm_trainEM__SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Hmm_trainEM'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Hmm::trainEM(tom::Sequence const &,tom::EMStopCondition const &)\n"
    "    tom::Hmm::trainEM(tom::Sequence const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Hmm_nStates(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Hmm *arg1 = (tom::Hmm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Hmm const > tempshared1 ;
  std::shared_ptr< tom::Hmm const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args,"Hmm_nStates",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hmm_nStates" "', argument " "1"" of type '" "tom::Hmm const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const tom::Hmm > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)((tom::Hmm const *)arg1)->nStates();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hmm_nObservations(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Hmm *arg1 = (tom::Hmm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Hmm const > tempshared1 ;
  std::shared_ptr< tom::Hmm const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args,"Hmm_nObservations",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hmm_nObservations" "', argument " "1"" of type '" "tom::Hmm const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const tom::Hmm > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)((tom::Hmm const *)arg1)->nObservations();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hmm_nInputs(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Hmm *arg1 = (tom::Hmm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Hmm const > tempshared1 ;
  std::shared_ptr< tom::Hmm const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args,"Hmm_nInputs",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hmm_nInputs" "', argument " "1"" of type '" "tom::Hmm const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const tom::Hmm > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)((tom::Hmm const *)arg1)->nInputs();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hmm_setSize__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Hmm *arg1 = (tom::Hmm *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Hmm > tempshared1 ;
  std::shared_ptr< tom::Hmm > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hmm_setSize" "', argument " "1"" of type '" "tom::Hmm *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Hmm_setSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Hmm_setSize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Hmm_setSize" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Hmm_setSize" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  (arg1)->setSize(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hmm_setSize__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Hmm *arg1 = (tom::Hmm *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Hmm > tempshared1 ;
  std::shared_ptr< tom::Hmm > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hmm_setSize" "', argument " "1"" of type '" "tom::Hmm *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Hmm_setSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Hmm_setSize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Hmm_setSize" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  (arg1)->setSize(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hmm_setSize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Hmm_setSize",0,5,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 4) {
    return _wrap_Hmm_setSize__SWIG_1(self, argc, argv);
  }
  if (argc == 5) {
    return _wrap_Hmm_setSize__SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Hmm_setSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Hmm::setSize(int,int,int,bool)\n"
    "    tom::Hmm::setSize(int,int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Hmm_pi__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  tom::Hmm *arg1 = (tom::Hmm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Hmm > tempshared1 ;
  std::shared_ptr< tom::Hmm > *smartarg1 = 0 ;
  Eigen::VectorXd *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hmm_pi" "', argument " "1"" of type '" "tom::Hmm *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Eigen::VectorXd *) &(arg1)->pi();
  {
    npy_intp dims[2] = {
      result->rows(), result->cols() 
    };
    resultobj = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) const_cast<Eigen::VectorXd *>(result)->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!resultobj) SWIG_fail;
    array_setbase(resultobj,encapsulate(result, NULL));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hmm_pi__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Hmm *arg1 = (tom::Hmm *) 0 ;
  Eigen::VectorXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Hmm > tempshared1 ;
  std::shared_ptr< tom::Hmm > *smartarg1 = 0 ;
  Eigen::Matrix< double,Eigen::Dynamic,1 > temp2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hmm_pi" "', argument " "1"" of type '" "tom::Hmm *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if(array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    temp2 = Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
    arg2 = &temp2;
  }
  (arg1)->pi((Eigen::VectorXd const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hmm_pi(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Hmm_pi",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_Hmm_pi__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_Hmm_pi__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Hmm_pi'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Hmm::pi()\n"
    "    tom::Hmm::pi(Eigen::VectorXd const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Hmm_T__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Hmm *arg1 = (tom::Hmm *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Hmm > tempshared1 ;
  std::shared_ptr< tom::Hmm > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Eigen::MatrixXd *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hmm_T" "', argument " "1"" of type '" "tom::Hmm *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Hmm_T" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (Eigen::MatrixXd *) &(arg1)->T(arg2);
  {
    npy_intp dims[2] = {
      result->rows(), result->cols() 
    };
    resultobj = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) const_cast<Eigen::MatrixXd *>(result)->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!resultobj) SWIG_fail;
    array_setbase(resultobj,encapsulate(result, NULL));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hmm_T__SWIG_1(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  tom::Hmm *arg1 = (tom::Hmm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Hmm > tempshared1 ;
  std::shared_ptr< tom::Hmm > *smartarg1 = 0 ;
  Eigen::MatrixXd *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hmm_T" "', argument " "1"" of type '" "tom::Hmm *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (Eigen::MatrixXd *) &(arg1)->T();
  {
    npy_intp dims[2] = {
      result->rows(), result->cols() 
    };
    resultobj = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) const_cast<Eigen::MatrixXd *>(result)->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!resultobj) SWIG_fail;
    array_setbase(resultobj,encapsulate(result, NULL));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hmm_T__SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Hmm *arg1 = (tom::Hmm *) 0 ;
  Eigen::MatrixXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Hmm > tempshared1 ;
  std::shared_ptr< tom::Hmm > *smartarg1 = 0 ;
  Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > temp2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hmm_T" "', argument " "1"" of type '" "tom::Hmm *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[1], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if(array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    temp2 = Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
    arg2 = &temp2;
  }
  (arg1)->T((Eigen::MatrixXd const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hmm_T__SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Hmm *arg1 = (tom::Hmm *) 0 ;
  int arg2 ;
  Eigen::MatrixXd *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Hmm > tempshared1 ;
  std::shared_ptr< tom::Hmm > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > temp3 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hmm_T" "', argument " "1"" of type '" "tom::Hmm *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Hmm_T" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if(array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    temp3 = Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
    arg3 = &temp3;
  }
  (arg1)->T(arg2,(Eigen::MatrixXd const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hmm_T(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Hmm_T",0,3,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_Hmm_T__SWIG_1(self, argc, argv);
  }
  if (argc == 2) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_Hmm_T__SWIG_0(self, argc, argv);
  }
check_2:
  
  if (argc == 2) {
    return _wrap_Hmm_T__SWIG_2(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_Hmm_T__SWIG_3(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Hmm_T'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Hmm::T(int)\n"
    "    tom::Hmm::T()\n"
    "    tom::Hmm::T(Eigen::MatrixXd const &)\n"
    "    tom::Hmm::T(int,Eigen::MatrixXd const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Hmm_E__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Hmm *arg1 = (tom::Hmm *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Hmm > tempshared1 ;
  std::shared_ptr< tom::Hmm > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  Eigen::VectorXd *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hmm_E" "', argument " "1"" of type '" "tom::Hmm *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Hmm_E" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Hmm_E" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (Eigen::VectorXd *) &(arg1)->E(arg2,arg3);
  {
    npy_intp dims[2] = {
      result->rows(), result->cols() 
    };
    resultobj = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) const_cast<Eigen::VectorXd *>(result)->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!resultobj) SWIG_fail;
    array_setbase(resultobj,encapsulate(result, NULL));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hmm_E__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Hmm *arg1 = (tom::Hmm *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Hmm > tempshared1 ;
  std::shared_ptr< tom::Hmm > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Eigen::VectorXd *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hmm_E" "', argument " "1"" of type '" "tom::Hmm *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Hmm_E" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (Eigen::VectorXd *) &(arg1)->E(arg2);
  {
    npy_intp dims[2] = {
      result->rows(), result->cols() 
    };
    resultobj = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) const_cast<Eigen::VectorXd *>(result)->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!resultobj) SWIG_fail;
    array_setbase(resultobj,encapsulate(result, NULL));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hmm_E__SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Hmm *arg1 = (tom::Hmm *) 0 ;
  int arg2 ;
  int arg3 ;
  Eigen::VectorXd *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Hmm > tempshared1 ;
  std::shared_ptr< tom::Hmm > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  Eigen::Matrix< double,Eigen::Dynamic,1 > temp4 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hmm_E" "', argument " "1"" of type '" "tom::Hmm *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Hmm_E" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Hmm_E" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[3], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if(array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    temp4 = Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
    arg4 = &temp4;
  }
  (arg1)->E(arg2,arg3,(Eigen::VectorXd const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hmm_E__SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Hmm *arg1 = (tom::Hmm *) 0 ;
  int arg2 ;
  Eigen::VectorXd *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Hmm > tempshared1 ;
  std::shared_ptr< tom::Hmm > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Eigen::Matrix< double,Eigen::Dynamic,1 > temp3 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hmm_E" "', argument " "1"" of type '" "tom::Hmm *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Hmm_E" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[2], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if(array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    temp3 = Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
    arg3 = &temp3;
  }
  (arg1)->E(arg2,(Eigen::VectorXd const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hmm_E(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Hmm_E",0,4,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    return _wrap_Hmm_E__SWIG_1(self, argc, argv);
  }
  if (argc == 3) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_1_t, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_Hmm_E__SWIG_3(self, argc, argv);
  }
check_2:
  
  if (argc == 3) {
    return _wrap_Hmm_E__SWIG_0(self, argc, argv);
  }
  if (argc == 4) {
    return _wrap_Hmm_E__SWIG_2(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Hmm_E'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Hmm::E(int,int)\n"
    "    tom::Hmm::E(int)\n"
    "    tom::Hmm::E(int,int,Eigen::VectorXd const &)\n"
    "    tom::Hmm::E(int,Eigen::VectorXd const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Hmm_Theta__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Hmm *arg1 = (tom::Hmm *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Hmm > tempshared1 ;
  std::shared_ptr< tom::Hmm > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  Eigen::MatrixXd *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hmm_Theta" "', argument " "1"" of type '" "tom::Hmm *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Hmm_Theta" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Hmm_Theta" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (Eigen::MatrixXd *) &(arg1)->Theta(arg2,arg3);
  {
    npy_intp dims[2] = {
      result->rows(), result->cols() 
    };
    resultobj = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) const_cast<Eigen::MatrixXd *>(result)->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!resultobj) SWIG_fail;
    array_setbase(resultobj,encapsulate(result, NULL));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hmm_Theta__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Hmm *arg1 = (tom::Hmm *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Hmm > tempshared1 ;
  std::shared_ptr< tom::Hmm > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Eigen::MatrixXd *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hmm_Theta" "', argument " "1"" of type '" "tom::Hmm *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Hmm_Theta" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (Eigen::MatrixXd *) &(arg1)->Theta(arg2);
  {
    npy_intp dims[2] = {
      result->rows(), result->cols() 
    };
    resultobj = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) const_cast<Eigen::MatrixXd *>(result)->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!resultobj) SWIG_fail;
    array_setbase(resultobj,encapsulate(result, NULL));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hmm_Theta(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Hmm_Theta",0,3,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    return _wrap_Hmm_Theta__SWIG_1(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_Hmm_Theta__SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Hmm_Theta'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Hmm::Theta(int,int)\n"
    "    tom::Hmm::Theta(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Hmm_toJSON(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Hmm *arg1 = (tom::Hmm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Hmm const > tempshared1 ;
  std::shared_ptr< tom::Hmm const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!SWIG_Python_UnpackTuple(args,"Hmm_toJSON",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hmm_toJSON" "', argument " "1"" of type '" "tom::Hmm const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const tom::Hmm > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((tom::Hmm const *)arg1)->toJSON();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hmm_fromJSON(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Hmm *arg1 = (tom::Hmm *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Hmm > tempshared1 ;
  std::shared_ptr< tom::Hmm > *smartarg1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hmm_fromJSON" "', argument " "1"" of type '" "tom::Hmm *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Hmm_fromJSON" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->fromJSON((char const *)arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hmm_repr(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Hmm *arg1 = (tom::Hmm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Hmm const > tempshared1 ;
  std::shared_ptr< tom::Hmm const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!SWIG_Python_UnpackTuple(args,"Hmm_repr",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hmm_repr" "', argument " "1"" of type '" "tom::Hmm const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const tom::Hmm > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((tom::Hmm const *)arg1)->repr();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_REPRFUNC_CLOSURE(_wrap_Hmm_repr)

SWIGINTERN PyObject *_wrap_delete_Hmm(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Hmm *arg1 = (tom::Hmm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Hmm > tempshared1 ;
  std::shared_ptr< tom::Hmm > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"delete_Hmm",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Hmm_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Hmm" "', argument " "1"" of type '" "tom::Hmm *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  tom::Hmm > * >(argp1);
      arg1 = const_cast< tom::Hmm * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_VALID_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable VALID is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_VALID_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(stree::VALID));
  return pyobj;
}


SWIGINTERN int Swig_var_NODE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable NODE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_NODE_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(stree::NODE));
  return pyobj;
}


SWIGINTERN int Swig_var_COLOR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable COLOR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_COLOR_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(stree::COLOR));
  return pyobj;
}


SWIGINTERN int Swig_var_INDEX_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable INDEX is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_INDEX_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(stree::INDEX));
  return pyobj;
}


SWIGINTERN int Swig_var_ROOT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ROOT is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ROOT_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(stree::ROOT));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_NidxVector_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (!SWIG_Python_UnpackTuple(args,"NidxVector_iterator",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector_iterator" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (swig::SwigPyIterator *)std_vector_Sl_stree_Nidx_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_UNARYFUNC_CLOSURE(_wrap_NidxVector_iterator)

SWIGINTERN PyObject *_wrap_NidxVector___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > const > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"NidxVector___nonzero__",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector___nonzero__" "', argument " "1"" of type '" "std::vector< stree::Nidx > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (bool)std_vector_Sl_stree_Nidx_Sg____nonzero__((std::vector< unsigned int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_INQUIRY_CLOSURE(_wrap_NidxVector___nonzero__)

SWIGINTERN PyObject *_wrap_NidxVector___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > const > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"NidxVector___bool__",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector___bool__" "', argument " "1"" of type '" "std::vector< stree::Nidx > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (bool)std_vector_Sl_stree_Nidx_Sg____bool__((std::vector< unsigned int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > const > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< unsigned int >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args,"NidxVector___len__",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector___len__" "', argument " "1"" of type '" "std::vector< stree::Nidx > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = std_vector_Sl_stree_Nidx_Sg____len__((std::vector< unsigned int > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_LENFUNC_CLOSURE(_wrap_NidxVector___len__)

SWIGINTERN PyObject *_wrap_NidxVector_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< unsigned int >::value_type result;
  
  if (!SWIG_Python_UnpackTuple(args,"NidxVector_pop",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector_pop" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  try {
    result = (std::vector< unsigned int >::value_type)std_vector_Sl_stree_Nidx_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  std::vector< unsigned int >::difference_type arg2 ;
  std::vector< unsigned int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< unsigned int,std::allocator< unsigned int > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"NidxVector___getslice__",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector___getslice__" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NidxVector___getslice__" "', argument " "2"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NidxVector___getslice__" "', argument " "3"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned int >::difference_type >(val3);
  try {
    result = (std::vector< unsigned int,std::allocator< unsigned int > > *)std_vector_Sl_stree_Nidx_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  {
    std::shared_ptr<  std::vector<stree::Nidx> > *smartresult = result ? new std::shared_ptr<  std::vector<stree::Nidx> >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, SWIG_POINTER_OWN | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector___setslice____SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  std::vector< unsigned int >::difference_type arg2 ;
  std::vector< unsigned int >::difference_type arg3 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector___setslice__" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NidxVector___setslice__" "', argument " "2"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NidxVector___setslice__" "', argument " "3"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned int >::difference_type >(val3);
  {
    std::vector<unsigned int,std::allocator< unsigned int > > *ptr = (std::vector<unsigned int,std::allocator< unsigned int > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "NidxVector___setslice__" "', argument " "4"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NidxVector___setslice__" "', argument " "4"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_stree_Nidx_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< unsigned int,std::allocator< unsigned int > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector___setslice____SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  std::vector< unsigned int >::difference_type arg2 ;
  std::vector< unsigned int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector___setslice__" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NidxVector___setslice__" "', argument " "2"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NidxVector___setslice__" "', argument " "3"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned int >::difference_type >(val3);
  try {
    std_vector_Sl_stree_Nidx_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"NidxVector___setslice__",0,4,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 3) {
    return _wrap_NidxVector___setslice____SWIG_1(self, argc, argv);
  }
  if (argc == 4) {
    return _wrap_NidxVector___setslice____SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NidxVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< stree::Nidx >::__setslice__(std::vector< unsigned int >::difference_type,std::vector< unsigned int >::difference_type,std::vector< unsigned int,std::allocator< unsigned int > > const &)\n"
    "    std::vector< stree::Nidx >::__setslice__(std::vector< unsigned int >::difference_type,std::vector< unsigned int >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NidxVector___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  std::vector< unsigned int >::difference_type arg2 ;
  std::vector< unsigned int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"NidxVector___delslice__",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector___delslice__" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NidxVector___delslice__" "', argument " "2"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NidxVector___delslice__" "', argument " "3"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned int >::difference_type >(val3);
  try {
    std_vector_Sl_stree_Nidx_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector___delitem____SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  std::vector< unsigned int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector___delitem__" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NidxVector___delitem__" "', argument " "2"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::difference_type >(val2);
  try {
    std_vector_Sl_stree_Nidx_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector___getitem____SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector___getitem__" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NidxVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< unsigned int,std::allocator< unsigned int > > *)std_vector_Sl_stree_Nidx_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  {
    std::shared_ptr<  std::vector<stree::Nidx> > *smartresult = result ? new std::shared_ptr<  std::vector<stree::Nidx> >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, SWIG_POINTER_OWN | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector___setitem____SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector___setitem__" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NidxVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector<unsigned int,std::allocator< unsigned int > > *ptr = (std::vector<unsigned int,std::allocator< unsigned int > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NidxVector___setitem__" "', argument " "3"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NidxVector___setitem__" "', argument " "3"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_stree_Nidx_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< unsigned int,std::allocator< unsigned int > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector___setitem____SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector___setitem__" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NidxVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_stree_Nidx_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector___delitem____SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector___delitem__" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NidxVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_stree_Nidx_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"NidxVector___delitem__",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_NidxVector___delitem____SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    return _wrap_NidxVector___delitem____SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NidxVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< stree::Nidx >::__delitem__(std::vector< unsigned int >::difference_type)\n"
    "    std::vector< stree::Nidx >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NidxVector___getitem____SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  std::vector< unsigned int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > const > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > const > *smartarg1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned int >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector___getitem__" "', argument " "1"" of type '" "std::vector< stree::Nidx > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NidxVector___getitem__" "', argument " "2"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::difference_type >(val2);
  try {
    result = (std::vector< unsigned int >::value_type *) &std_vector_Sl_stree_Nidx_Sg____getitem____SWIG_1((std::vector< unsigned int > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"NidxVector___getitem__",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_1;
    return _wrap_NidxVector___getitem____SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    return _wrap_NidxVector___getitem____SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NidxVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< stree::Nidx >::__getitem__(PySliceObject *)\n"
    "    std::vector< stree::Nidx >::__getitem__(std::vector< unsigned int >::difference_type) const\n");
  return 0;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_NidxVector___getitem__)

SWIGINTERN PyObject *_wrap_NidxVector___setitem____SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  std::vector< unsigned int >::difference_type arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned int >::value_type temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector___setitem__" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NidxVector___setitem__" "', argument " "2"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NidxVector___setitem__" "', argument " "3"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned int >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_stree_Nidx_Sg____setitem____SWIG_2(arg1,arg2,(unsigned int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector___setitem____SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  std::vector< unsigned int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector___setitem__" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NidxVector___setitem__" "', argument " "2"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::difference_type >(val2);
  try {
    std_vector_Sl_stree_Nidx_Sg____setitem____SWIG_3(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"NidxVector___setitem__",0,3,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_1;
    return _wrap_NidxVector___setitem____SWIG_1(self, argc, argv);
  }
check_1:
  
  if (argc == 2) {
    return _wrap_NidxVector___setitem____SWIG_3(self, argc, argv);
  }
  if (argc == 3) {
    int _v = 0;
    {
      {
        _v = PySlice_Check(argv[1]);
      }
    }
    if (!_v) goto check_3;
    {
      int res = swig::asptr(argv[2], (std::vector<unsigned int,std::allocator< unsigned int > >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    return _wrap_NidxVector___setitem____SWIG_0(self, argc, argv);
  }
check_3:
  
  if (argc == 3) {
    return _wrap_NidxVector___setitem____SWIG_2(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NidxVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< stree::Nidx >::__setitem__(PySliceObject *,std::vector< unsigned int,std::allocator< unsigned int > > const &)\n"
    "    std::vector< stree::Nidx >::__setitem__(PySliceObject *)\n"
    "    std::vector< stree::Nidx >::__setitem__(std::vector< unsigned int >::difference_type,std::vector< unsigned int >::value_type const &)\n"
    "    std::vector< stree::Nidx >::__setitem__(std::vector< unsigned int >::difference_type)\n");
  return 0;
}


SWIGPY_OBJOBJARGPROC_CLOSURE(_wrap_NidxVector___setitem__)

SWIGINTERN PyObject *_wrap_NidxVector_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  std::vector< unsigned int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  std::vector< unsigned int >::value_type temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector_append" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NidxVector_append" "', argument " "2"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< unsigned int >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_stree_Nidx_Sg__append(arg1,(unsigned int const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_NidxVector__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< stree::Nidx > *)new std::vector< stree::Nidx >();
  {
    std::shared_ptr<  std::vector<stree::Nidx> > *smartresult = result ? new std::shared_ptr<  std::vector<stree::Nidx> >(result SWIG_NO_NULL_DELETER_SWIG_BUILTIN_INIT) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, SWIG_BUILTIN_INIT | SWIG_POINTER_OWN);
  }
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_NidxVector__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< stree::Nidx > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector<unsigned int,std::allocator< unsigned int > > *ptr = (std::vector<unsigned int,std::allocator< unsigned int > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NidxVector" "', argument " "1"" of type '" "std::vector< stree::Nidx > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NidxVector" "', argument " "1"" of type '" "std::vector< stree::Nidx > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< stree::Nidx > *)new std::vector< stree::Nidx >((std::vector< stree::Nidx > const &)*arg1);
  {
    std::shared_ptr<  std::vector<stree::Nidx> > *smartresult = result ? new std::shared_ptr<  std::vector<stree::Nidx> >(result SWIG_NO_NULL_DELETER_SWIG_BUILTIN_INIT) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, SWIG_BUILTIN_INIT | SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN PyObject *_wrap_NidxVector_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > const > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"NidxVector_empty",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector_empty" "', argument " "1"" of type '" "std::vector< stree::Nidx > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (bool)((std::vector< stree::Nidx > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > const > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< unsigned int >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args,"NidxVector_size",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector_size" "', argument " "1"" of type '" "std::vector< stree::Nidx > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((std::vector< stree::Nidx > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"NidxVector_clear",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector_clear" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  std::vector< stree::Nidx > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared2 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector_swap" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp2, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NidxVector_swap" "', argument " "2"" of type '" "std::vector< stree::Nidx > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NidxVector_swap" "', argument " "2"" of type '" "std::vector< stree::Nidx > &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp2);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp2);
      arg2 = const_cast< std::vector< stree::Nidx > * >(tempshared2.get());
    } else {
      arg2 = const_cast< std::vector< stree::Nidx > * >(reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp2)->get());
    }
  }
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > const > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< unsigned int > > result;
  
  if (!SWIG_Python_UnpackTuple(args,"NidxVector_get_allocator",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector_get_allocator" "', argument " "1"" of type '" "std::vector< stree::Nidx > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((std::vector< stree::Nidx > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< unsigned int >::allocator_type(static_cast< const std::vector< unsigned int >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_unsigned_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::vector< unsigned int >::iterator > result;
  
  if (!SWIG_Python_UnpackTuple(args,"NidxVector_begin",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector_begin" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::vector< unsigned int >::iterator > result;
  
  if (!SWIG_Python_UnpackTuple(args,"NidxVector_end",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector_end" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::vector< unsigned int >::reverse_iterator > result;
  
  if (!SWIG_Python_UnpackTuple(args,"NidxVector_rbegin",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector_rbegin" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::vector< unsigned int >::reverse_iterator > result;
  
  if (!SWIG_Python_UnpackTuple(args,"NidxVector_rend",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector_rend" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_NidxVector__SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< unsigned int >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< stree::Nidx > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_NidxVector" "', argument " "1"" of type '" "std::vector< unsigned int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< unsigned int >::size_type >(val1);
  result = (std::vector< stree::Nidx > *)new std::vector< stree::Nidx >(arg1);
  {
    std::shared_ptr<  std::vector<stree::Nidx> > *smartresult = result ? new std::shared_ptr<  std::vector<stree::Nidx> >(result SWIG_NO_NULL_DELETER_SWIG_BUILTIN_INIT) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, SWIG_BUILTIN_INIT | SWIG_POINTER_OWN);
  }
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_NidxVector_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"NidxVector_pop_back",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector_pop_back" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector_resize__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector_resize" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NidxVector_resize" "', argument " "2"" of type '" "std::vector< unsigned int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector_erase__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  SwigValueWrapper< std::vector< unsigned int >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  SwigValueWrapper< std::vector< unsigned int >::iterator > result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector_erase" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NidxVector_erase" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NidxVector_erase" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
    }
  }
  result = std_vector_Sl_stree_Nidx_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector_erase__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  SwigValueWrapper< std::vector< unsigned int >::iterator > arg2 ;
  SwigValueWrapper< std::vector< unsigned int >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  SwigValueWrapper< std::vector< unsigned int >::iterator > result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector_erase" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NidxVector_erase" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NidxVector_erase" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NidxVector_erase" "', argument " "3"" of type '" "std::vector< unsigned int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NidxVector_erase" "', argument " "3"" of type '" "std::vector< unsigned int >::iterator""'");
    }
  }
  result = std_vector_Sl_stree_Nidx_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"NidxVector_erase",0,3,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    return _wrap_NidxVector_erase__SWIG_0(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_NidxVector_erase__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NidxVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< stree::Nidx >::erase(std::vector< unsigned int >::iterator)\n"
    "    std::vector< stree::Nidx >::erase(std::vector< unsigned int >::iterator,std::vector< unsigned int >::iterator)\n");
  return 0;
}


SWIGINTERN int _wrap_new_NidxVector__SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< unsigned int >::size_type arg1 ;
  std::vector< unsigned int >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< unsigned int >::value_type temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  std::vector< stree::Nidx > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_NidxVector" "', argument " "1"" of type '" "std::vector< unsigned int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< unsigned int >::size_type >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_NidxVector" "', argument " "2"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< unsigned int >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< stree::Nidx > *)new std::vector< stree::Nidx >(arg1,(std::vector< unsigned int >::value_type const &)*arg2);
  {
    std::shared_ptr<  std::vector<stree::Nidx> > *smartresult = result ? new std::shared_ptr<  std::vector<stree::Nidx> >(result SWIG_NO_NULL_DELETER_SWIG_BUILTIN_INIT) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, SWIG_BUILTIN_INIT | SWIG_POINTER_OWN);
  }
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_NidxVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_NidxVector",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_NidxVector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_size_t(argv[0], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_2;
    return _wrap_new_NidxVector__SWIG_2(self, argc, argv);
  }
check_2:
  
  if (argc == 1) {
    return _wrap_new_NidxVector__SWIG_1(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_new_NidxVector__SWIG_3(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NidxVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< stree::Nidx >::vector()\n"
    "    std::vector< stree::Nidx >::vector(std::vector< stree::Nidx > const &)\n"
    "    std::vector< stree::Nidx >::vector(std::vector< unsigned int >::size_type)\n"
    "    std::vector< stree::Nidx >::vector(std::vector< unsigned int >::size_type,std::vector< unsigned int >::value_type const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_NidxVector_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  std::vector< unsigned int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  std::vector< unsigned int >::value_type temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector_push_back" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NidxVector_push_back" "', argument " "2"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< unsigned int >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< unsigned int >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > const > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< unsigned int >::value_type *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"NidxVector_front",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector_front" "', argument " "1"" of type '" "std::vector< stree::Nidx > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::vector< unsigned int >::value_type *) &((std::vector< stree::Nidx > const *)arg1)->front();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > const > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< unsigned int >::value_type *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"NidxVector_back",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector_back" "', argument " "1"" of type '" "std::vector< stree::Nidx > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::vector< unsigned int >::value_type *) &((std::vector< stree::Nidx > const *)arg1)->back();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned int >::value_type temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args,"NidxVector_assign",2,2,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector_assign" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NidxVector_assign" "', argument " "2"" of type '" "std::vector< unsigned int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::size_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NidxVector_assign" "', argument " "3"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< unsigned int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector_resize__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned int >::value_type temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector_resize" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NidxVector_resize" "', argument " "2"" of type '" "std::vector< unsigned int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::size_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NidxVector_resize" "', argument " "3"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< unsigned int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"NidxVector_resize",0,3,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    return _wrap_NidxVector_resize__SWIG_0(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_NidxVector_resize__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NidxVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< stree::Nidx >::resize(std::vector< unsigned int >::size_type)\n"
    "    std::vector< stree::Nidx >::resize(std::vector< unsigned int >::size_type,std::vector< unsigned int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NidxVector_insert__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  SwigValueWrapper< std::vector< unsigned int >::iterator > arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< unsigned int >::value_type temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< std::vector< unsigned int >::iterator > result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector_insert" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NidxVector_insert" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NidxVector_insert" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NidxVector_insert" "', argument " "3"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned int >::value_type >(val3);
  arg3 = &temp3;
  result = std_vector_Sl_stree_Nidx_Sg__insert__SWIG_0(arg1,arg2,(unsigned int const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector_insert__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  SwigValueWrapper< std::vector< unsigned int >::iterator > arg2 ;
  std::vector< unsigned int >::size_type arg3 ;
  std::vector< unsigned int >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< unsigned int >::value_type temp4 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector_insert" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NidxVector_insert" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NidxVector_insert" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NidxVector_insert" "', argument " "3"" of type '" "std::vector< unsigned int >::size_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned int >::size_type >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NidxVector_insert" "', argument " "4"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp4 = static_cast< std::vector< unsigned int >::value_type >(val4);
  arg4 = &temp4;
  std_vector_Sl_stree_Nidx_Sg__insert__SWIG_1(arg1,arg2,arg3,(unsigned int const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"NidxVector_insert",0,4,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 3) {
    return _wrap_NidxVector_insert__SWIG_0(self, argc, argv);
  }
  if (argc == 4) {
    return _wrap_NidxVector_insert__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NidxVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< stree::Nidx >::insert(std::vector< unsigned int >::iterator,std::vector< unsigned int >::value_type const &)\n"
    "    std::vector< stree::Nidx >::insert(std::vector< unsigned int >::iterator,std::vector< unsigned int >::size_type,std::vector< unsigned int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NidxVector_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector_reserve" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_size_t(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NidxVector_reserve" "', argument " "2"" of type '" "std::vector< unsigned int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NidxVector_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > const > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< unsigned int >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args,"NidxVector_capacity",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NidxVector_capacity" "', argument " "1"" of type '" "std::vector< stree::Nidx > const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = ((std::vector< stree::Nidx > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NidxVector(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< stree::Nidx > *arg1 = (std::vector< stree::Nidx > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx > > tempshared1 ;
  std::shared_ptr< std::vector< stree::Nidx > > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"delete_NidxVector",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NidxVector" "', argument " "1"" of type '" "std::vector< stree::Nidx > *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  std::vector<stree::Nidx> > * >(argp1);
      arg1 = const_cast< std::vector< stree::Nidx > * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_STree__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  stree::STree *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (stree::STree *)new stree::STree();
  {
    std::shared_ptr<  stree::STree > *smartresult = result ? new std::shared_ptr<  stree::STree >(result SWIG_NO_NULL_DELETER_SWIG_BUILTIN_INIT) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_stree__STree_t, SWIG_BUILTIN_INIT | SWIG_POINTER_OWN);
  }
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_STree__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::String *arg1 = 0 ;
  stree::Idx arg2 ;
  unsigned int arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  stree::STree *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_STree" "', argument " "1"" of type '" "stree::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_STree" "', argument " "1"" of type '" "stree::String const &""'"); 
  }
  arg1 = reinterpret_cast< stree::String * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_STree" "', argument " "2"" of type '" "stree::Idx""'");
  } 
  arg2 = static_cast< stree::Idx >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_STree" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_STree" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (stree::STree *)new stree::STree((stree::String const &)*arg1,arg2,arg3,arg4);
  {
    std::shared_ptr<  stree::STree > *smartresult = result ? new std::shared_ptr<  stree::STree >(result SWIG_NO_NULL_DELETER_SWIG_BUILTIN_INIT) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_stree__STree_t, SWIG_BUILTIN_INIT | SWIG_POINTER_OWN);
  }
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_STree__SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::String *arg1 = 0 ;
  stree::Idx arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  stree::STree *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_STree" "', argument " "1"" of type '" "stree::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_STree" "', argument " "1"" of type '" "stree::String const &""'"); 
  }
  arg1 = reinterpret_cast< stree::String * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_STree" "', argument " "2"" of type '" "stree::Idx""'");
  } 
  arg2 = static_cast< stree::Idx >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_STree" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (stree::STree *)new stree::STree((stree::String const &)*arg1,arg2,arg3);
  {
    std::shared_ptr<  stree::STree > *smartresult = result ? new std::shared_ptr<  stree::STree >(result SWIG_NO_NULL_DELETER_SWIG_BUILTIN_INIT) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_stree__STree_t, SWIG_BUILTIN_INIT | SWIG_POINTER_OWN);
  }
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_STree__SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::String *arg1 = 0 ;
  stree::Idx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  stree::STree *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_STree" "', argument " "1"" of type '" "stree::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_STree" "', argument " "1"" of type '" "stree::String const &""'"); 
  }
  arg1 = reinterpret_cast< stree::String * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_STree" "', argument " "2"" of type '" "stree::Idx""'");
  } 
  arg2 = static_cast< stree::Idx >(val2);
  result = (stree::STree *)new stree::STree((stree::String const &)*arg1,arg2);
  {
    std::shared_ptr<  stree::STree > *smartresult = result ? new std::shared_ptr<  stree::STree >(result SWIG_NO_NULL_DELETER_SWIG_BUILTIN_INIT) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_stree__STree_t, SWIG_BUILTIN_INIT | SWIG_POINTER_OWN);
  }
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_STree__SWIG_4(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::String *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  stree::STree *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_STree" "', argument " "1"" of type '" "stree::String const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_STree" "', argument " "1"" of type '" "stree::String const &""'"); 
  }
  arg1 = reinterpret_cast< stree::String * >(argp1);
  result = (stree::STree *)new stree::STree((stree::String const &)*arg1);
  {
    std::shared_ptr<  stree::STree > *smartresult = result ? new std::shared_ptr<  stree::STree >(result SWIG_NO_NULL_DELETER_SWIG_BUILTIN_INIT) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_stree__STree_t, SWIG_BUILTIN_INIT | SWIG_POINTER_OWN);
  }
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_STree(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_STree",0,4,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_STree__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_STree__SWIG_4(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_new_STree__SWIG_3(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_new_STree__SWIG_2(self, argc, argv);
  }
  if (argc == 4) {
    return _wrap_new_STree__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_STree'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stree::STree::STree()\n"
    "    stree::STree::STree(stree::String const &,stree::Idx,unsigned int,bool)\n"
    "    stree::STree::STree(stree::String const &,stree::Idx,unsigned int)\n"
    "    stree::STree::STree(stree::String const &,stree::Idx)\n"
    "    stree::STree::STree(stree::String const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_STree_initialize__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  stree::String *arg2 = 0 ;
  stree::Idx arg3 ;
  unsigned int arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree > tempshared1 ;
  std::shared_ptr< stree::STree > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STree_initialize" "', argument " "1"" of type '" "stree::STree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "STree_initialize" "', argument " "2"" of type '" "stree::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "STree_initialize" "', argument " "2"" of type '" "stree::String const &""'"); 
  }
  arg2 = reinterpret_cast< stree::String * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "STree_initialize" "', argument " "3"" of type '" "stree::Idx""'");
  } 
  arg3 = static_cast< stree::Idx >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "STree_initialize" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "STree_initialize" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  (arg1)->initialize((stree::String const &)*arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STree_initialize__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  stree::String *arg2 = 0 ;
  stree::Idx arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree > tempshared1 ;
  std::shared_ptr< stree::STree > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STree_initialize" "', argument " "1"" of type '" "stree::STree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "STree_initialize" "', argument " "2"" of type '" "stree::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "STree_initialize" "', argument " "2"" of type '" "stree::String const &""'"); 
  }
  arg2 = reinterpret_cast< stree::String * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "STree_initialize" "', argument " "3"" of type '" "stree::Idx""'");
  } 
  arg3 = static_cast< stree::Idx >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "STree_initialize" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  (arg1)->initialize((stree::String const &)*arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STree_initialize__SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  stree::String *arg2 = 0 ;
  stree::Idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree > tempshared1 ;
  std::shared_ptr< stree::STree > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STree_initialize" "', argument " "1"" of type '" "stree::STree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "STree_initialize" "', argument " "2"" of type '" "stree::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "STree_initialize" "', argument " "2"" of type '" "stree::String const &""'"); 
  }
  arg2 = reinterpret_cast< stree::String * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "STree_initialize" "', argument " "3"" of type '" "stree::Idx""'");
  } 
  arg3 = static_cast< stree::Idx >(val3);
  (arg1)->initialize((stree::String const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STree_initialize__SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  stree::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree > tempshared1 ;
  std::shared_ptr< stree::STree > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STree_initialize" "', argument " "1"" of type '" "stree::STree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "STree_initialize" "', argument " "2"" of type '" "stree::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "STree_initialize" "', argument " "2"" of type '" "stree::String const &""'"); 
  }
  arg2 = reinterpret_cast< stree::String * >(argp2);
  (arg1)->initialize((stree::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STree_initialize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"STree_initialize",0,5,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    return _wrap_STree_initialize__SWIG_3(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_STree_initialize__SWIG_2(self, argc, argv);
  }
  if (argc == 4) {
    return _wrap_STree_initialize__SWIG_1(self, argc, argv);
  }
  if (argc == 5) {
    return _wrap_STree_initialize__SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'STree_initialize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stree::STree::initialize(stree::String const &,stree::Idx,unsigned int,bool)\n"
    "    stree::STree::initialize(stree::String const &,stree::Idx,unsigned int)\n"
    "    stree::STree::initialize(stree::String const &,stree::Idx)\n"
    "    stree::STree::initialize(stree::String const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_STree_extendTo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  stree::Idx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree > tempshared1 ;
  std::shared_ptr< stree::STree > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STree_extendTo" "', argument " "1"" of type '" "stree::STree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "STree_extendTo" "', argument " "2"" of type '" "stree::Idx""'");
  } 
  arg2 = static_cast< stree::Idx >(val2);
  (arg1)->extendTo(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STree_nLeaves(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree const > tempshared1 ;
  std::shared_ptr< stree::STree const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::Idx result;
  
  if (!SWIG_Python_UnpackTuple(args,"STree_nLeaves",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STree_nLeaves" "', argument " "1"" of type '" "stree::STree const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (stree::Idx)((stree::STree const *)arg1)->nLeaves();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STree_nInternalNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree const > tempshared1 ;
  std::shared_ptr< stree::STree const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::Idx result;
  
  if (!SWIG_Python_UnpackTuple(args,"STree_nInternalNodes",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STree_nInternalNodes" "', argument " "1"" of type '" "stree::STree const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (stree::Idx)((stree::STree const *)arg1)->nInternalNodes();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STree_nNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree const > tempshared1 ;
  std::shared_ptr< stree::STree const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::Idx result;
  
  if (!SWIG_Python_UnpackTuple(args,"STree_nNodes",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STree_nNodes" "', argument " "1"" of type '" "stree::STree const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (stree::Idx)((stree::STree const *)arg1)->nNodes();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STree_getDeepestVirtualLeafBranch(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree > tempshared1 ;
  std::shared_ptr< stree::STree > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::STreeNode result;
  
  if (!SWIG_Python_UnpackTuple(args,"STree_getDeepestVirtualLeafBranch",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STree_getDeepestVirtualLeafBranch" "', argument " "1"" of type '" "stree::STree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->getDeepestVirtualLeafBranch();
  resultobj = SWIG_NewPointerObj((new stree::STreeNode(static_cast< const stree::STreeNode& >(result))), SWIGTYPE_p_stree__STreeNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STree_n(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  stree::Nidx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree const > tempshared1 ;
  std::shared_ptr< stree::STree const > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  stree::Idx result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STree_n" "', argument " "1"" of type '" "stree::STree const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "STree_n" "', argument " "2"" of type '" "stree::Nidx""'");
  } 
  arg2 = static_cast< stree::Nidx >(val2);
  result = (stree::Idx)((stree::STree const *)arg1)->n(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STree_d(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  stree::Nidx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree const > tempshared1 ;
  std::shared_ptr< stree::STree const > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  stree::Idx result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STree_d" "', argument " "1"" of type '" "stree::STree const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "STree_d" "', argument " "2"" of type '" "stree::Nidx""'");
  } 
  arg2 = static_cast< stree::Nidx >(val2);
  result = (stree::Idx)((stree::STree const *)arg1)->d(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STree_hi(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  stree::Nidx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree const > tempshared1 ;
  std::shared_ptr< stree::STree const > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  stree::Idx result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STree_hi" "', argument " "1"" of type '" "stree::STree const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "STree_hi" "', argument " "2"" of type '" "stree::Nidx""'");
  } 
  arg2 = static_cast< stree::Nidx >(val2);
  result = (stree::Idx)((stree::STree const *)arg1)->hi(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STree_l(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  stree::Nidx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree const > tempshared1 ;
  std::shared_ptr< stree::STree const > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  stree::Nidx *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STree_l" "', argument " "1"" of type '" "stree::STree const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "STree_l" "', argument " "2"" of type '" "stree::Nidx""'");
  } 
  arg2 = static_cast< stree::Nidx >(val2);
  result = (stree::Nidx *) &((stree::STree const *)arg1)->l(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STree_r(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  stree::Nidx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree const > tempshared1 ;
  std::shared_ptr< stree::STree const > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  stree::Nidx *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STree_r" "', argument " "1"" of type '" "stree::STree const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "STree_r" "', argument " "2"" of type '" "stree::Nidx""'");
  } 
  arg2 = static_cast< stree::Nidx >(val2);
  result = (stree::Nidx *) &((stree::STree const *)arg1)->r(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STree_c__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  stree::Nidx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree const > tempshared1 ;
  std::shared_ptr< stree::STree const > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  stree::Nidx *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STree_c" "', argument " "1"" of type '" "stree::STree const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "STree_c" "', argument " "2"" of type '" "stree::Nidx""'");
  } 
  arg2 = static_cast< stree::Nidx >(val2);
  result = (stree::Nidx *) &((stree::STree const *)arg1)->c(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STree_c__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  stree::Nidx arg2 ;
  stree::Char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree const > tempshared1 ;
  std::shared_ptr< stree::STree const > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  stree::Nidx *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STree_c" "', argument " "1"" of type '" "stree::STree const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "STree_c" "', argument " "2"" of type '" "stree::Nidx""'");
  } 
  arg2 = static_cast< stree::Nidx >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "STree_c" "', argument " "3"" of type '" "stree::Char""'");
  } 
  arg3 = static_cast< stree::Char >(val3);
  result = (stree::Nidx *) &((stree::STree const *)arg1)->c(arg2,arg3);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STree_c(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"STree_c",0,3,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    return _wrap_STree_c__SWIG_0(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_STree_c__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'STree_c'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stree::STree::c(stree::Nidx const) const\n"
    "    stree::STree::c(stree::Nidx const,stree::Char) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_STree_sl(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  stree::Nidx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree const > tempshared1 ;
  std::shared_ptr< stree::STree const > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  stree::Nidx *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STree_sl" "', argument " "1"" of type '" "stree::STree const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "STree_sl" "', argument " "2"" of type '" "stree::Nidx""'");
  } 
  arg2 = static_cast< stree::Nidx >(val2);
  result = (stree::Nidx *) &((stree::STree const *)arg1)->sl(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STree_sib(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  stree::Nidx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree const > tempshared1 ;
  std::shared_ptr< stree::STree const > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  stree::Nidx result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STree_sib" "', argument " "1"" of type '" "stree::STree const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "STree_sib" "', argument " "2"" of type '" "stree::Nidx""'");
  } 
  arg2 = static_cast< stree::Nidx >(val2);
  result = (stree::Nidx)((stree::STree const *)arg1)->sib(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STree_at(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  stree::Idx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree const > tempshared1 ;
  std::shared_ptr< stree::STree const > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  stree::Char result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STree_at" "', argument " "1"" of type '" "stree::STree const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "STree_at" "', argument " "2"" of type '" "stree::Idx""'");
  } 
  arg2 = static_cast< stree::Idx >(val2);
  result = (stree::Char)((stree::STree const *)arg1)->at(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STree_text__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  stree::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree > tempshared1 ;
  std::shared_ptr< stree::STree > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STree_text__set" "', argument " "1"" of type '" "stree::STree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "STree_text__set" "', argument " "2"" of type '" "stree::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "STree_text__set" "', argument " "2"" of type '" "stree::String const &""'"); 
  }
  arg2 = reinterpret_cast< stree::String * >(argp2);
  if (arg1) (arg1)->text_ = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STree_text__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree > tempshared1 ;
  std::shared_ptr< stree::STree > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::String *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"STree_text__get",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STree_text__get" "', argument " "1"" of type '" "stree::STree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (stree::String *) & ((arg1)->text_);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tom__Sequence, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STree_size__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  stree::Idx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree > tempshared1 ;
  std::shared_ptr< stree::STree > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STree_size__set" "', argument " "1"" of type '" "stree::STree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "STree_size__set" "', argument " "2"" of type '" "stree::Idx""'");
  } 
  arg2 = static_cast< stree::Idx >(val2);
  if (arg1) (arg1)->size_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STree_size__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree > tempshared1 ;
  std::shared_ptr< stree::STree > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::Idx result;
  
  if (!SWIG_Python_UnpackTuple(args,"STree_size__get",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STree_size__get" "', argument " "1"" of type '" "stree::STree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (stree::Idx) ((arg1)->size_);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STree_symbolSize__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree > tempshared1 ;
  std::shared_ptr< stree::STree > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STree_symbolSize__set" "', argument " "1"" of type '" "stree::STree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "STree_symbolSize__set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->symbolSize_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STree_symbolSize__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree > tempshared1 ;
  std::shared_ptr< stree::STree > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!SWIG_Python_UnpackTuple(args,"STree_symbolSize__get",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STree_symbolSize__get" "', argument " "1"" of type '" "stree::STree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (unsigned int) ((arg1)->symbolSize_);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STree_annotated__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree > tempshared1 ;
  std::shared_ptr< stree::STree > *smartarg1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STree_annotated__set" "', argument " "1"" of type '" "stree::STree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_bool(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "STree_annotated__set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->annotated_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STree_annotated__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree > tempshared1 ;
  std::shared_ptr< stree::STree > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"STree_annotated__get",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STree_annotated__get" "', argument " "1"" of type '" "stree::STree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (bool) ((arg1)->annotated_);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STree_serialize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree > tempshared1 ;
  std::shared_ptr< stree::STree > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!SWIG_Python_UnpackTuple(args,"STree_serialize",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STree_serialize" "', argument " "1"" of type '" "stree::STree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->serialize();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_STree(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree > tempshared1 ;
  std::shared_ptr< stree::STree > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"delete_STree",0,0,0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(self, &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_STree" "', argument " "1"" of type '" "stree::STree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_STreeNode__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  stree::STreeNode *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (stree::STreeNode *)new stree::STreeNode();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stree__STreeNode, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_STreeNode__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree const > tempshared1 ;
  std::shared_ptr< stree::STree const > *smartarg1 = 0 ;
  stree::STreeNode *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_STreeNode" "', argument " "1"" of type '" "stree::STree const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (stree::STreeNode *)new stree::STreeNode((stree::STree const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stree__STreeNode, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_STreeNode__SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  stree::Nidx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree const > tempshared1 ;
  std::shared_ptr< stree::STree const > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  stree::STreeNode *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_STreeNode" "', argument " "1"" of type '" "stree::STree const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_STreeNode" "', argument " "2"" of type '" "stree::Nidx""'");
  } 
  arg2 = static_cast< stree::Nidx >(val2);
  result = (stree::STreeNode *)new stree::STreeNode((stree::STree const *)arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stree__STreeNode, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_STreeNode(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_STreeNode",0,2,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_STreeNode__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_STreeNode__SWIG_1(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_new_STreeNode__SWIG_2(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_STreeNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stree::STreeNode::STreeNode()\n"
    "    stree::STreeNode::STreeNode(stree::STree const *)\n"
    "    stree::STreeNode::STreeNode(stree::STree const *,stree::Nidx)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_STreeNode_isValid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = (stree::STreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreeNode_isValid",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeNode_isValid" "', argument " "1"" of type '" "stree::STreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  result = (bool)((stree::STreeNode const *)arg1)->isValid();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeNode_setValid__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = (stree::STreeNode *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeNode_setValid" "', argument " "1"" of type '" "stree::STreeNode *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "STreeNode_setValid" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setValid(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeNode_setValid__SWIG_1(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = (stree::STreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeNode_setValid" "', argument " "1"" of type '" "stree::STreeNode *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  (arg1)->setValid();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeNode_setValid(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"STreeNode_setValid",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_STreeNode_setValid__SWIG_1(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_STreeNode_setValid__SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'STreeNode_setValid'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stree::STreeNode::setValid(bool)\n"
    "    stree::STreeNode::setValid()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_STreeNode_isNode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = (stree::STreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreeNode_isNode",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeNode_isNode" "', argument " "1"" of type '" "stree::STreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  result = (bool)((stree::STreeNode const *)arg1)->isNode();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeNode_isLeaf(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = (stree::STreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreeNode_isLeaf",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeNode_isLeaf" "', argument " "1"" of type '" "stree::STreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  result = (bool)((stree::STreeNode const *)arg1)->isLeaf();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeNode_isRoot(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = (stree::STreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreeNode_isRoot",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeNode_isRoot" "', argument " "1"" of type '" "stree::STreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  result = (bool)((stree::STreeNode const *)arg1)->isRoot();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeNode_index(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = (stree::STreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::Idx result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreeNode_index",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeNode_index" "', argument " "1"" of type '" "stree::STreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  result = (stree::Idx)((stree::STreeNode const *)arg1)->index();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeNode_nodeIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = (stree::STreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::Idx result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreeNode_nodeIndex",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeNode_nodeIndex" "', argument " "1"" of type '" "stree::STreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  result = (stree::Idx)((stree::STreeNode const *)arg1)->nodeIndex();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeNode_nidx(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = (stree::STreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::Nidx result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreeNode_nidx",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeNode_nidx" "', argument " "1"" of type '" "stree::STreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  result = (stree::Nidx)((stree::STreeNode const *)arg1)->nidx();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeNode___eq__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = (stree::STreeNode *) 0 ;
  stree::STreeNode *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeNode___eq__" "', argument " "1"" of type '" "stree::STreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_stree__STreeNode,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "STreeNode___eq__" "', argument " "2"" of type '" "stree::STreeNode const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "STreeNode___eq__" "', argument " "2"" of type '" "stree::STreeNode const &""'"); 
  }
  arg2 = reinterpret_cast< stree::STreeNode * >(argp2);
  result = (bool)((stree::STreeNode const *)arg1)->operator ==((stree::STreeNode const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeNode___lt__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = (stree::STreeNode *) 0 ;
  stree::STreeNode *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeNode___lt__" "', argument " "1"" of type '" "stree::STreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_stree__STreeNode,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "STreeNode___lt__" "', argument " "2"" of type '" "stree::STreeNode const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "STreeNode___lt__" "', argument " "2"" of type '" "stree::STreeNode const &""'"); 
  }
  arg2 = reinterpret_cast< stree::STreeNode * >(argp2);
  result = (bool)((stree::STreeNode const *)arg1)->operator <((stree::STreeNode const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeNode_depth(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = (stree::STreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::Idx result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreeNode_depth",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeNode_depth" "', argument " "1"" of type '" "stree::STreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  result = (stree::Idx)((stree::STreeNode const *)arg1)->depth();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeNode_headIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = (stree::STreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::Idx result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreeNode_headIndex",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeNode_headIndex" "', argument " "1"" of type '" "stree::STreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  result = (stree::Idx)((stree::STreeNode const *)arg1)->headIndex();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeNode_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = (stree::STreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::Idx result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreeNode_count",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeNode_count" "', argument " "1"" of type '" "stree::STreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  result = (stree::Idx)((stree::STreeNode const *)arg1)->count();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeNode_getChild__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = (stree::STreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  stree::STreeNode result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeNode_getChild" "', argument " "1"" of type '" "stree::STreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  result = ((stree::STreeNode const *)arg1)->getChild();
  resultobj = SWIG_NewPointerObj((new stree::STreeNode(static_cast< const stree::STreeNode& >(result))), SWIGTYPE_p_stree__STreeNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeNode_child__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = (stree::STreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeNode_child" "', argument " "1"" of type '" "stree::STreeNode *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  (arg1)->child();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeNode_getChild__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = (stree::STreeNode *) 0 ;
  stree::Char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  stree::STreeNode result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeNode_getChild" "', argument " "1"" of type '" "stree::STreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "STreeNode_getChild" "', argument " "2"" of type '" "stree::Char""'");
  } 
  arg2 = static_cast< stree::Char >(val2);
  result = ((stree::STreeNode const *)arg1)->getChild(arg2);
  resultobj = SWIG_NewPointerObj((new stree::STreeNode(static_cast< const stree::STreeNode& >(result))), SWIGTYPE_p_stree__STreeNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeNode_getChild(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"STreeNode_getChild",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_STreeNode_getChild__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_STreeNode_getChild__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'STreeNode_getChild'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stree::STreeNode::getChild() const\n"
    "    stree::STreeNode::getChild(stree::Char) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_STreeNode_child__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = (stree::STreeNode *) 0 ;
  stree::Char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeNode_child" "', argument " "1"" of type '" "stree::STreeNode *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "STreeNode_child" "', argument " "2"" of type '" "stree::Char""'");
  } 
  arg2 = static_cast< stree::Char >(val2);
  (arg1)->child(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeNode_child(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"STreeNode_child",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_STreeNode_child__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_STreeNode_child__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'STreeNode_child'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stree::STreeNode::child()\n"
    "    stree::STreeNode::child(stree::Char)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_STreeNode_getSibling(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = (stree::STreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::STreeNode result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreeNode_getSibling",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeNode_getSibling" "', argument " "1"" of type '" "stree::STreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  result = ((stree::STreeNode const *)arg1)->getSibling();
  resultobj = SWIG_NewPointerObj((new stree::STreeNode(static_cast< const stree::STreeNode& >(result))), SWIGTYPE_p_stree__STreeNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeNode_sibling(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = (stree::STreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"STreeNode_sibling",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeNode_sibling" "', argument " "1"" of type '" "stree::STreeNode *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  (arg1)->sibling();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeNode_getSuffixLink(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = (stree::STreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::STreeNode result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreeNode_getSuffixLink",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeNode_getSuffixLink" "', argument " "1"" of type '" "stree::STreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  result = ((stree::STreeNode const *)arg1)->getSuffixLink();
  resultobj = SWIG_NewPointerObj((new stree::STreeNode(static_cast< const stree::STreeNode& >(result))), SWIGTYPE_p_stree__STreeNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeNode_suffixLink(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = (stree::STreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"STreeNode_suffixLink",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeNode_suffixLink" "', argument " "1"" of type '" "stree::STreeNode *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  (arg1)->suffixLink();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeNode_string(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = (stree::STreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::String result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreeNode_string",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeNode_string" "', argument " "1"" of type '" "stree::STreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  result = ((stree::STreeNode const *)arg1)->string();
  resultobj = SWIG_NewPointerObj((new stree::String(static_cast< const stree::String& >(result))), SWIGTYPE_p_tom__Sequence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeNode_label(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = (stree::STreeNode *) 0 ;
  stree::Idx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  stree::String result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeNode_label" "', argument " "1"" of type '" "stree::STreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "STreeNode_label" "', argument " "2"" of type '" "stree::Idx""'");
  } 
  arg2 = static_cast< stree::Idx >(val2);
  result = ((stree::STreeNode const *)arg1)->label(arg2);
  resultobj = SWIG_NewPointerObj((new stree::String(static_cast< const stree::String& >(result))), SWIGTYPE_p_tom__Sequence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeNode_dataStr__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = (stree::STreeNode *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeNode_dataStr" "', argument " "1"" of type '" "stree::STreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "STreeNode_dataStr" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((stree::STreeNode const *)arg1)->dataStr(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeNode_dataStr__SWIG_1(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = (stree::STreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeNode_dataStr" "', argument " "1"" of type '" "stree::STreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  result = ((stree::STreeNode const *)arg1)->dataStr();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeNode_dataStr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"STreeNode_dataStr",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_STreeNode_dataStr__SWIG_1(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_STreeNode_dataStr__SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'STreeNode_dataStr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stree::STreeNode::dataStr(int) const\n"
    "    stree::STreeNode::dataStr() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_STreeNode_indexStr__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = (stree::STreeNode *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeNode_indexStr" "', argument " "1"" of type '" "stree::STreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "STreeNode_indexStr" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((stree::STreeNode const *)arg1)->indexStr(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeNode_indexStr__SWIG_1(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = (stree::STreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeNode_indexStr" "', argument " "1"" of type '" "stree::STreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  result = ((stree::STreeNode const *)arg1)->indexStr();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeNode_indexStr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"STreeNode_indexStr",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_STreeNode_indexStr__SWIG_1(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_STreeNode_indexStr__SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'STreeNode_indexStr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stree::STreeNode::indexStr(int) const\n"
    "    stree::STreeNode::indexStr() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_STreeNode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = (stree::STreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"delete_STreeNode",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_STreeNode" "', argument " "1"" of type '" "stree::STreeNode *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_STreeEdge__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  stree::STreeEdge *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (stree::STreeEdge *)new stree::STreeEdge();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stree__STreeEdge, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_STreeEdge__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree const > tempshared1 ;
  std::shared_ptr< stree::STree const > *smartarg1 = 0 ;
  stree::STreeEdge *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_STreeEdge" "', argument " "1"" of type '" "stree::STree const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (stree::STreeEdge *)new stree::STreeEdge((stree::STree const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stree__STreeEdge, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_STreeEdge__SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  stree::Nidx arg2 ;
  stree::Nidx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree const > tempshared1 ;
  std::shared_ptr< stree::STree const > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  stree::STreeEdge *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_STreeEdge" "', argument " "1"" of type '" "stree::STree const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_STreeEdge" "', argument " "2"" of type '" "stree::Nidx""'");
  } 
  arg2 = static_cast< stree::Nidx >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_STreeEdge" "', argument " "3"" of type '" "stree::Nidx""'");
  } 
  arg3 = static_cast< stree::Nidx >(val3);
  result = (stree::STreeEdge *)new stree::STreeEdge((stree::STree const *)arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stree__STreeEdge, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_STreeEdge__SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::STreeNode *arg1 = 0 ;
  stree::Nidx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  stree::STreeEdge *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_stree__STreeNode,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_STreeEdge" "', argument " "1"" of type '" "stree::STreeNode const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_STreeEdge" "', argument " "1"" of type '" "stree::STreeNode const &""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeNode * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_STreeEdge" "', argument " "2"" of type '" "stree::Nidx""'");
  } 
  arg2 = static_cast< stree::Nidx >(val2);
  result = (stree::STreeEdge *)new stree::STreeEdge((stree::STreeNode const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stree__STreeEdge, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_STreeEdge(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_STreeEdge",0,3,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_STreeEdge__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_STreeEdge__SWIG_1(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_new_STreeEdge__SWIG_3(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_new_STreeEdge__SWIG_2(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_STreeEdge'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stree::STreeEdge::STreeEdge()\n"
    "    stree::STreeEdge::STreeEdge(stree::STree const *)\n"
    "    stree::STreeEdge::STreeEdge(stree::STree const *,stree::Nidx,stree::Nidx)\n"
    "    stree::STreeEdge::STreeEdge(stree::STreeNode const &,stree::Nidx)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_STreeEdge_parentDepth(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreeEdge *arg1 = (stree::STreeEdge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::Idx result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreeEdge_parentDepth",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeEdge_parentDepth" "', argument " "1"" of type '" "stree::STreeEdge const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeEdge * >(argp1);
  result = (stree::Idx)((stree::STreeEdge const *)arg1)->parentDepth();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeEdge_getParent(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreeEdge *arg1 = (stree::STreeEdge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::STreeNode result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreeEdge_getParent",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeEdge_getParent" "', argument " "1"" of type '" "stree::STreeEdge const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeEdge * >(argp1);
  result = ((stree::STreeEdge const *)arg1)->getParent();
  resultobj = SWIG_NewPointerObj((new stree::STreeNode(static_cast< const stree::STreeNode& >(result))), SWIGTYPE_p_stree__STreeNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeEdge_getChild__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  stree::STreeEdge *arg1 = (stree::STreeEdge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  stree::STreeEdge result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeEdge_getChild" "', argument " "1"" of type '" "stree::STreeEdge const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeEdge * >(argp1);
  result = ((stree::STreeEdge const *)arg1)->getChild();
  resultobj = SWIG_NewPointerObj((new stree::STreeEdge(static_cast< const stree::STreeEdge& >(result))), SWIGTYPE_p_stree__STreeEdge, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeEdge_child__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  stree::STreeEdge *arg1 = (stree::STreeEdge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeEdge_child" "', argument " "1"" of type '" "stree::STreeEdge *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeEdge * >(argp1);
  (arg1)->child();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeEdge_getChild__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::STreeEdge *arg1 = (stree::STreeEdge *) 0 ;
  stree::Char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  stree::STreeEdge result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeEdge_getChild" "', argument " "1"" of type '" "stree::STreeEdge const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeEdge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "STreeEdge_getChild" "', argument " "2"" of type '" "stree::Char""'");
  } 
  arg2 = static_cast< stree::Char >(val2);
  result = ((stree::STreeEdge const *)arg1)->getChild(arg2);
  resultobj = SWIG_NewPointerObj((new stree::STreeEdge(static_cast< const stree::STreeEdge& >(result))), SWIGTYPE_p_stree__STreeEdge, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeEdge_getChild(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"STreeEdge_getChild",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_STreeEdge_getChild__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_STreeEdge_getChild__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'STreeEdge_getChild'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stree::STreeEdge::getChild() const\n"
    "    stree::STreeEdge::getChild(stree::Char) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_STreeEdge_child__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::STreeEdge *arg1 = (stree::STreeEdge *) 0 ;
  stree::Char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeEdge_child" "', argument " "1"" of type '" "stree::STreeEdge *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeEdge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "STreeEdge_child" "', argument " "2"" of type '" "stree::Char""'");
  } 
  arg2 = static_cast< stree::Char >(val2);
  (arg1)->child(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeEdge_child(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"STreeEdge_child",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_STreeEdge_child__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_STreeEdge_child__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'STreeEdge_child'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stree::STreeEdge::child()\n"
    "    stree::STreeEdge::child(stree::Char)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_STreeEdge_getSibling(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreeEdge *arg1 = (stree::STreeEdge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::STreeEdge result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreeEdge_getSibling",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeEdge_getSibling" "', argument " "1"" of type '" "stree::STreeEdge const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeEdge * >(argp1);
  result = ((stree::STreeEdge const *)arg1)->getSibling();
  resultobj = SWIG_NewPointerObj((new stree::STreeEdge(static_cast< const stree::STreeEdge& >(result))), SWIGTYPE_p_stree__STreeEdge, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreeEdge_label(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreeEdge *arg1 = (stree::STreeEdge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::String result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreeEdge_label",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeEdge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreeEdge_label" "', argument " "1"" of type '" "stree::STreeEdge const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeEdge * >(argp1);
  result = ((stree::STreeEdge const *)arg1)->label();
  resultobj = SWIG_NewPointerObj((new stree::String(static_cast< const stree::String& >(result))), SWIGTYPE_p_tom__Sequence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_STreeEdge(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreeEdge *arg1 = (stree::STreeEdge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"delete_STreeEdge",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreeEdge, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_STreeEdge" "', argument " "1"" of type '" "stree::STreeEdge *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreeEdge * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_STreePath__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  stree::STreePath *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (stree::STreePath *)new stree::STreePath();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stree__STreePath, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_STreePath__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree const > tempshared1 ;
  std::shared_ptr< stree::STree const > *smartarg1 = 0 ;
  stree::STreePath *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_STreePath" "', argument " "1"" of type '" "stree::STree const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (stree::STreePath *)new stree::STreePath((stree::STree const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stree__STreePath, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_STreePath(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_STreePath",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_STreePath__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_STreePath__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_STreePath'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stree::STreePath::STreePath()\n"
    "    stree::STreePath::STreePath(stree::STree const *)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_STreePath_child__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  stree::STreePath *arg1 = (stree::STreePath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreePath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreePath_child" "', argument " "1"" of type '" "stree::STreePath *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreePath * >(argp1);
  (arg1)->child();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreePath_child__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::STreePath *arg1 = (stree::STreePath *) 0 ;
  stree::Char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreePath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreePath_child" "', argument " "1"" of type '" "stree::STreePath *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreePath * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "STreePath_child" "', argument " "2"" of type '" "stree::Char""'");
  } 
  arg2 = static_cast< stree::Char >(val2);
  (arg1)->child(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreePath_child(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"STreePath_child",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_STreePath_child__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_STreePath_child__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'STreePath_child'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stree::STreePath::child()\n"
    "    stree::STreePath::child(stree::Char)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_STreePath_getParent(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreePath *arg1 = (stree::STreePath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::STreeNode result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreePath_getParent",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreePath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreePath_getParent" "', argument " "1"" of type '" "stree::STreePath const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreePath * >(argp1);
  result = ((stree::STreePath const *)arg1)->getParent();
  resultobj = SWIG_NewPointerObj((new stree::STreeNode(static_cast< const stree::STreeNode& >(result))), SWIGTYPE_p_stree__STreeNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreePath_getAncestor(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreePath *arg1 = (stree::STreePath *) 0 ;
  stree::Idx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  stree::STreeNode result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreePath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreePath_getAncestor" "', argument " "1"" of type '" "stree::STreePath const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreePath * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "STreePath_getAncestor" "', argument " "2"" of type '" "stree::Idx""'");
  } 
  arg2 = static_cast< stree::Idx >(val2);
  result = ((stree::STreePath const *)arg1)->getAncestor(arg2);
  resultobj = SWIG_NewPointerObj((new stree::STreeNode(static_cast< const stree::STreeNode& >(result))), SWIGTYPE_p_stree__STreeNode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreePath_parent(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreePath *arg1 = (stree::STreePath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"STreePath_parent",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreePath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreePath_parent" "', argument " "1"" of type '" "stree::STreePath *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreePath * >(argp1);
  (arg1)->parent();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreePath_nAncestors(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreePath *arg1 = (stree::STreePath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::Idx result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreePath_nAncestors",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreePath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreePath_nAncestors" "', argument " "1"" of type '" "stree::STreePath const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreePath * >(argp1);
  result = (stree::Idx)((stree::STreePath const *)arg1)->nAncestors();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreePath_parentDepth(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreePath *arg1 = (stree::STreePath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::Idx result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreePath_parentDepth",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreePath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreePath_parentDepth" "', argument " "1"" of type '" "stree::STreePath const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreePath * >(argp1);
  result = (stree::Idx)((stree::STreePath const *)arg1)->parentDepth();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreePath_label(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreePath *arg1 = (stree::STreePath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::String result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreePath_label",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreePath, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreePath_label" "', argument " "1"" of type '" "stree::STreePath const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreePath * >(argp1);
  result = ((stree::STreePath const *)arg1)->label();
  resultobj = SWIG_NewPointerObj((new stree::String(static_cast< const stree::String& >(result))), SWIGTYPE_p_tom__Sequence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_STreePath(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreePath *arg1 = (stree::STreePath *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"delete_STreePath",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreePath, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_STreePath" "', argument " "1"" of type '" "stree::STreePath *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreePath * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_STreePos__SWIG_0(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  stree::STreePos *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (stree::STreePos *)new stree::STreePos();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stree__STreePos, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_STreePos__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree const > tempshared1 ;
  std::shared_ptr< stree::STree const > *smartarg1 = 0 ;
  stree::STreePos *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_STreePos" "', argument " "1"" of type '" "stree::STree const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (stree::STreePos *)new stree::STreePos((stree::STree const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stree__STreePos, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_STreePos(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"new_STreePos",0,1,argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_STreePos__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    return _wrap_new_STreePos__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_STreePos'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stree::STreePos::STreePos()\n"
    "    stree::STreePos::STreePos(stree::STree const *)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_STreePos_setRoot(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreePos *arg1 = (stree::STreePos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"STreePos_setRoot",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreePos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreePos_setRoot" "', argument " "1"" of type '" "stree::STreePos *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreePos * >(argp1);
  (arg1)->setRoot();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreePos_isValid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreePos *arg1 = (stree::STreePos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreePos_isValid",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreePos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreePos_isValid" "', argument " "1"" of type '" "stree::STreePos const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreePos * >(argp1);
  result = (bool)((stree::STreePos const *)arg1)->isValid();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreePos_setValid__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::STreePos *arg1 = (stree::STreePos *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreePos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreePos_setValid" "', argument " "1"" of type '" "stree::STreePos *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreePos * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "STreePos_setValid" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setValid(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreePos_setValid__SWIG_1(PyObject *self, int nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  stree::STreePos *arg1 = (stree::STreePos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreePos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreePos_setValid" "', argument " "1"" of type '" "stree::STreePos *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreePos * >(argp1);
  (arg1)->setValid();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreePos_setValid(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"STreePos_setValid",0,2,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 1) {
    return _wrap_STreePos_setValid__SWIG_1(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_STreePos_setValid__SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'STreePos_setValid'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stree::STreePos::setValid(bool)\n"
    "    stree::STreePos::setValid()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_STreePos_isExplicit(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreePos *arg1 = (stree::STreePos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreePos_isExplicit",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreePos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreePos_isExplicit" "', argument " "1"" of type '" "stree::STreePos const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreePos * >(argp1);
  result = (bool)((stree::STreePos const *)arg1)->isExplicit();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreePos_isLeaf(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreePos *arg1 = (stree::STreePos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreePos_isLeaf",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreePos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreePos_isLeaf" "', argument " "1"" of type '" "stree::STreePos const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreePos * >(argp1);
  result = (bool)((stree::STreePos const *)arg1)->isLeaf();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreePos_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreePos *arg1 = (stree::STreePos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::Idx result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreePos_count",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreePos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreePos_count" "', argument " "1"" of type '" "stree::STreePos const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreePos * >(argp1);
  result = (stree::Idx)((stree::STreePos const *)arg1)->count();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreePos_headIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreePos *arg1 = (stree::STreePos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::Idx result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreePos_headIndex",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreePos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreePos_headIndex" "', argument " "1"" of type '" "stree::STreePos const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreePos * >(argp1);
  result = (stree::Idx)((stree::STreePos const *)arg1)->headIndex();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreePos_depth(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreePos *arg1 = (stree::STreePos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::Idx result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreePos_depth",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreePos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreePos_depth" "', argument " "1"" of type '" "stree::STreePos const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreePos * >(argp1);
  result = (stree::Idx)((stree::STreePos const *)arg1)->depth();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreePos_parentDepth(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreePos *arg1 = (stree::STreePos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::Idx result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreePos_parentDepth",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreePos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreePos_parentDepth" "', argument " "1"" of type '" "stree::STreePos const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreePos * >(argp1);
  result = (stree::Idx)((stree::STreePos const *)arg1)->parentDepth();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreePos_edge(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreePos *arg1 = (stree::STreePos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::STreeEdge *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"STreePos_edge",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreePos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreePos_edge" "', argument " "1"" of type '" "stree::STreePos *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreePos * >(argp1);
  result = (stree::STreeEdge *) &(arg1)->edge();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stree__STreeEdge, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreePos_suffixLink(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreePos *arg1 = (stree::STreePos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"STreePos_suffixLink",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreePos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreePos_suffixLink" "', argument " "1"" of type '" "stree::STreePos *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreePos * >(argp1);
  (arg1)->suffixLink();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreePos_addChar(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreePos *arg1 = (stree::STreePos *) 0 ;
  stree::Char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreePos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreePos_addChar" "', argument " "1"" of type '" "stree::STreePos *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreePos * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "STreePos_addChar" "', argument " "2"" of type '" "stree::Char""'");
  } 
  arg2 = static_cast< stree::Char >(val2);
  (arg1)->addChar(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreePos_addString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreePos *arg1 = (stree::STreePos *) 0 ;
  stree::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreePos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreePos_addString" "', argument " "1"" of type '" "stree::STreePos *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreePos * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "STreePos_addString" "', argument " "2"" of type '" "stree::String const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "STreePos_addString" "', argument " "2"" of type '" "stree::String const &""'"); 
  }
  arg2 = reinterpret_cast< stree::String * >(argp2);
  (arg1)->addString((stree::String const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreePos_string(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreePos *arg1 = (stree::STreePos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::String result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreePos_string",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreePos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreePos_string" "', argument " "1"" of type '" "stree::STreePos const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreePos * >(argp1);
  result = ((stree::STreePos const *)arg1)->string();
  resultobj = SWIG_NewPointerObj((new stree::String(static_cast< const stree::String& >(result))), SWIGTYPE_p_tom__Sequence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_STreePos_label(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreePos *arg1 = (stree::STreePos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::String result;
  
  if (!SWIG_Python_UnpackTuple(args,"STreePos_label",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreePos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "STreePos_label" "', argument " "1"" of type '" "stree::STreePos const *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreePos * >(argp1);
  result = ((stree::STreePos const *)arg1)->label();
  resultobj = SWIG_NewPointerObj((new stree::String(static_cast< const stree::String& >(result))), SWIGTYPE_p_tom__Sequence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_STreePos(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STreePos *arg1 = (stree::STreePos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"delete_STreePos",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__STreePos, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_STreePos" "', argument " "1"" of type '" "stree::STreePos *""'"); 
  }
  arg1 = reinterpret_cast< stree::STreePos * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_PrefixIterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree const > tempshared1 ;
  std::shared_ptr< stree::STree const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::PrefixIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_PrefixIterator",1,1,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PrefixIterator" "', argument " "1"" of type '" "stree::STree const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (stree::PrefixIterator *)new stree::PrefixIterator((stree::STree const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stree__PrefixIterator, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_PrefixIterator_next(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::PrefixIterator *arg1 = (stree::PrefixIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"PrefixIterator_next",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__PrefixIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PrefixIterator_next" "', argument " "1"" of type '" "stree::PrefixIterator *""'"); 
  }
  arg1 = reinterpret_cast< stree::PrefixIterator * >(argp1);
  (arg1)->next();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PrefixIterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::PrefixIterator *arg1 = (stree::PrefixIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"delete_PrefixIterator",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__PrefixIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PrefixIterator" "', argument " "1"" of type '" "stree::PrefixIterator *""'"); 
  }
  arg1 = reinterpret_cast< stree::PrefixIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_PostfixIterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree const > tempshared1 ;
  std::shared_ptr< stree::STree const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::PostfixIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_PostfixIterator",1,1,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PostfixIterator" "', argument " "1"" of type '" "stree::STree const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (stree::PostfixIterator *)new stree::PostfixIterator((stree::STree const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stree__PostfixIterator, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_PostfixIterator_next(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::PostfixIterator *arg1 = (stree::PostfixIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"PostfixIterator_next",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__PostfixIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PostfixIterator_next" "', argument " "1"" of type '" "stree::PostfixIterator *""'"); 
  }
  arg1 = reinterpret_cast< stree::PostfixIterator * >(argp1);
  (arg1)->next();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PostfixIterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::PostfixIterator *arg1 = (stree::PostfixIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"delete_PostfixIterator",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__PostfixIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PostfixIterator" "', argument " "1"" of type '" "stree::PostfixIterator *""'"); 
  }
  arg1 = reinterpret_cast< stree::PostfixIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_DFSIterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree const > tempshared1 ;
  std::shared_ptr< stree::STree const > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  stree::DFSIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_DFSIterator",1,1,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DFSIterator" "', argument " "1"" of type '" "stree::STree const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (stree::DFSIterator *)new stree::DFSIterator((stree::STree const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_stree__DFSIterator, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_DFSIterator_next(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::DFSIterator *arg1 = (stree::DFSIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"DFSIterator_next",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__DFSIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFSIterator_next" "', argument " "1"" of type '" "stree::DFSIterator *""'"); 
  }
  arg1 = reinterpret_cast< stree::DFSIterator * >(argp1);
  (arg1)->next();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFSIterator_isFirstVisit(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::DFSIterator *arg1 = (stree::DFSIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args,"DFSIterator_isFirstVisit",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__DFSIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFSIterator_isFirstVisit" "', argument " "1"" of type '" "stree::DFSIterator *""'"); 
  }
  arg1 = reinterpret_cast< stree::DFSIterator * >(argp1);
  result = (bool)(arg1)->isFirstVisit();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DFSIterator_setUpPass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::DFSIterator *arg1 = (stree::DFSIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"DFSIterator_setUpPass",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__DFSIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DFSIterator_setUpPass" "', argument " "1"" of type '" "stree::DFSIterator *""'"); 
  }
  arg1 = reinterpret_cast< stree::DFSIterator * >(argp1);
  (arg1)->setUpPass();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DFSIterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::DFSIterator *arg1 = (stree::DFSIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"delete_DFSIterator",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_stree__DFSIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DFSIterator" "', argument " "1"" of type '" "stree::DFSIterator *""'"); 
  }
  arg1 = reinterpret_cast< stree::DFSIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_reverseSequences(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::shared_ptr< tom::Sequences > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "reverseSequences" "', argument " "1"" of type '" "std::shared_ptr< tom::Sequences >""'"); 
    }
    if (argp1) arg1 = *(reinterpret_cast< std::shared_ptr< tom::Sequences > * >(argp1));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::shared_ptr< tom::Sequences > * >(argp1);
  }
  tom::reverseSequences(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_coreSequences__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree const > tempshared1 ;
  std::shared_ptr< stree::STree const > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  std::shared_ptr< tom::Sequences > result;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "coreSequences" "', argument " "1"" of type '" "stree::STree const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "coreSequences" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "coreSequences" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "coreSequences" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "coreSequences" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_bool(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "coreSequences" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  result = tom::coreSequences((stree::STree const *)arg1,arg2,arg3,arg4,arg5,arg6);
  {
    std::shared_ptr<  tom::Sequences > *smartresult = result ? new std::shared_ptr<  tom::Sequences >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_coreSequences__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree const > tempshared1 ;
  std::shared_ptr< stree::STree const > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  std::shared_ptr< tom::Sequences > result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "coreSequences" "', argument " "1"" of type '" "stree::STree const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "coreSequences" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "coreSequences" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "coreSequences" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "coreSequences" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = tom::coreSequences((stree::STree const *)arg1,arg2,arg3,arg4,arg5);
  {
    std::shared_ptr<  tom::Sequences > *smartresult = result ? new std::shared_ptr<  tom::Sequences >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_coreSequences__SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree const > tempshared1 ;
  std::shared_ptr< stree::STree const > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  std::shared_ptr< tom::Sequences > result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "coreSequences" "', argument " "1"" of type '" "stree::STree const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "coreSequences" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "coreSequences" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "coreSequences" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = tom::coreSequences((stree::STree const *)arg1,arg2,arg3,arg4);
  {
    std::shared_ptr<  tom::Sequences > *smartresult = result ? new std::shared_ptr<  tom::Sequences >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_coreSequences__SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree const > tempshared1 ;
  std::shared_ptr< stree::STree const > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::shared_ptr< tom::Sequences > result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "coreSequences" "', argument " "1"" of type '" "stree::STree const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "coreSequences" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "coreSequences" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = tom::coreSequences((stree::STree const *)arg1,arg2,arg3);
  {
    std::shared_ptr<  tom::Sequences > *smartresult = result ? new std::shared_ptr<  tom::Sequences >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_coreSequences__SWIG_4(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree const > tempshared1 ;
  std::shared_ptr< stree::STree const > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::shared_ptr< tom::Sequences > result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "coreSequences" "', argument " "1"" of type '" "stree::STree const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "coreSequences" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = tom::coreSequences((stree::STree const *)arg1,arg2);
  {
    std::shared_ptr<  tom::Sequences > *smartresult = result ? new std::shared_ptr<  tom::Sequences >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_coreSequences__SWIG_5(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree const > tempshared1 ;
  std::shared_ptr< stree::STree const > *smartarg1 = 0 ;
  std::shared_ptr< tom::Sequences > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "coreSequences" "', argument " "1"" of type '" "stree::STree const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = tom::coreSequences((stree::STree const *)arg1);
  {
    std::shared_ptr<  tom::Sequences > *smartresult = result ? new std::shared_ptr<  tom::Sequences >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_coreSequences(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"coreSequences",0,6,argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    return _wrap_coreSequences__SWIG_5(self, argc, argv);
  }
  if (argc == 2) {
    return _wrap_coreSequences__SWIG_4(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_coreSequences__SWIG_3(self, argc, argv);
  }
  if (argc == 4) {
    return _wrap_coreSequences__SWIG_2(self, argc, argv);
  }
  if (argc == 5) {
    return _wrap_coreSequences__SWIG_1(self, argc, argv);
  }
  if (argc == 6) {
    return _wrap_coreSequences__SWIG_0(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'coreSequences'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::coreSequences(stree::STree const *,int,int,int,int,bool)\n"
    "    tom::coreSequences(stree::STree const *,int,int,int,int)\n"
    "    tom::coreSequences(stree::STree const *,int,int,int)\n"
    "    tom::coreSequences(stree::STree const *,int,int)\n"
    "    tom::coreSequences(stree::STree const *,int)\n"
    "    tom::coreSequences(stree::STree const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_getIndicativeSequenceNodes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  stree::STree *arg1 = (stree::STree *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree > tempshared1 ;
  std::shared_ptr< stree::STree > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::shared_ptr< std::vector< stree::Nidx,std::allocator< stree::Nidx > > > result;
  
  if (!SWIG_Python_UnpackTuple(args,"getIndicativeSequenceNodes",3,3,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getIndicativeSequenceNodes" "', argument " "1"" of type '" "stree::STree *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp1);
      arg1 = const_cast< stree::STree * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "getIndicativeSequenceNodes" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "getIndicativeSequenceNodes" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = tom::getIndicativeSequenceNodes(arg1,arg2,arg3);
  {
    std::shared_ptr<  std::vector<stree::Nidx> > *smartresult = result ? new std::shared_ptr<  std::vector<stree::Nidx> >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ApproxNormalCDFInverse(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ApproxNormalCDFInverse" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)tom::ApproxNormalCDFInverse(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_Estimator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::shared_ptr< stree::STree > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::shared_ptr< stree::STree > tempshared1 ;
  PyObject *swig_obj[1] ;
  tom::Estimator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"new_Estimator",1,1,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_stree__STree_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Estimator" "', argument " "1"" of type '" "std::shared_ptr< stree::STree > const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp1) tempshared1 = *reinterpret_cast< std::shared_ptr< stree::STree > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< stree::STree > * >(argp1);
      arg1 = &tempshared1;
    } else {
      arg1 = (argp1) ? reinterpret_cast< std::shared_ptr< stree::STree > * >(argp1) : &tempshared1;
    }
  }
  result = (tom::Estimator *)new tom::Estimator((std::shared_ptr< stree::STree > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tom__Estimator, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_Estimator_nU(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!SWIG_Python_UnpackTuple(args,"Estimator_nU",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_nU" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  result = (unsigned int)(arg1)->nU();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_nO(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!SWIG_Python_UnpackTuple(args,"Estimator_nO",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_nO" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  result = (unsigned int)(arg1)->nO();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_f__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  tom::Sequence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_f" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Estimator_f" "', argument " "2"" of type '" "tom::Sequence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Estimator_f" "', argument " "2"" of type '" "tom::Sequence const &""'"); 
  }
  arg2 = reinterpret_cast< tom::Sequence * >(argp2);
  result = (double)(arg1)->f((tom::Sequence const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_v__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  tom::Sequence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_v" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_tom__Sequence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Estimator_v" "', argument " "2"" of type '" "tom::Sequence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Estimator_v" "', argument " "2"" of type '" "tom::Sequence const &""'"); 
  }
  arg2 = reinterpret_cast< tom::Sequence * >(argp2);
  result = (double)(arg1)->v((tom::Sequence const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_f__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  Eigen::MatrixXd *arg2 = 0 ;
  tom::Sequences *arg3 = 0 ;
  tom::Sequences *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::shared_ptr< tom::Sequences const > tempshared3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  std::shared_ptr< tom::Sequences const > tempshared4 ;
  
  {
    arg2 = new Eigen::MatrixXd();
  }
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_f" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp3, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Estimator_f" "', argument " "3"" of type '" "tom::Sequences const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Estimator_f" "', argument " "3"" of type '" "tom::Sequences const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp3);
      delete reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp3);
      arg3 = const_cast< tom::Sequences * >(tempshared3.get());
    } else {
      arg3 = const_cast< tom::Sequences * >(reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp3)->get());
    }
  }
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp4, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Estimator_f" "', argument " "4"" of type '" "tom::Sequences const &""'"); 
    }
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Estimator_f" "', argument " "4"" of type '" "tom::Sequences const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared4 = *reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp4);
      delete reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp4);
      arg4 = const_cast< tom::Sequences * >(tempshared4.get());
    } else {
      arg4 = const_cast< tom::Sequences * >(reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp4)->get());
    }
  }
  (arg1)->f(*arg2,(tom::Sequences const &)*arg3,(tom::Sequences const &)*arg4);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg2->rows(), arg2->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg2->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg2; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg2, clean<Eigen::MatrixXd *>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_f__SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  Eigen::MatrixXd *arg2 = 0 ;
  tom::Sequences *arg3 = 0 ;
  tom::Sequences *arg4 = 0 ;
  tom::Symbol arg5 ;
  tom::Symbol arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::shared_ptr< tom::Sequences const > tempshared3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  std::shared_ptr< tom::Sequences const > tempshared4 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  
  {
    arg2 = new Eigen::MatrixXd();
  }
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_f" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp3, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Estimator_f" "', argument " "3"" of type '" "tom::Sequences const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Estimator_f" "', argument " "3"" of type '" "tom::Sequences const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp3);
      delete reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp3);
      arg3 = const_cast< tom::Sequences * >(tempshared3.get());
    } else {
      arg3 = const_cast< tom::Sequences * >(reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp3)->get());
    }
  }
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp4, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Estimator_f" "', argument " "4"" of type '" "tom::Sequences const &""'"); 
    }
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Estimator_f" "', argument " "4"" of type '" "tom::Sequences const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared4 = *reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp4);
      delete reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp4);
      arg4 = const_cast< tom::Sequences * >(tempshared4.get());
    } else {
      arg4 = const_cast< tom::Sequences * >(reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp4)->get());
    }
  }
  ecode5 = SWIG_AsVal_int(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Estimator_f" "', argument " "5"" of type '" "tom::Symbol""'");
  } 
  arg5 = static_cast< tom::Symbol >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Estimator_f" "', argument " "6"" of type '" "tom::Symbol""'");
  } 
  arg6 = static_cast< tom::Symbol >(val6);
  (arg1)->f(*arg2,(tom::Sequences const &)*arg3,(tom::Sequences const &)*arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg2->rows(), arg2->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg2->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg2; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg2, clean<Eigen::MatrixXd *>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_f__SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  Eigen::MatrixXd *arg2 = 0 ;
  tom::Sequences *arg3 = 0 ;
  tom::Sequences *arg4 = 0 ;
  tom::Symbol arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::shared_ptr< tom::Sequences const > tempshared3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  std::shared_ptr< tom::Sequences const > tempshared4 ;
  int val5 ;
  int ecode5 = 0 ;
  
  {
    arg2 = new Eigen::MatrixXd();
  }
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_f" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp3, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Estimator_f" "', argument " "3"" of type '" "tom::Sequences const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Estimator_f" "', argument " "3"" of type '" "tom::Sequences const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp3);
      delete reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp3);
      arg3 = const_cast< tom::Sequences * >(tempshared3.get());
    } else {
      arg3 = const_cast< tom::Sequences * >(reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp3)->get());
    }
  }
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp4, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Estimator_f" "', argument " "4"" of type '" "tom::Sequences const &""'"); 
    }
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Estimator_f" "', argument " "4"" of type '" "tom::Sequences const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared4 = *reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp4);
      delete reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp4);
      arg4 = const_cast< tom::Sequences * >(tempshared4.get());
    } else {
      arg4 = const_cast< tom::Sequences * >(reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp4)->get());
    }
  }
  ecode5 = SWIG_AsVal_int(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Estimator_f" "', argument " "5"" of type '" "tom::Symbol""'");
  } 
  arg5 = static_cast< tom::Symbol >(val5);
  (arg1)->f(*arg2,(tom::Sequences const &)*arg3,(tom::Sequences const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg2->rows(), arg2->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg2->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg2; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg2, clean<Eigen::MatrixXd *>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_f(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Estimator_f",0,5,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    return _wrap_Estimator_f__SWIG_0(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_Estimator_f__SWIG_1(self, argc, argv);
  }
  if (argc == 4) {
    return _wrap_Estimator_f__SWIG_3(self, argc, argv);
  }
  if (argc == 5) {
    return _wrap_Estimator_f__SWIG_2(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Estimator_f'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Estimator::f(tom::Sequence const &)\n"
    "    tom::Estimator::f(Eigen::MatrixXd &,tom::Sequences const &,tom::Sequences const &)\n"
    "    tom::Estimator::f(Eigen::MatrixXd &,tom::Sequences const &,tom::Sequences const &,tom::Symbol,tom::Symbol)\n"
    "    tom::Estimator::f(Eigen::MatrixXd &,tom::Sequences const &,tom::Sequences const &,tom::Symbol)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Estimator_v__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  Eigen::MatrixXd *arg2 = 0 ;
  tom::Sequences *arg3 = 0 ;
  tom::Sequences *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::shared_ptr< tom::Sequences const > tempshared3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  std::shared_ptr< tom::Sequences const > tempshared4 ;
  
  {
    arg2 = new Eigen::MatrixXd();
  }
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_v" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp3, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Estimator_v" "', argument " "3"" of type '" "tom::Sequences const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Estimator_v" "', argument " "3"" of type '" "tom::Sequences const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp3);
      delete reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp3);
      arg3 = const_cast< tom::Sequences * >(tempshared3.get());
    } else {
      arg3 = const_cast< tom::Sequences * >(reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp3)->get());
    }
  }
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp4, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Estimator_v" "', argument " "4"" of type '" "tom::Sequences const &""'"); 
    }
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Estimator_v" "', argument " "4"" of type '" "tom::Sequences const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared4 = *reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp4);
      delete reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp4);
      arg4 = const_cast< tom::Sequences * >(tempshared4.get());
    } else {
      arg4 = const_cast< tom::Sequences * >(reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp4)->get());
    }
  }
  (arg1)->v(*arg2,(tom::Sequences const &)*arg3,(tom::Sequences const &)*arg4);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg2->rows(), arg2->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg2->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg2; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg2, clean<Eigen::MatrixXd *>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_v__SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  Eigen::MatrixXd *arg2 = 0 ;
  tom::Sequences *arg3 = 0 ;
  tom::Sequences *arg4 = 0 ;
  tom::Symbol arg5 ;
  tom::Symbol arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::shared_ptr< tom::Sequences const > tempshared3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  std::shared_ptr< tom::Sequences const > tempshared4 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  
  {
    arg2 = new Eigen::MatrixXd();
  }
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_v" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp3, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Estimator_v" "', argument " "3"" of type '" "tom::Sequences const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Estimator_v" "', argument " "3"" of type '" "tom::Sequences const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp3);
      delete reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp3);
      arg3 = const_cast< tom::Sequences * >(tempshared3.get());
    } else {
      arg3 = const_cast< tom::Sequences * >(reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp3)->get());
    }
  }
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp4, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Estimator_v" "', argument " "4"" of type '" "tom::Sequences const &""'"); 
    }
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Estimator_v" "', argument " "4"" of type '" "tom::Sequences const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared4 = *reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp4);
      delete reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp4);
      arg4 = const_cast< tom::Sequences * >(tempshared4.get());
    } else {
      arg4 = const_cast< tom::Sequences * >(reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp4)->get());
    }
  }
  ecode5 = SWIG_AsVal_int(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Estimator_v" "', argument " "5"" of type '" "tom::Symbol""'");
  } 
  arg5 = static_cast< tom::Symbol >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Estimator_v" "', argument " "6"" of type '" "tom::Symbol""'");
  } 
  arg6 = static_cast< tom::Symbol >(val6);
  (arg1)->v(*arg2,(tom::Sequences const &)*arg3,(tom::Sequences const &)*arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg2->rows(), arg2->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg2->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg2; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg2, clean<Eigen::MatrixXd *>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_v__SWIG_3(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  Eigen::MatrixXd *arg2 = 0 ;
  tom::Sequences *arg3 = 0 ;
  tom::Sequences *arg4 = 0 ;
  tom::Symbol arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::shared_ptr< tom::Sequences const > tempshared3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  std::shared_ptr< tom::Sequences const > tempshared4 ;
  int val5 ;
  int ecode5 = 0 ;
  
  {
    arg2 = new Eigen::MatrixXd();
  }
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_v" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp3, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Estimator_v" "', argument " "3"" of type '" "tom::Sequences const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Estimator_v" "', argument " "3"" of type '" "tom::Sequences const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp3);
      delete reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp3);
      arg3 = const_cast< tom::Sequences * >(tempshared3.get());
    } else {
      arg3 = const_cast< tom::Sequences * >(reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp3)->get());
    }
  }
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp4, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Estimator_v" "', argument " "4"" of type '" "tom::Sequences const &""'"); 
    }
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Estimator_v" "', argument " "4"" of type '" "tom::Sequences const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared4 = *reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp4);
      delete reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp4);
      arg4 = const_cast< tom::Sequences * >(tempshared4.get());
    } else {
      arg4 = const_cast< tom::Sequences * >(reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp4)->get());
    }
  }
  ecode5 = SWIG_AsVal_int(swig_obj[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Estimator_v" "', argument " "5"" of type '" "tom::Symbol""'");
  } 
  arg5 = static_cast< tom::Symbol >(val5);
  (arg1)->v(*arg2,(tom::Sequences const &)*arg3,(tom::Sequences const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg2->rows(), arg2->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg2->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg2; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg2, clean<Eigen::MatrixXd *>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_v(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Estimator_v",0,5,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 2) {
    return _wrap_Estimator_v__SWIG_0(self, argc, argv);
  }
  if (argc == 3) {
    return _wrap_Estimator_v__SWIG_1(self, argc, argv);
  }
  if (argc == 4) {
    return _wrap_Estimator_v__SWIG_3(self, argc, argv);
  }
  if (argc == 5) {
    return _wrap_Estimator_v__SWIG_2(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Estimator_v'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Estimator::v(tom::Sequence const &)\n"
    "    tom::Estimator::v(Eigen::MatrixXd &,tom::Sequences const &,tom::Sequences const &)\n"
    "    tom::Estimator::v(Eigen::MatrixXd &,tom::Sequences const &,tom::Sequences const &,tom::Symbol,tom::Symbol)\n"
    "    tom::Estimator::v(Eigen::MatrixXd &,tom::Sequences const &,tom::Sequences const &,tom::Symbol)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Estimator_fv__SWIG_0(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  Eigen::MatrixXd *arg2 = 0 ;
  Eigen::MatrixXd *arg3 = 0 ;
  tom::Sequences *arg4 = 0 ;
  tom::Sequences *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  std::shared_ptr< tom::Sequences const > tempshared4 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  std::shared_ptr< tom::Sequences const > tempshared5 ;
  
  {
    arg2 = new Eigen::MatrixXd();
  }
  {
    arg3 = new Eigen::MatrixXd();
  }
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_fv" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp4, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Estimator_fv" "', argument " "4"" of type '" "tom::Sequences const &""'"); 
    }
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Estimator_fv" "', argument " "4"" of type '" "tom::Sequences const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared4 = *reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp4);
      delete reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp4);
      arg4 = const_cast< tom::Sequences * >(tempshared4.get());
    } else {
      arg4 = const_cast< tom::Sequences * >(reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp4)->get());
    }
  }
  {
    int newmem = 0;
    res5 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp5, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Estimator_fv" "', argument " "5"" of type '" "tom::Sequences const &""'"); 
    }
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Estimator_fv" "', argument " "5"" of type '" "tom::Sequences const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared5 = *reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp5);
      delete reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp5);
      arg5 = const_cast< tom::Sequences * >(tempshared5.get());
    } else {
      arg5 = const_cast< tom::Sequences * >(reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp5)->get());
    }
  }
  (arg1)->fv(*arg2,*arg3,(tom::Sequences const &)*arg4,(tom::Sequences const &)*arg5);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg2->rows(), arg2->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg2->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg2; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg2, clean<Eigen::MatrixXd *>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  {
    npy_intp dims[2] = {
      arg3->rows(), arg3->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg3->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg3; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg3, clean<Eigen::MatrixXd *>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_fv__SWIG_1(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  Eigen::MatrixXd *arg2 = 0 ;
  Eigen::MatrixXd *arg3 = 0 ;
  tom::Sequences *arg4 = 0 ;
  tom::Sequences *arg5 = 0 ;
  tom::Symbol arg6 ;
  tom::Symbol arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  std::shared_ptr< tom::Sequences const > tempshared4 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  std::shared_ptr< tom::Sequences const > tempshared5 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  
  {
    arg2 = new Eigen::MatrixXd();
  }
  {
    arg3 = new Eigen::MatrixXd();
  }
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_fv" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp4, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Estimator_fv" "', argument " "4"" of type '" "tom::Sequences const &""'"); 
    }
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Estimator_fv" "', argument " "4"" of type '" "tom::Sequences const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared4 = *reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp4);
      delete reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp4);
      arg4 = const_cast< tom::Sequences * >(tempshared4.get());
    } else {
      arg4 = const_cast< tom::Sequences * >(reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp4)->get());
    }
  }
  {
    int newmem = 0;
    res5 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp5, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Estimator_fv" "', argument " "5"" of type '" "tom::Sequences const &""'"); 
    }
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Estimator_fv" "', argument " "5"" of type '" "tom::Sequences const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared5 = *reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp5);
      delete reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp5);
      arg5 = const_cast< tom::Sequences * >(tempshared5.get());
    } else {
      arg5 = const_cast< tom::Sequences * >(reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp5)->get());
    }
  }
  ecode6 = SWIG_AsVal_int(swig_obj[3], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Estimator_fv" "', argument " "6"" of type '" "tom::Symbol""'");
  } 
  arg6 = static_cast< tom::Symbol >(val6);
  ecode7 = SWIG_AsVal_int(swig_obj[4], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Estimator_fv" "', argument " "7"" of type '" "tom::Symbol""'");
  } 
  arg7 = static_cast< tom::Symbol >(val7);
  (arg1)->fv(*arg2,*arg3,(tom::Sequences const &)*arg4,(tom::Sequences const &)*arg5,arg6,arg7);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg2->rows(), arg2->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg2->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg2; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg2, clean<Eigen::MatrixXd *>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  {
    npy_intp dims[2] = {
      arg3->rows(), arg3->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg3->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg3; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg3, clean<Eigen::MatrixXd *>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_fv__SWIG_2(PyObject *self, int nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  Eigen::MatrixXd *arg2 = 0 ;
  Eigen::MatrixXd *arg3 = 0 ;
  tom::Sequences *arg4 = 0 ;
  tom::Sequences *arg5 = 0 ;
  tom::Symbol arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  std::shared_ptr< tom::Sequences const > tempshared4 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  std::shared_ptr< tom::Sequences const > tempshared5 ;
  int val6 ;
  int ecode6 = 0 ;
  
  {
    arg2 = new Eigen::MatrixXd();
  }
  {
    arg3 = new Eigen::MatrixXd();
  }
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_fv" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp4, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Estimator_fv" "', argument " "4"" of type '" "tom::Sequences const &""'"); 
    }
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Estimator_fv" "', argument " "4"" of type '" "tom::Sequences const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared4 = *reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp4);
      delete reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp4);
      arg4 = const_cast< tom::Sequences * >(tempshared4.get());
    } else {
      arg4 = const_cast< tom::Sequences * >(reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp4)->get());
    }
  }
  {
    int newmem = 0;
    res5 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp5, SWIGTYPE_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Estimator_fv" "', argument " "5"" of type '" "tom::Sequences const &""'"); 
    }
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Estimator_fv" "', argument " "5"" of type '" "tom::Sequences const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared5 = *reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp5);
      delete reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp5);
      arg5 = const_cast< tom::Sequences * >(tempshared5.get());
    } else {
      arg5 = const_cast< tom::Sequences * >(reinterpret_cast< std::shared_ptr< const tom::Sequences > * >(argp5)->get());
    }
  }
  ecode6 = SWIG_AsVal_int(swig_obj[3], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Estimator_fv" "', argument " "6"" of type '" "tom::Symbol""'");
  } 
  arg6 = static_cast< tom::Symbol >(val6);
  (arg1)->fv(*arg2,*arg3,(tom::Sequences const &)*arg4,(tom::Sequences const &)*arg5,arg6);
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      arg2->rows(), arg2->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg2->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg2; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg2, clean<Eigen::MatrixXd *>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  {
    npy_intp dims[2] = {
      arg3->rows(), arg3->cols() 
    };
    PyObject* res = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) arg3->data(), 0, NPY_ARRAY_FARRAY, NULL);
    if (!res) {
      delete arg3; SWIG_fail; 
    }
    array_setbase(res, encapsulate(arg3, clean<Eigen::MatrixXd *>));
    resultobj = SWIG_Python_AppendOutput(resultobj,res);
  }
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_fv(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  
  if (!(argc = SWIG_Python_UnpackTuple(args,"Estimator_fv",0,5,argv+1))) SWIG_fail;
  argv[0] = self;
  if (argc == 3) {
    return _wrap_Estimator_fv__SWIG_0(self, argc, argv);
  }
  if (argc == 4) {
    return _wrap_Estimator_fv__SWIG_2(self, argc, argv);
  }
  if (argc == 5) {
    return _wrap_Estimator_fv__SWIG_1(self, argc, argv);
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Estimator_fv'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tom::Estimator::fv(Eigen::MatrixXd &,Eigen::MatrixXd &,tom::Sequences const &,tom::Sequences const &)\n"
    "    tom::Estimator::fv(Eigen::MatrixXd &,Eigen::MatrixXd &,tom::Sequences const &,tom::Sequences const &,tom::Symbol,tom::Symbol)\n"
    "    tom::Estimator::fv(Eigen::MatrixXd &,Eigen::MatrixXd &,tom::Sequences const &,tom::Sequences const &,tom::Symbol)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Estimator_nO__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_nO__set" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Estimator_nO__set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->nO_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_nO__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args,"Estimator_nO__get",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_nO__get" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  result = (int) ((arg1)->nO_);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_nU__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_nU__set" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Estimator_nU__set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->nU_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_nU__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args,"Estimator_nU__get",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_nU__get" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  result = (int) ((arg1)->nU_);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_len__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_len__set" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Estimator_len__set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->len_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_len__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!SWIG_Python_UnpackTuple(args,"Estimator_len__get",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_len__get" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  result = (unsigned int) ((arg1)->len_);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_uProbs__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  Eigen::VectorXd *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Eigen::Matrix< double,Eigen::Dynamic,1 > temp2 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_uProbs__set" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  {
    PyArrayObject * ary = obj_to_array_no_conversion(swig_obj[0], NPY_DOUBLE);
    if (ary == NULL) SWIG_fail;
    if(array_numdims(ary) != 2) {
      PyErr_SetString(PyExc_ValueError, "array must be 2-dimensional"); SWIG_fail; 
    }
    int rows = array_size(ary, 0), cols = array_size(ary, 1);
    int outer = array_stride(ary,1)/PyArray_ITEMSIZE(ary), inner = array_stride(ary,0)/PyArray_ITEMSIZE(ary);
    temp2 = Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>, 0, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic> > ((double*) array_data(ary), rows, cols, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(outer, inner));
    arg2 = &temp2;
  }
  if (arg1) (arg1)->uProbs_ = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_uProbs__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Eigen::VectorXd *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args,"Estimator_uProbs__get",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_uProbs__get" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  result = (Eigen::VectorXd *) & ((arg1)->uProbs_);
  {
    npy_intp dims[2] = {
      result->rows(), result->cols() 
    };
    resultobj = PyArray_New(&PyArray_Type, 2, dims, NPY_DOUBLE, NULL, (void*) const_cast<Eigen::VectorXd *>(result)->data(), 0, NPY_ARRAY_FARRAY_RO, NULL);
    if (!resultobj) SWIG_fail;
    array_setbase(resultobj,encapsulate(result, NULL));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_nPseudoCounts__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_nPseudoCounts__set" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Estimator_nPseudoCounts__set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->nPseudoCounts_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_nPseudoCounts__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"Estimator_nPseudoCounts__get",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_nPseudoCounts__get" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  result = (double) ((arg1)->nPseudoCounts_);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_zConfidenceIntervalSize__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_zConfidenceIntervalSize__set" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Estimator_zConfidenceIntervalSize__set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->zConfidenceIntervalSize_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_zConfidenceIntervalSize__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"Estimator_zConfidenceIntervalSize__get",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_zConfidenceIntervalSize__get" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  result = (double) ((arg1)->zConfidenceIntervalSize_);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_addToVariance__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_addToVariance__set" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Estimator_addToVariance__set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->addToVariance_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_addToVariance__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"Estimator_addToVariance__get",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_addToVariance__get" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  result = (double) ((arg1)->addToVariance_);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_minimumVariance__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_minimumVariance__set" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Estimator_minimumVariance__set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->minimumVariance_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_minimumVariance__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"Estimator_minimumVariance__get",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_minimumVariance__get" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  result = (double) ((arg1)->minimumVariance_);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_applyExponentToVariance__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_applyExponentToVariance__set" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Estimator_applyExponentToVariance__set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->applyExponentToVariance_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Estimator_applyExponentToVariance__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args,"Estimator_applyExponentToVariance__get",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Estimator_applyExponentToVariance__get" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  result = (double) ((arg1)->applyExponentToVariance_);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Estimator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Estimator *arg1 = (tom::Estimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!SWIG_Python_UnpackTuple(args,"delete_Estimator",0,0,0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_tom__Estimator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Estimator" "', argument " "1"" of type '" "tom::Estimator *""'"); 
  }
  arg1 = reinterpret_cast< tom::Estimator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sharpenEfficiency(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  tom::Oom *arg1 = 0 ;
  stree::STree *arg2 = 0 ;
  std::shared_ptr< std::vector< stree::Nidx,std::allocator< stree::Nidx > > > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< tom::Oom const > tempshared1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::shared_ptr< stree::STree > tempshared2 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  std::shared_ptr< tom::Oom > result;
  
  if (!SWIG_Python_UnpackTuple(args,"sharpenEfficiency",3,3,swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_tom__Oom_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sharpenEfficiency" "', argument " "1"" of type '" "tom::Oom const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sharpenEfficiency" "', argument " "1"" of type '" "tom::Oom const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1);
      arg1 = const_cast< tom::Oom * >(tempshared1.get());
    } else {
      arg1 = const_cast< tom::Oom * >(reinterpret_cast< std::shared_ptr< const tom::Oom > * >(argp1)->get());
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_stree__STree_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sharpenEfficiency" "', argument " "2"" of type '" "stree::STree &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sharpenEfficiency" "', argument " "2"" of type '" "stree::STree &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp2);
      delete reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp2);
      arg2 = const_cast< stree::STree * >(tempshared2.get());
    } else {
      arg2 = const_cast< stree::STree * >(reinterpret_cast< std::shared_ptr<  stree::STree > * >(argp2)->get());
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sharpenEfficiency" "', argument " "3"" of type '" "std::shared_ptr< std::vector< stree::Nidx,std::allocator< stree::Nidx > > >""'"); 
    }
    if (argp3) arg3 = *(reinterpret_cast< std::shared_ptr< std::vector< stree::Nidx,std::allocator< stree::Nidx > > > * >(argp3));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< std::shared_ptr< std::vector< stree::Nidx,std::allocator< stree::Nidx > > > * >(argp3);
  }
  result = tom::sharpenEfficiency((tom::Oom const &)*arg1,*arg2,arg3);
  {
    std::shared_ptr<  tom::Oom > *smartresult = result ? new std::shared_ptr<  tom::Oom >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_tom__Oom_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"ios_base_boolalpha_get", _wrap_ios_base_boolalpha_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_dec_get", _wrap_ios_base_dec_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_fixed_get", _wrap_ios_base_fixed_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_hex_get", _wrap_ios_base_hex_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_internal_get", _wrap_ios_base_internal_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_left_get", _wrap_ios_base_left_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_oct_get", _wrap_ios_base_oct_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_right_get", _wrap_ios_base_right_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_scientific_get", _wrap_ios_base_scientific_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_showbase_get", _wrap_ios_base_showbase_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_showpoint_get", _wrap_ios_base_showpoint_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_showpos_get", _wrap_ios_base_showpos_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_skipws_get", _wrap_ios_base_skipws_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_unitbuf_get", _wrap_ios_base_unitbuf_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_uppercase_get", _wrap_ios_base_uppercase_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_adjustfield_get", _wrap_ios_base_adjustfield_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_basefield_get", _wrap_ios_base_basefield_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_floatfield_get", _wrap_ios_base_floatfield_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_badbit_get", _wrap_ios_base_badbit_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_eofbit_get", _wrap_ios_base_eofbit_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_failbit_get", _wrap_ios_base_failbit_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_goodbit_get", _wrap_ios_base_goodbit_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_app_get", _wrap_ios_base_app_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_ate_get", _wrap_ios_base_ate_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_binary_get", _wrap_ios_base_binary_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_ios_base_in_get", _wrap_ios_base_ios_base_in_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_out_get", _wrap_ios_base_out_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_trunc_get", _wrap_ios_base_trunc_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_beg_get", _wrap_ios_base_beg_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_cur_get", _wrap_ios_base_cur_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_end_get", _wrap_ios_base_end_get, METH_VARARGS, NULL},
	 { (char *)"ios_base_sync_with_stdio", _wrap_ios_base_sync_with_stdio, METH_VARARGS, (char *)"\n"
		"sync_with_stdio(bool __sync=True) -> bool\n"
		"ios_base_sync_with_stdio() -> bool\n"
		""},
	 { (char *)"ios_base_xalloc", (PyCFunction)_wrap_ios_base_xalloc, METH_NOARGS, (char *)"ios_base_xalloc() -> int"},
	 { (char *)"disown_ios", (PyCFunction)_wrap_disown_ios, METH_O, NULL},
	 { (char *)"disown_ostream", (PyCFunction)_wrap_disown_ostream, METH_O, NULL},
	 { (char *)"disown_istream", (PyCFunction)_wrap_disown_istream, METH_O, NULL},
	 { (char *)"disown_iostream", (PyCFunction)_wrap_disown_iostream, METH_O, NULL},
	 { (char *)"endl", (PyCFunction)_wrap_endl, METH_O, (char *)"endl(ostream arg1) -> ostream\nswig_ptr: endl_cb_ptr"},
	 { (char *)"ends", (PyCFunction)_wrap_ends, METH_O, (char *)"ends(ostream arg1) -> ostream\nswig_ptr: ends_cb_ptr"},
	 { (char *)"flush", (PyCFunction)_wrap_flush, METH_O, (char *)"flush(ostream arg1) -> ostream\nswig_ptr: flush_cb_ptr"},
	 { (char *)"ipow", _wrap_ipow, METH_VARARGS, (char *)"ipow(int a, int b) -> int"},
	 { (char *)"normalize", (PyCFunction)_wrap_normalize, METH_O, (char *)"normalize(Eigen::DenseBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & mat) -> double"},
	 { (char *)"normalizeRows", (PyCFunction)_wrap_normalizeRows, METH_O, (char *)"normalizeRows(Eigen::DenseBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & mat) -> bool"},
	 { (char *)"normalizeCols", (PyCFunction)_wrap_normalizeCols, METH_O, (char *)"normalizeCols(Eigen::DenseBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & mat) -> bool"},
	 { (char *)"kron", _wrap_kron, METH_VARARGS, (char *)"kron(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & A, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & B)"},
	 { (char *)"pinvFast", _wrap_pinvFast, METH_VARARGS, (char *)"\n"
		"pinvFast(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & M, std::string const & method)\n"
		"pinvFast(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & M)\n"
		""},
	 { (char *)"pinv", _wrap_pinv, METH_VARARGS, (char *)"\n"
		"pinv(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & M, double tolerance=-1, std::string const & method)\n"
		"pinv(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & M, double tolerance=-1)\n"
		"pinv(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & M)\n"
		""},
	 { (char *)"eigensolve", _wrap_eigensolve, METH_VARARGS, (char *)"eigensolve(Eigen::VectorXcd & eigenvals, Eigen::MatrixXcd & eigenvecs, Eigen::MatrixXd const & M)"},
	 { (char *)"solveFastOLS", _wrap_solveFastOLS, METH_VARARGS, (char *)"\n"
		"solveFastOLS(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & A, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & M, bool transposed=False, std::string const & method)\n"
		"solveFastOLS(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & A, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & M, bool transposed=False)\n"
		"solveFastOLS(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & A, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & M)\n"
		""},
	 { (char *)"solveOLS", _wrap_solveOLS, METH_VARARGS, (char *)"\n"
		"solveOLS(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & A, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & M, bool transposed=False, std::string const & method)\n"
		"solveOLS(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & A, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & M, bool transposed=False)\n"
		"solveOLS(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & A, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & M)\n"
		""},
	 { (char *)"solveFastWLS", _wrap_solveFastWLS, METH_VARARGS, (char *)"\n"
		"solveFastWLS(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & A, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & M, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & W, bool transposed=False, std::string const & method)\n"
		"solveFastWLS(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & A, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & M, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & W, bool transposed=False)\n"
		"solveFastWLS(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & A, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & M, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & W)\n"
		""},
	 { (char *)"solveWLS", _wrap_solveWLS, METH_VARARGS, (char *)"\n"
		"solveWLS(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & A, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & M, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & sqrtW, bool transposed=False, std::string const & method)\n"
		"solveWLS(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & A, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & M, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & sqrtW, bool transposed=False)\n"
		"solveWLS(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & A, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & M, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & sqrtW)\n"
		""},
	 { (char *)"solveFastGLS", _wrap_solveFastGLS, METH_VARARGS, (char *)"\n"
		"solveFastGLS(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & A, Eigen::MatrixXd const & M, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & W, bool transposed=False, std::string const & method)\n"
		"solveFastGLS(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & A, Eigen::MatrixXd const & M, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & W, bool transposed=False)\n"
		"solveFastGLS(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & A, Eigen::MatrixXd const & M, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & W)\n"
		""},
	 { (char *)"solveGLS", _wrap_solveGLS, METH_VARARGS, (char *)"\n"
		"solveGLS(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & A, Eigen::MatrixXd const & M, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & S, bool transposed=False, std::string const & method)\n"
		"solveGLS(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & A, Eigen::MatrixXd const & M, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & S, bool transposed=False)\n"
		"solveGLS(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & A, Eigen::MatrixXd const & M, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & S)\n"
		""},
	 { (char *)"improveWLRA", _wrap_improveWLRA, METH_VARARGS, (char *)"\n"
		"improveWLRA(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & B, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & A, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & M, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & W, double convergenceThreshold=1e-5, int maxIterations=100, std::string const & method) -> double\n"
		"improveWLRA(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & B, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & A, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & M, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & W, double convergenceThreshold=1e-5, int maxIterations=100) -> double\n"
		"improveWLRA(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & B, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & A, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & M, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & W, double convergenceThreshold=1e-5) -> double\n"
		"improveWLRA(Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & B, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & A, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & M, Eigen::MatrixBase< Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > > const & W) -> double\n"
		""},
	 { (char *)"disown_EMStopCondition", (PyCFunction)_wrap_disown_EMStopCondition, METH_O, NULL},
	 { (char *)"reverseSequences", (PyCFunction)_wrap_reverseSequences, METH_O, (char *)"reverseSequences(std::shared_ptr< tom::Sequences > seqs)"},
	 { (char *)"coreSequences", _wrap_coreSequences, METH_VARARGS, (char *)"\n"
		"coreSequences(STree sfxTree, int minSeqLen=0, int maxSeqLen=-1, int minCounts=1, int maxCoreSeq=-1, bool unique=True) -> std::shared_ptr< tom::Sequences >\n"
		"coreSequences(STree sfxTree, int minSeqLen=0, int maxSeqLen=-1, int minCounts=1, int maxCoreSeq=-1) -> std::shared_ptr< tom::Sequences >\n"
		"coreSequences(STree sfxTree, int minSeqLen=0, int maxSeqLen=-1, int minCounts=1) -> std::shared_ptr< tom::Sequences >\n"
		"coreSequences(STree sfxTree, int minSeqLen=0, int maxSeqLen=-1) -> std::shared_ptr< tom::Sequences >\n"
		"coreSequences(STree sfxTree, int minSeqLen=0) -> std::shared_ptr< tom::Sequences >\n"
		"coreSequences(STree sfxTree) -> std::shared_ptr< tom::Sequences >\n"
		""},
	 { (char *)"getIndicativeSequenceNodes", _wrap_getIndicativeSequenceNodes, METH_VARARGS, (char *)"getIndicativeSequenceNodes(STree reverseSTree, int minIndCount, int maxIndLen) -> std::shared_ptr< std::vector< stree::Nidx,std::allocator< stree::Nidx > > >"},
	 { (char *)"ApproxNormalCDFInverse", (PyCFunction)_wrap_ApproxNormalCDFInverse, METH_O, (char *)"ApproxNormalCDFInverse(double p) -> double"},
	 { (char *)"sharpenEfficiency", _wrap_sharpenEfficiency, METH_VARARGS, (char *)"sharpenEfficiency(Oom oom, STree rStree, std::shared_ptr< std::vector< stree::Nidx,std::allocator< stree::Nidx > > > indNodes) -> std::shared_ptr< tom::Oom >"},
	 { NULL, NULL, 0, NULL }
};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_IntIntPair)
static SwigPyGetSet IntIntPair_first_getset = { _wrap_IntIntPair_first_get, _wrap_IntIntPair_first_set };
static SwigPyGetSet IntIntPair_second_getset = { _wrap_IntIntPair_second_get, _wrap_IntIntPair_second_set };
SWIGINTERN PyGetSetDef SwigPyBuiltin__std__pairT_int_int_t_getset[] = {
    { (char*) "first", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"std::pair<(int,int)>.first", (void*) &IntIntPair_first_getset }
,
    { (char*) "second", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"std::pair<(int,int)>.second", (void*) &IntIntPair_second_getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__std__pairT_int_int_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__std__pairT_int_int_t_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__std__pairT_int_int_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "tomlib.IntIntPair",                      /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_IntIntPair_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) SwigPython_std_pair_repr,      /* tp_repr */
    &SwigPyBuiltin__std__pairT_int_int_t_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__std__pairT_int_int_t_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__std__pairT_int_int_t_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__std__pairT_int_int_t_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "std::pair< int,int >",                   /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__std__pairT_int_int_t_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__std__pairT_int_int_t_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__std__pairT_int_int_t_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_IntIntPair,          /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) SwigPython_std_pair_len,        /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) SwigPython_std_pair_getitem, /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) SwigPython_std_pair_setitem, /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__std__pairT_int_int_t_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__std__pairT_int_int_t_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_SwigPyIterator)
SWIGINTERN PyGetSetDef SwigPyBuiltin__swig__SwigPyIterator_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__swig__SwigPyIterator_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  switch (op) {
    case Py_EQ : result = _wrap_SwigPyIterator___eq__(self, other); break;
    case Py_NE : result = _wrap_SwigPyIterator___ne__(self, other); break;
    default : break;
  }
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__swig__SwigPyIterator_methods[] = {
  { "value", (PyCFunction) _wrap_SwigPyIterator_value, METH_NOARGS, (char*) "value() -> PyObject *" },
  { "incr", (PyCFunction) _wrap_SwigPyIterator_incr, METH_VARARGS, (char*) "\n"
		"incr(size_t n=1) -> SwigPyIterator\n"
		"incr() -> SwigPyIterator\n"
		"" },
  { "decr", (PyCFunction) _wrap_SwigPyIterator_decr, METH_VARARGS, (char*) "\n"
		"decr(size_t n=1) -> SwigPyIterator\n"
		"decr() -> SwigPyIterator\n"
		"" },
  { "distance", (PyCFunction) _wrap_SwigPyIterator_distance, METH_O, (char*) "distance(SwigPyIterator x) -> ptrdiff_t" },
  { "equal", (PyCFunction) _wrap_SwigPyIterator_equal, METH_O, (char*) "equal(SwigPyIterator x) -> bool" },
  { "copy", (PyCFunction) _wrap_SwigPyIterator_copy, METH_NOARGS, (char*) "copy() -> SwigPyIterator" },
  { "next", (PyCFunction) _wrap_SwigPyIterator_next, METH_NOARGS, (char*) "next() -> PyObject *" },
  { "__next__", (PyCFunction) _wrap_SwigPyIterator___next__, METH_NOARGS, (char*) "__next__() -> PyObject *" },
  { "previous", (PyCFunction) _wrap_SwigPyIterator_previous, METH_NOARGS, (char*) "previous() -> PyObject *" },
  { "advance", (PyCFunction) _wrap_SwigPyIterator_advance, METH_O, (char*) "advance(ptrdiff_t n) -> SwigPyIterator" },
  { "__eq__", (PyCFunction) _wrap_SwigPyIterator___eq__, METH_O, (char*) "__eq__(SwigPyIterator x) -> bool" },
  { "__ne__", (PyCFunction) _wrap_SwigPyIterator___ne__, METH_O, (char*) "__ne__(SwigPyIterator x) -> bool" },
  { "__iadd__", (PyCFunction) _wrap_SwigPyIterator___iadd__, METH_O, (char*) "__iadd__(ptrdiff_t n) -> SwigPyIterator" },
  { "__isub__", (PyCFunction) _wrap_SwigPyIterator___isub__, METH_O, (char*) "__isub__(ptrdiff_t n) -> SwigPyIterator" },
  { "__add__", (PyCFunction) _wrap_SwigPyIterator___add__, METH_O, (char*) "__add__(ptrdiff_t n) -> SwigPyIterator" },
  { "__sub__", (PyCFunction) _wrap_SwigPyIterator___sub__, METH_VARARGS, (char*) "\n"
		"__sub__(ptrdiff_t n) -> SwigPyIterator\n"
		"__sub__(SwigPyIterator x) -> ptrdiff_t\n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__swig__SwigPyIterator_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "tomlib.SwigPyIterator",                  /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_SwigPyIterator_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__swig__SwigPyIterator_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__swig__SwigPyIterator_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__swig__SwigPyIterator_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__swig__SwigPyIterator_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "swig::SwigPyIterator",                   /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__swig__SwigPyIterator_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) &swig::make_output_iterator_builtin, /* tp_iter */
    (iternextfunc) (iternextfunc) _wrap_SwigPyIterator___next___closure, /* tp_iternext */
    SwigPyBuiltin__swig__SwigPyIterator_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__swig__SwigPyIterator_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) SwigPyBuiltin_BadInit,         /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) (binaryfunc) _wrap_SwigPyIterator___add__, /* nb_add */
    (binaryfunc) (binaryfunc) _wrap_SwigPyIterator___sub___closure, /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) (binaryfunc) _wrap_SwigPyIterator___iadd__, /* nb_inplace_add */
    (binaryfunc) (binaryfunc) _wrap_SwigPyIterator___isub__, /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__swig__SwigPyIterator_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__swig__SwigPyIterator_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_IntVector)
SWIGINTERN PyGetSetDef SwigPyBuiltin__std__vectorT_int_t_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__std__vectorT_int_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__std__vectorT_int_t_methods[] = {
  { "iterator", (PyCFunction) _wrap_IntVector_iterator, METH_NOARGS, (char*) "iterator() -> SwigPyIterator" },
  { "__nonzero__", (PyCFunction) _wrap_IntVector___nonzero__, METH_NOARGS, (char*) "__nonzero__() -> bool" },
  { "__bool__", (PyCFunction) _wrap_IntVector___bool__, METH_NOARGS, (char*) "__bool__() -> bool" },
  { "__len__", (PyCFunction) _wrap_IntVector___len__, METH_NOARGS, (char*) "__len__() -> std::vector< int >::size_type" },
  { "pop", (PyCFunction) _wrap_IntVector_pop, METH_NOARGS, (char*) "pop() -> std::vector< int >::value_type" },
  { "__getslice__", (PyCFunction) _wrap_IntVector___getslice__, METH_VARARGS, (char*) "__getslice__(std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> IntVector" },
  { "__setslice__", (PyCFunction) _wrap_IntVector___setslice__, METH_VARARGS, (char*) "\n"
		"__setslice__(std::vector< int >::difference_type i, std::vector< int >::difference_type j, IntVector v)\n"
		"__setslice__(std::vector< int >::difference_type i, std::vector< int >::difference_type j)\n"
		"" },
  { "__delslice__", (PyCFunction) _wrap_IntVector___delslice__, METH_VARARGS, (char*) "__delslice__(std::vector< int >::difference_type i, std::vector< int >::difference_type j)" },
  { "__delitem__", (PyCFunction) _wrap_IntVector___delitem__, METH_VARARGS, (char*) "\n"
		"__delitem__(std::vector< int >::difference_type i)\n"
		"__delitem__(PySliceObject * slice)\n"
		"" },
  { "__getitem__", (PyCFunction) _wrap_IntVector___getitem__, METH_VARARGS, (char*) "\n"
		"__getitem__(PySliceObject * slice) -> IntVector\n"
		"__getitem__(std::vector< int >::difference_type i) -> std::vector< int >::value_type const\n"
		"" },
  { "__setitem__", (PyCFunction) _wrap_IntVector___setitem__, METH_VARARGS, (char*) "\n"
		"__setitem__(PySliceObject * slice, IntVector v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"__setitem__(std::vector< int >::difference_type i, std::vector< int >::value_type const & x)\n"
		"__setitem__(std::vector< int >::difference_type i)\n"
		"" },
  { "append", (PyCFunction) _wrap_IntVector_append, METH_O, (char*) "append(std::vector< int >::value_type const & x)" },
  { "empty", (PyCFunction) _wrap_IntVector_empty, METH_NOARGS, (char*) "empty() -> bool" },
  { "size", (PyCFunction) _wrap_IntVector_size, METH_NOARGS, (char*) "size() -> std::vector< int >::size_type" },
  { "clear", (PyCFunction) _wrap_IntVector_clear, METH_NOARGS, (char*) "clear()" },
  { "swap", (PyCFunction) _wrap_IntVector_swap, METH_O, (char*) "swap(IntVector v)" },
  { "get_allocator", (PyCFunction) _wrap_IntVector_get_allocator, METH_NOARGS, (char*) "get_allocator() -> std::vector< int >::allocator_type" },
  { "begin", (PyCFunction) _wrap_IntVector_begin, METH_NOARGS, (char*) "begin() -> std::vector< int >::iterator" },
  { "end", (PyCFunction) _wrap_IntVector_end, METH_NOARGS, (char*) "end() -> std::vector< int >::iterator" },
  { "rbegin", (PyCFunction) _wrap_IntVector_rbegin, METH_NOARGS, (char*) "rbegin() -> std::vector< int >::reverse_iterator" },
  { "rend", (PyCFunction) _wrap_IntVector_rend, METH_NOARGS, (char*) "rend() -> std::vector< int >::reverse_iterator" },
  { "pop_back", (PyCFunction) _wrap_IntVector_pop_back, METH_NOARGS, (char*) "pop_back()" },
  { "resize", (PyCFunction) _wrap_IntVector_resize, METH_VARARGS, (char*) "\n"
		"resize(std::vector< int >::size_type new_size)\n"
		"resize(std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)\n"
		"" },
  { "erase", (PyCFunction) _wrap_IntVector_erase, METH_VARARGS, (char*) "\n"
		"erase(std::vector< int >::iterator pos) -> std::vector< int >::iterator\n"
		"erase(std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator\n"
		"" },
  { "push_back", (PyCFunction) _wrap_IntVector_push_back, METH_O, (char*) "push_back(std::vector< int >::value_type const & x)" },
  { "front", (PyCFunction) _wrap_IntVector_front, METH_NOARGS, (char*) "front() -> std::vector< int >::value_type const &" },
  { "back", (PyCFunction) _wrap_IntVector_back, METH_NOARGS, (char*) "back() -> std::vector< int >::value_type const &" },
  { "assign", (PyCFunction) _wrap_IntVector_assign, METH_VARARGS, (char*) "assign(std::vector< int >::size_type n, std::vector< int >::value_type const & x)" },
  { "insert", (PyCFunction) _wrap_IntVector_insert, METH_VARARGS, (char*) "\n"
		"insert(std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator\n"
		"insert(std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)\n"
		"" },
  { "reserve", (PyCFunction) _wrap_IntVector_reserve, METH_O, (char*) "reserve(std::vector< int >::size_type n)" },
  { "capacity", (PyCFunction) _wrap_IntVector_capacity, METH_NOARGS, (char*) "capacity() -> std::vector< int >::size_type" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__std__vectorT_int_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "tomlib.IntVector",                       /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_IntVector_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__std__vectorT_int_t_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__std__vectorT_int_t_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__std__vectorT_int_t_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__std__vectorT_int_t_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "std::vector< int >",                     /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__std__vectorT_int_t_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) (getiterfunc) _wrap_IntVector_iterator_closure, /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__std__vectorT_int_t_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__std__vectorT_int_t_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_IntVector,           /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) (inquiry) _wrap_IntVector___nonzero___closure, /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) (binaryfunc) _wrap_IntVector___getitem___closure, /* mp_subscript */
    (objobjargproc) (objobjargproc) _wrap_IntVector___setitem___closure, /* mp_ass_subscript */
  },
  {
    (lenfunc) (lenfunc) _wrap_IntVector___len___closure, /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__std__vectorT_int_t_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__std__vectorT_int_t_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_DoubleVector)
SWIGINTERN PyGetSetDef SwigPyBuiltin__std__vectorT_double_t_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__std__vectorT_double_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__std__vectorT_double_t_methods[] = {
  { "iterator", (PyCFunction) _wrap_DoubleVector_iterator, METH_NOARGS, (char*) "iterator() -> SwigPyIterator" },
  { "__nonzero__", (PyCFunction) _wrap_DoubleVector___nonzero__, METH_NOARGS, (char*) "__nonzero__() -> bool" },
  { "__bool__", (PyCFunction) _wrap_DoubleVector___bool__, METH_NOARGS, (char*) "__bool__() -> bool" },
  { "__len__", (PyCFunction) _wrap_DoubleVector___len__, METH_NOARGS, (char*) "__len__() -> std::vector< double >::size_type" },
  { "pop", (PyCFunction) _wrap_DoubleVector_pop, METH_NOARGS, (char*) "pop() -> std::vector< double >::value_type" },
  { "__getslice__", (PyCFunction) _wrap_DoubleVector___getslice__, METH_VARARGS, (char*) "__getslice__(std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> DoubleVector" },
  { "__setslice__", (PyCFunction) _wrap_DoubleVector___setslice__, METH_VARARGS, (char*) "\n"
		"__setslice__(std::vector< double >::difference_type i, std::vector< double >::difference_type j, DoubleVector v)\n"
		"__setslice__(std::vector< double >::difference_type i, std::vector< double >::difference_type j)\n"
		"" },
  { "__delslice__", (PyCFunction) _wrap_DoubleVector___delslice__, METH_VARARGS, (char*) "__delslice__(std::vector< double >::difference_type i, std::vector< double >::difference_type j)" },
  { "__delitem__", (PyCFunction) _wrap_DoubleVector___delitem__, METH_VARARGS, (char*) "\n"
		"__delitem__(std::vector< double >::difference_type i)\n"
		"__delitem__(PySliceObject * slice)\n"
		"" },
  { "__getitem__", (PyCFunction) _wrap_DoubleVector___getitem__, METH_VARARGS, (char*) "\n"
		"__getitem__(PySliceObject * slice) -> DoubleVector\n"
		"__getitem__(std::vector< double >::difference_type i) -> std::vector< double >::value_type const\n"
		"" },
  { "__setitem__", (PyCFunction) _wrap_DoubleVector___setitem__, METH_VARARGS, (char*) "\n"
		"__setitem__(PySliceObject * slice, DoubleVector v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"__setitem__(std::vector< double >::difference_type i, std::vector< double >::value_type const & x)\n"
		"__setitem__(std::vector< double >::difference_type i)\n"
		"" },
  { "append", (PyCFunction) _wrap_DoubleVector_append, METH_O, (char*) "append(std::vector< double >::value_type const & x)" },
  { "empty", (PyCFunction) _wrap_DoubleVector_empty, METH_NOARGS, (char*) "empty() -> bool" },
  { "size", (PyCFunction) _wrap_DoubleVector_size, METH_NOARGS, (char*) "size() -> std::vector< double >::size_type" },
  { "clear", (PyCFunction) _wrap_DoubleVector_clear, METH_NOARGS, (char*) "clear()" },
  { "swap", (PyCFunction) _wrap_DoubleVector_swap, METH_O, (char*) "swap(DoubleVector v)" },
  { "get_allocator", (PyCFunction) _wrap_DoubleVector_get_allocator, METH_NOARGS, (char*) "get_allocator() -> std::vector< double >::allocator_type" },
  { "begin", (PyCFunction) _wrap_DoubleVector_begin, METH_NOARGS, (char*) "begin() -> std::vector< double >::iterator" },
  { "end", (PyCFunction) _wrap_DoubleVector_end, METH_NOARGS, (char*) "end() -> std::vector< double >::iterator" },
  { "rbegin", (PyCFunction) _wrap_DoubleVector_rbegin, METH_NOARGS, (char*) "rbegin() -> std::vector< double >::reverse_iterator" },
  { "rend", (PyCFunction) _wrap_DoubleVector_rend, METH_NOARGS, (char*) "rend() -> std::vector< double >::reverse_iterator" },
  { "pop_back", (PyCFunction) _wrap_DoubleVector_pop_back, METH_NOARGS, (char*) "pop_back()" },
  { "resize", (PyCFunction) _wrap_DoubleVector_resize, METH_VARARGS, (char*) "\n"
		"resize(std::vector< double >::size_type new_size)\n"
		"resize(std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)\n"
		"" },
  { "erase", (PyCFunction) _wrap_DoubleVector_erase, METH_VARARGS, (char*) "\n"
		"erase(std::vector< double >::iterator pos) -> std::vector< double >::iterator\n"
		"erase(std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator\n"
		"" },
  { "push_back", (PyCFunction) _wrap_DoubleVector_push_back, METH_O, (char*) "push_back(std::vector< double >::value_type const & x)" },
  { "front", (PyCFunction) _wrap_DoubleVector_front, METH_NOARGS, (char*) "front() -> std::vector< double >::value_type const &" },
  { "back", (PyCFunction) _wrap_DoubleVector_back, METH_NOARGS, (char*) "back() -> std::vector< double >::value_type const &" },
  { "assign", (PyCFunction) _wrap_DoubleVector_assign, METH_VARARGS, (char*) "assign(std::vector< double >::size_type n, std::vector< double >::value_type const & x)" },
  { "insert", (PyCFunction) _wrap_DoubleVector_insert, METH_VARARGS, (char*) "\n"
		"insert(std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator\n"
		"insert(std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)\n"
		"" },
  { "reserve", (PyCFunction) _wrap_DoubleVector_reserve, METH_O, (char*) "reserve(std::vector< double >::size_type n)" },
  { "capacity", (PyCFunction) _wrap_DoubleVector_capacity, METH_NOARGS, (char*) "capacity() -> std::vector< double >::size_type" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__std__vectorT_double_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "tomlib.DoubleVector",                    /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_DoubleVector_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__std__vectorT_double_t_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__std__vectorT_double_t_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__std__vectorT_double_t_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__std__vectorT_double_t_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "std::vector< double >",                  /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__std__vectorT_double_t_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) (getiterfunc) _wrap_DoubleVector_iterator_closure, /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__std__vectorT_double_t_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__std__vectorT_double_t_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_DoubleVector,        /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) (inquiry) _wrap_DoubleVector___nonzero___closure, /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) (binaryfunc) _wrap_DoubleVector___getitem___closure, /* mp_subscript */
    (objobjargproc) (objobjargproc) _wrap_DoubleVector___setitem___closure, /* mp_ass_subscript */
  },
  {
    (lenfunc) (lenfunc) _wrap_DoubleVector___len___closure, /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__std__vectorT_double_t_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__std__vectorT_double_t_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_ios_base)
static SwigPyGetSet ios_base_ios_base_in_getset = { _wrap_ios_base_ios_base_in_get, 0 };
static PyGetSetDef ios_base_ios_base_in_getset_def = { (char*) "ios_base_in", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.ios_base_in", (void*) &ios_base_ios_base_in_getset }
;
static SwigPyGetSet ios_base_basefield_getset = { _wrap_ios_base_basefield_get, 0 };
static PyGetSetDef ios_base_basefield_getset_def = { (char*) "basefield", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.basefield", (void*) &ios_base_basefield_getset }
;
static SwigPyGetSet ios_base_ate_getset = { _wrap_ios_base_ate_get, 0 };
static PyGetSetDef ios_base_ate_getset_def = { (char*) "ate", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.ate", (void*) &ios_base_ate_getset }
;
static SwigPyGetSet ios_base_unitbuf_getset = { _wrap_ios_base_unitbuf_get, 0 };
static PyGetSetDef ios_base_unitbuf_getset_def = { (char*) "unitbuf", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.unitbuf", (void*) &ios_base_unitbuf_getset }
;
static SwigPyGetSet ios_base_out_getset = { _wrap_ios_base_out_get, 0 };
static PyGetSetDef ios_base_out_getset_def = { (char*) "out", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.out", (void*) &ios_base_out_getset }
;
static SwigPyGetSet ios_base_app_getset = { _wrap_ios_base_app_get, 0 };
static PyGetSetDef ios_base_app_getset_def = { (char*) "app", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.app", (void*) &ios_base_app_getset }
;
static SwigPyGetSet ios_base_beg_getset = { _wrap_ios_base_beg_get, 0 };
static PyGetSetDef ios_base_beg_getset_def = { (char*) "beg", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.beg", (void*) &ios_base_beg_getset }
;
static SwigPyGetSet ios_base_cur_getset = { _wrap_ios_base_cur_get, 0 };
static PyGetSetDef ios_base_cur_getset_def = { (char*) "cur", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.cur", (void*) &ios_base_cur_getset }
;
static SwigPyGetSet ios_base_oct_getset = { _wrap_ios_base_oct_get, 0 };
static PyGetSetDef ios_base_oct_getset_def = { (char*) "oct", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.oct", (void*) &ios_base_oct_getset }
;
static SwigPyGetSet ios_base_uppercase_getset = { _wrap_ios_base_uppercase_get, 0 };
static PyGetSetDef ios_base_uppercase_getset_def = { (char*) "uppercase", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.uppercase", (void*) &ios_base_uppercase_getset }
;
static SwigPyGetSet ios_base_internal_getset = { _wrap_ios_base_internal_get, 0 };
static PyGetSetDef ios_base_internal_getset_def = { (char*) "internal", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.internal", (void*) &ios_base_internal_getset }
;
static SwigPyGetSet ios_base_eofbit_getset = { _wrap_ios_base_eofbit_get, 0 };
static PyGetSetDef ios_base_eofbit_getset_def = { (char*) "eofbit", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.eofbit", (void*) &ios_base_eofbit_getset }
;
static SwigPyGetSet ios_base_skipws_getset = { _wrap_ios_base_skipws_get, 0 };
static PyGetSetDef ios_base_skipws_getset_def = { (char*) "skipws", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.skipws", (void*) &ios_base_skipws_getset }
;
static SwigPyGetSet ios_base_failbit_getset = { _wrap_ios_base_failbit_get, 0 };
static PyGetSetDef ios_base_failbit_getset_def = { (char*) "failbit", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.failbit", (void*) &ios_base_failbit_getset }
;
static SwigPyGetSet ios_base_showpoint_getset = { _wrap_ios_base_showpoint_get, 0 };
static PyGetSetDef ios_base_showpoint_getset_def = { (char*) "showpoint", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.showpoint", (void*) &ios_base_showpoint_getset }
;
static SwigPyGetSet ios_base_showpos_getset = { _wrap_ios_base_showpos_get, 0 };
static PyGetSetDef ios_base_showpos_getset_def = { (char*) "showpos", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.showpos", (void*) &ios_base_showpos_getset }
;
static SwigPyGetSet ios_base_dec_getset = { _wrap_ios_base_dec_get, 0 };
static PyGetSetDef ios_base_dec_getset_def = { (char*) "dec", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.dec", (void*) &ios_base_dec_getset }
;
static SwigPyGetSet ios_base_binary_getset = { _wrap_ios_base_binary_get, 0 };
static PyGetSetDef ios_base_binary_getset_def = { (char*) "binary", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.binary", (void*) &ios_base_binary_getset }
;
static SwigPyGetSet ios_base_hex_getset = { _wrap_ios_base_hex_get, 0 };
static PyGetSetDef ios_base_hex_getset_def = { (char*) "hex", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.hex", (void*) &ios_base_hex_getset }
;
static SwigPyGetSet ios_base_showbase_getset = { _wrap_ios_base_showbase_get, 0 };
static PyGetSetDef ios_base_showbase_getset_def = { (char*) "showbase", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.showbase", (void*) &ios_base_showbase_getset }
;
static SwigPyGetSet ios_base_right_getset = { _wrap_ios_base_right_get, 0 };
static PyGetSetDef ios_base_right_getset_def = { (char*) "right", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.right", (void*) &ios_base_right_getset }
;
static SwigPyGetSet ios_base_boolalpha_getset = { _wrap_ios_base_boolalpha_get, 0 };
static PyGetSetDef ios_base_boolalpha_getset_def = { (char*) "boolalpha", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.boolalpha", (void*) &ios_base_boolalpha_getset }
;
static SwigPyGetSet ios_base_goodbit_getset = { _wrap_ios_base_goodbit_get, 0 };
static PyGetSetDef ios_base_goodbit_getset_def = { (char*) "goodbit", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.goodbit", (void*) &ios_base_goodbit_getset }
;
static SwigPyGetSet ios_base_end_getset = { _wrap_ios_base_end_get, 0 };
static PyGetSetDef ios_base_end_getset_def = { (char*) "end", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.end", (void*) &ios_base_end_getset }
;
static SwigPyGetSet ios_base_left_getset = { _wrap_ios_base_left_get, 0 };
static PyGetSetDef ios_base_left_getset_def = { (char*) "left", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.left", (void*) &ios_base_left_getset }
;
static SwigPyGetSet ios_base_badbit_getset = { _wrap_ios_base_badbit_get, 0 };
static PyGetSetDef ios_base_badbit_getset_def = { (char*) "badbit", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.badbit", (void*) &ios_base_badbit_getset }
;
static SwigPyGetSet ios_base_fixed_getset = { _wrap_ios_base_fixed_get, 0 };
static PyGetSetDef ios_base_fixed_getset_def = { (char*) "fixed", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.fixed", (void*) &ios_base_fixed_getset }
;
static SwigPyGetSet ios_base_scientific_getset = { _wrap_ios_base_scientific_get, 0 };
static PyGetSetDef ios_base_scientific_getset_def = { (char*) "scientific", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.scientific", (void*) &ios_base_scientific_getset }
;
static SwigPyGetSet ios_base_adjustfield_getset = { _wrap_ios_base_adjustfield_get, 0 };
static PyGetSetDef ios_base_adjustfield_getset_def = { (char*) "adjustfield", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.adjustfield", (void*) &ios_base_adjustfield_getset }
;
static SwigPyGetSet ios_base_floatfield_getset = { _wrap_ios_base_floatfield_get, 0 };
static PyGetSetDef ios_base_floatfield_getset_def = { (char*) "floatfield", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.floatfield", (void*) &ios_base_floatfield_getset }
;
static SwigPyGetSet ios_base_trunc_getset = { _wrap_ios_base_trunc_get, 0 };
static PyGetSetDef ios_base_trunc_getset_def = { (char*) "trunc", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) 0, (char*)"std::ios_base.trunc", (void*) &ios_base_trunc_getset }
;
SWIGINTERN PyGetSetDef SwigPyBuiltin__std__ios_base_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__std__ios_base_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__std__ios_base_methods[] = {
  { "register_callback", (PyCFunction) _wrap_ios_base_register_callback, METH_VARARGS, (char*) "register_callback(std::ios_base::event_callback __fn, int __index)" },
  { "flags", (PyCFunction) _wrap_ios_base_flags, METH_VARARGS, (char*) "\n"
		"flags() -> std::ios_base::fmtflags\n"
		"flags(std::ios_base::fmtflags __fmtfl) -> std::ios_base::fmtflags\n"
		"" },
  { "setf", (PyCFunction) _wrap_ios_base_setf, METH_VARARGS, (char*) "\n"
		"setf(std::ios_base::fmtflags __fmtfl) -> std::ios_base::fmtflags\n"
		"setf(std::ios_base::fmtflags __fmtfl, std::ios_base::fmtflags __mask) -> std::ios_base::fmtflags\n"
		"" },
  { "unsetf", (PyCFunction) _wrap_ios_base_unsetf, METH_O, (char*) "unsetf(std::ios_base::fmtflags __mask)" },
  { "precision", (PyCFunction) _wrap_ios_base_precision, METH_VARARGS, (char*) "\n"
		"precision() -> std::streamsize\n"
		"precision(std::streamsize __prec) -> std::streamsize\n"
		"" },
  { "width", (PyCFunction) _wrap_ios_base_width, METH_VARARGS, (char*) "\n"
		"width() -> std::streamsize\n"
		"width(std::streamsize __wide) -> std::streamsize\n"
		"" },
  { "sync_with_stdio", (PyCFunction) _wrap_ios_base_sync_with_stdio, METH_STATIC|METH_VARARGS, (char*) "\n"
		"sync_with_stdio(bool __sync=True) -> bool\n"
		"sync_with_stdio() -> bool\n"
		"" },
  { "imbue", (PyCFunction) _wrap_ios_base_imbue, METH_O, (char*) "imbue(std::locale const & __loc) -> std::locale" },
  { "getloc", (PyCFunction) _wrap_ios_base_getloc, METH_NOARGS, (char*) "getloc() -> std::locale" },
  { "xalloc", (PyCFunction) _wrap_ios_base_xalloc, METH_STATIC|METH_NOARGS, (char*) "xalloc() -> int" },
  { "iword", (PyCFunction) _wrap_ios_base_iword, METH_O, (char*) "iword(int __ix) -> long &" },
  { "pword", (PyCFunction) _wrap_ios_base_pword, METH_O, (char*) "pword(int __ix) -> void *&" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__std__ios_base_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "tomlib.ios_base",                        /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_ios_base_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__std__ios_base_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__std__ios_base_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__std__ios_base_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__std__ios_base_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "std::ios_base",                          /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__std__ios_base_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__std__ios_base_methods,     /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__std__ios_base_getset,      /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) SwigPyBuiltin_BadInit,         /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__std__ios_base_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__std__ios_base_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_ios)
SWIGINTERN PyGetSetDef SwigPyBuiltin__std__basic_iosT_char_t_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__std__basic_iosT_char_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__std__basic_iosT_char_t_methods[] = {
  { "rdstate", (PyCFunction) _wrap_ios_rdstate, METH_NOARGS, (char*) "rdstate() -> std::ios_base::iostate" },
  { "clear", (PyCFunction) _wrap_ios_clear, METH_VARARGS, (char*) "\n"
		"clear(std::ios_base::iostate __state)\n"
		"clear()\n"
		"" },
  { "setstate", (PyCFunction) _wrap_ios_setstate, METH_O, (char*) "setstate(std::ios_base::iostate __state)" },
  { "good", (PyCFunction) _wrap_ios_good, METH_NOARGS, (char*) "good() -> bool" },
  { "eof", (PyCFunction) _wrap_ios_eof, METH_NOARGS, (char*) "eof() -> bool" },
  { "fail", (PyCFunction) _wrap_ios_fail, METH_NOARGS, (char*) "fail() -> bool" },
  { "bad", (PyCFunction) _wrap_ios_bad, METH_NOARGS, (char*) "bad() -> bool" },
  { "exceptions", (PyCFunction) _wrap_ios_exceptions, METH_VARARGS, (char*) "\n"
		"exceptions() -> std::ios_base::iostate\n"
		"exceptions(std::ios_base::iostate __except)\n"
		"" },
  { "tie", (PyCFunction) _wrap_ios_tie, METH_VARARGS, (char*) "\n"
		"tie() -> ostream\n"
		"tie(ostream __tiestr) -> ostream\n"
		"" },
  { "rdbuf", (PyCFunction) _wrap_ios_rdbuf, METH_VARARGS, (char*) "\n"
		"rdbuf() -> std::basic_streambuf< char,std::char_traits< char > > *\n"
		"rdbuf(std::basic_streambuf< char,std::char_traits< char > > * __sb) -> std::basic_streambuf< char,std::char_traits< char > >\n"
		"" },
  { "copyfmt", (PyCFunction) _wrap_ios_copyfmt, METH_O, (char*) "copyfmt(ios __rhs) -> ios" },
  { "fill", (PyCFunction) _wrap_ios_fill, METH_VARARGS, (char*) "\n"
		"fill() -> std::basic_ios< char >::char_type\n"
		"fill(std::basic_ios< char >::char_type __ch) -> std::basic_ios< char >::char_type\n"
		"" },
  { "imbue", (PyCFunction) _wrap_ios_imbue, METH_O, (char*) "imbue(std::locale const & __loc) -> std::locale" },
  { "narrow", (PyCFunction) _wrap_ios_narrow, METH_VARARGS, (char*) "narrow(std::basic_ios< char >::char_type __c, char __dfault) -> char" },
  { "widen", (PyCFunction) _wrap_ios_widen, METH_O, (char*) "widen(char __c) -> std::basic_ios< char >::char_type" },
  { "__disown__", (PyCFunction) Swig::Director::swig_pyobj_disown< std::basic_ios< char > >, METH_NOARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__std__basic_iosT_char_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "tomlib.ios",                             /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_ios_closure,    /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__std__basic_iosT_char_t_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__std__basic_iosT_char_t_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__std__basic_iosT_char_t_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__std__basic_iosT_char_t_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "std::basic_ios< char >",                 /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__std__basic_iosT_char_t_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__std__basic_iosT_char_t_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__std__basic_iosT_char_t_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_ios,                 /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__std__basic_iosT_char_t_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__std__basic_iosT_char_t_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_ostream)
SWIGINTERN PyGetSetDef SwigPyBuiltin__std__basic_ostreamT_char_t_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__std__basic_ostreamT_char_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__std__basic_ostreamT_char_t_methods[] = {
  { "__lshift__", (PyCFunction) _wrap_ostream___lshift__, METH_VARARGS, (char*) "\n"
		"__lshift__(std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &) __pf) -> ostream\n"
		"__lshift__(std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &) __pf) -> ostream\n"
		"__lshift__(std::ios_base &(*)(std::ios_base &) __pf) -> ostream\n"
		"__lshift__(long __n) -> ostream\n"
		"__lshift__(unsigned long __n) -> ostream\n"
		"__lshift__(bool __n) -> ostream\n"
		"__lshift__(short __n) -> ostream\n"
		"__lshift__(unsigned short __n) -> ostream\n"
		"__lshift__(int __n) -> ostream\n"
		"__lshift__(unsigned int __n) -> ostream\n"
		"__lshift__(long long __n) -> ostream\n"
		"__lshift__(unsigned long long __n) -> ostream\n"
		"__lshift__(double __f) -> ostream\n"
		"__lshift__(float __f) -> ostream\n"
		"__lshift__(long double __f) -> ostream\n"
		"__lshift__(void const * __p) -> ostream\n"
		"__lshift__(std::basic_streambuf< char,std::char_traits< char > > * __sb) -> ostream\n"
		"__lshift__(std::basic_string< char,std::char_traits< char >,std::allocator< char > > const & s) -> ostream\n"
		"" },
  { "put", (PyCFunction) _wrap_ostream_put, METH_O, (char*) "put(std::basic_ostream< char >::char_type __c) -> ostream" },
  { "write", (PyCFunction) _wrap_ostream_write, METH_VARARGS, (char*) "write(std::basic_ostream< char >::char_type const * __s, std::streamsize __n) -> ostream" },
  { "flush", (PyCFunction) _wrap_ostream_flush, METH_NOARGS, (char*) "flush() -> ostream" },
  { "tellp", (PyCFunction) _wrap_ostream_tellp, METH_NOARGS, (char*) "tellp() -> std::basic_ostream< char >::pos_type" },
  { "seekp", (PyCFunction) _wrap_ostream_seekp, METH_VARARGS, (char*) "\n"
		"seekp(std::basic_ostream< char >::pos_type arg2) -> ostream\n"
		"seekp(std::basic_ostream< char >::off_type arg2, std::ios_base::seekdir arg3) -> ostream\n"
		"" },
  { "__disown__", (PyCFunction) Swig::Director::swig_pyobj_disown< std::basic_ostream< char > >, METH_NOARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__std__basic_ostreamT_char_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "tomlib.ostream",                         /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_ostream_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__std__basic_ostreamT_char_t_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__std__basic_ostreamT_char_t_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__std__basic_ostreamT_char_t_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__std__basic_ostreamT_char_t_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "std::basic_ostream< char >",             /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__std__basic_ostreamT_char_t_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__std__basic_ostreamT_char_t_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__std__basic_ostreamT_char_t_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_ostream,             /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) (binaryfunc) _wrap_ostream___lshift___closure, /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__std__basic_ostreamT_char_t_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__std__basic_ostreamT_char_t_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_istream)
SWIGINTERN PyGetSetDef SwigPyBuiltin__std__basic_istreamT_char_t_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__std__basic_istreamT_char_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__std__basic_istreamT_char_t_methods[] = {
  { "__rshift__", (PyCFunction) _wrap_istream___rshift__, METH_VARARGS, (char*) "\n"
		"__rshift__(std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &) __pf) -> istream\n"
		"__rshift__(std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &) __pf) -> istream\n"
		"__rshift__(std::ios_base &(*)(std::ios_base &) __pf) -> istream\n"
		"__rshift__(bool & __n) -> istream\n"
		"__rshift__(short & __n) -> istream\n"
		"__rshift__(unsigned short & __n) -> istream\n"
		"__rshift__(int & __n) -> istream\n"
		"__rshift__(unsigned int & __n) -> istream\n"
		"__rshift__(long & __n) -> istream\n"
		"__rshift__(unsigned long & __n) -> istream\n"
		"__rshift__(long long & __n) -> istream\n"
		"__rshift__(unsigned long long & __n) -> istream\n"
		"__rshift__(float & __f) -> istream\n"
		"__rshift__(double & __f) -> istream\n"
		"__rshift__(long double & __f) -> istream\n"
		"__rshift__(void *& __p) -> istream\n"
		"__rshift__(std::basic_streambuf< char,std::char_traits< char > > * __sb) -> istream\n"
		"" },
  { "gcount", (PyCFunction) _wrap_istream_gcount, METH_NOARGS, (char*) "gcount() -> std::streamsize" },
  { "get", (PyCFunction) _wrap_istream_get, METH_VARARGS, (char*) "\n"
		"get() -> std::basic_istream< char >::int_type\n"
		"get(std::basic_istream< char >::char_type & __c) -> istream\n"
		"get(std::basic_istream< char >::char_type * __s, std::streamsize __n, std::basic_istream< char >::char_type __delim) -> istream\n"
		"get(std::basic_istream< char >::char_type * __s, std::streamsize __n) -> istream\n"
		"get(std::basic_streambuf< char,std::char_traits< char > > & __sb, std::basic_istream< char >::char_type __delim) -> istream\n"
		"get(std::basic_streambuf< char,std::char_traits< char > > & __sb) -> istream\n"
		"" },
  { "getline", (PyCFunction) _wrap_istream_getline, METH_VARARGS, (char*) "\n"
		"getline(std::basic_istream< char >::char_type * __s, std::streamsize __n, std::basic_istream< char >::char_type __delim) -> istream\n"
		"getline(std::basic_istream< char >::char_type * __s, std::streamsize __n) -> istream\n"
		"" },
  { "ignore", (PyCFunction) _wrap_istream_ignore, METH_VARARGS, (char*) "\n"
		"ignore(std::streamsize __n=1, std::basic_istream< char >::int_type __delim) -> istream\n"
		"ignore(std::streamsize __n=1) -> istream\n"
		"ignore() -> istream\n"
		"" },
  { "peek", (PyCFunction) _wrap_istream_peek, METH_NOARGS, (char*) "peek() -> std::basic_istream< char >::int_type" },
  { "read", (PyCFunction) _wrap_istream_read, METH_VARARGS, (char*) "read(std::basic_istream< char >::char_type * __s, std::streamsize __n) -> istream" },
  { "readsome", (PyCFunction) _wrap_istream_readsome, METH_VARARGS, (char*) "readsome(std::basic_istream< char >::char_type * __s, std::streamsize __n) -> std::streamsize" },
  { "putback", (PyCFunction) _wrap_istream_putback, METH_O, (char*) "putback(std::basic_istream< char >::char_type __c) -> istream" },
  { "unget", (PyCFunction) _wrap_istream_unget, METH_NOARGS, (char*) "unget() -> istream" },
  { "sync", (PyCFunction) _wrap_istream_sync, METH_NOARGS, (char*) "sync() -> int" },
  { "tellg", (PyCFunction) _wrap_istream_tellg, METH_NOARGS, (char*) "tellg() -> std::basic_istream< char >::pos_type" },
  { "seekg", (PyCFunction) _wrap_istream_seekg, METH_VARARGS, (char*) "\n"
		"seekg(std::basic_istream< char >::pos_type arg2) -> istream\n"
		"seekg(std::basic_istream< char >::off_type arg2, std::ios_base::seekdir arg3) -> istream\n"
		"" },
  { "__disown__", (PyCFunction) Swig::Director::swig_pyobj_disown< std::basic_istream< char > >, METH_NOARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__std__basic_istreamT_char_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "tomlib.istream",                         /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_istream_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__std__basic_istreamT_char_t_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__std__basic_istreamT_char_t_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__std__basic_istreamT_char_t_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__std__basic_istreamT_char_t_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "std::basic_istream< char >",             /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__std__basic_istreamT_char_t_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__std__basic_istreamT_char_t_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__std__basic_istreamT_char_t_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_istream,             /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) (binaryfunc) _wrap_istream___rshift___closure, /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__std__basic_istreamT_char_t_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__std__basic_istreamT_char_t_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_iostream)
SWIGINTERN PyGetSetDef SwigPyBuiltin__std__basic_iostreamT_char_t_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__std__basic_iostreamT_char_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__std__basic_iostreamT_char_t_methods[] = {
  { "__disown__", (PyCFunction) Swig::Director::swig_pyobj_disown< std::basic_iostream< char > >, METH_NOARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__std__basic_iostreamT_char_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "tomlib.iostream",                        /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_iostream_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__std__basic_iostreamT_char_t_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__std__basic_iostreamT_char_t_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__std__basic_iostreamT_char_t_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__std__basic_iostreamT_char_t_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "std::basic_iostream< char >",            /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__std__basic_iostreamT_char_t_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__std__basic_iostreamT_char_t_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__std__basic_iostreamT_char_t_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_iostream,            /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__std__basic_iostreamT_char_t_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__std__basic_iostreamT_char_t_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Random)
SWIGINTERN PyGetSetDef SwigPyBuiltin__tom__Random_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__tom__Random_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__tom__Random_methods[] = {
  { "seed", (PyCFunction) _wrap_Random_seed, METH_VARARGS, (char*) "\n"
		"seed() -> unsigned int\n"
		"seed(unsigned int seedVal)\n"
		"" },
  { "random", (PyCFunction) _wrap_Random_random, METH_VARARGS, (char*) "\n"
		"random() -> double\n"
		"random(int m, int n) -> Eigen::MatrixXd\n"
		"" },
  { "integer", (PyCFunction) _wrap_Random_integer, METH_O, (char*) "integer(unsigned int n) -> unsigned int" },
  { "sample", (PyCFunction) _wrap_Random_sample, METH_O, (char*) "sample(ArrayMd const & prob) -> unsigned int" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__tom__Random_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "tomlib.Random",                          /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_Random_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__tom__Random_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__tom__Random_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__tom__Random_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__tom__Random_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "tom::Random",                            /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__tom__Random_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__tom__Random_methods,       /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__tom__Random_getset,        /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_Random,              /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__tom__Random_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__tom__Random_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Sequence)
SWIGINTERN PyGetSetDef SwigPyBuiltin__tom__Sequence_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__tom__Sequence_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  switch (op) {
    case Py_EQ : result = _wrap_Sequence___eq__(self, other); break;
    default : break;
  }
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__tom__Sequence_methods[] = {
  { "nU", (PyCFunction) _wrap_Sequence_nU, METH_NOARGS, (char*) "nU() -> int" },
  { "nO", (PyCFunction) _wrap_Sequence_nO, METH_NOARGS, (char*) "nO() -> int" },
  { "size", (PyCFunction) _wrap_Sequence_size, METH_NOARGS, (char*) "size() -> unsigned long" },
  { "isReversed", (PyCFunction) _wrap_Sequence_isReversed, METH_NOARGS, (char*) "isReversed() -> bool" },
  { "pos", (PyCFunction) _wrap_Sequence_pos, METH_NOARGS, (char*) "pos() -> unsigned long" },
  { "at", (PyCFunction) _wrap_Sequence_at, METH_O, (char*) "at(unsigned long n) -> tom::Symbol const" },
  { "copy", (PyCFunction) _wrap_Sequence_copy, METH_NOARGS, (char*) "copy() -> Sequence" },
  { "mergeToIo", (PyCFunction) _wrap_Sequence_mergeToIo, METH_VARARGS, (char*) "\n"
		"mergeToIo(Sequence inputSequence) -> Sequence\n"
		"mergeToIo() -> Sequence\n"
		"" },
  { "reverse", (PyCFunction) _wrap_Sequence_reverse, METH_NOARGS, (char*) "reverse()" },
  { "sub", (PyCFunction) _wrap_Sequence_sub, METH_VARARGS, (char*) "sub(unsigned long pos, unsigned long size) -> Sequence" },
  { "slice", (PyCFunction) _wrap_Sequence_slice, METH_VARARGS, (char*) "\n"
		"slice(long begin, long end, bool reverse=False) -> Sequence\n"
		"slice(long begin, long end) -> Sequence\n"
		"slice(long begin) -> Sequence\n"
		"slice() -> Sequence\n"
		"" },
  { "substr", (PyCFunction) _wrap_Sequence_substr, METH_VARARGS, (char*) "substr(unsigned long pos, unsigned long size) -> Sequence" },
  { "__eq__", (PyCFunction) _wrap_Sequence___eq__, METH_O, (char*) "__eq__(Sequence seq) -> bool" },
  { "count", (PyCFunction) _wrap_Sequence_count, METH_O, (char*) "count(Sequence seq) -> unsigned int" },
  { "isStrictlyIO", (PyCFunction) _wrap_Sequence_isStrictlyIO, METH_NOARGS, (char*) "isStrictlyIO() -> bool" },
  { "isAlignedIO", (PyCFunction) _wrap_Sequence_isAlignedIO, METH_NOARGS, (char*) "isAlignedIO() -> bool" },
  { "isValidIO", (PyCFunction) _wrap_Sequence_isValidIO, METH_NOARGS, (char*) "isValidIO() -> bool" },
  { "subIO", (PyCFunction) _wrap_Sequence_subIO, METH_VARARGS, (char*) "subIO(unsigned long posIO, unsigned long length) -> Sequence" },
  { "length", (PyCFunction) _wrap_Sequence_length, METH_NOARGS, (char*) "length() -> unsigned long" },
  { "o", (PyCFunction) _wrap_Sequence_o, METH_VARARGS, (char*) "\n"
		"o(unsigned long n) -> tom::Symbol const\n"
		"o(unsigned long n, tom::Symbol o)\n"
		"" },
  { "u", (PyCFunction) _wrap_Sequence_u, METH_VARARGS, (char*) "\n"
		"u(unsigned long n) -> tom::Symbol const\n"
		"u(unsigned long n, tom::Symbol u)\n"
		"" },
  { "toString", (PyCFunction) _wrap_Sequence_toString, METH_NOARGS, (char*) "toString() -> std::string" },
  { "toJSON", (PyCFunction) _wrap_Sequence_toJSON, METH_NOARGS, (char*) "toJSON() -> std::string" },
  { "fromJSON", (PyCFunction) _wrap_Sequence_fromJSON, METH_O, (char*) "fromJSON(char const * string)" },
  { "repr", (PyCFunction) _wrap_Sequence_repr, METH_NOARGS, (char*) "repr() -> std::string" },
  { "__len__", (PyCFunction) _wrap_Sequence___len__, METH_NOARGS, (char*) "__len__() -> long" },
  { "__getitem__", (PyCFunction) _wrap_Sequence___getitem__, METH_O, (char*) "__getitem__(long i) -> tom::Symbol" },
  { "__setitem__", (PyCFunction) _wrap_Sequence___setitem__, METH_VARARGS, (char*) "__setitem__(long i, tom::Symbol const & val)" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__tom__Sequence_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "tomlib.Sequence",                        /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_Sequence_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) (reprfunc) _wrap_Sequence_repr_closure, /* tp_repr */
    &SwigPyBuiltin__tom__Sequence_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__tom__Sequence_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__tom__Sequence_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__tom__Sequence_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "tom::Sequence",                          /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__tom__Sequence_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__tom__Sequence_methods,     /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__tom__Sequence_getset,      /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_Sequence,            /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) (binaryfunc) _wrap_Sequence___getitem__, /* mp_subscript */
    (objobjargproc) (objobjargproc) _wrap_Sequence___setitem___closure, /* mp_ass_subscript */
  },
  {
    (lenfunc) (lenfunc) _wrap_Sequence___len___closure, /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__tom__Sequence_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__tom__Sequence_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Sequences)
SWIGINTERN PyGetSetDef SwigPyBuiltin__std__vectorT_tom__Sequence_t_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__std__vectorT_tom__Sequence_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__std__vectorT_tom__Sequence_t_methods[] = {
  { "iterator", (PyCFunction) _wrap_Sequences_iterator, METH_NOARGS, (char*) "iterator() -> SwigPyIterator" },
  { "__nonzero__", (PyCFunction) _wrap_Sequences___nonzero__, METH_NOARGS, (char*) "__nonzero__() -> bool" },
  { "__bool__", (PyCFunction) _wrap_Sequences___bool__, METH_NOARGS, (char*) "__bool__() -> bool" },
  { "__len__", (PyCFunction) _wrap_Sequences___len__, METH_NOARGS, (char*) "__len__() -> std::vector< tom::Sequence >::size_type" },
  { "pop", (PyCFunction) _wrap_Sequences_pop, METH_NOARGS, (char*) "pop() -> Sequence" },
  { "__getslice__", (PyCFunction) _wrap_Sequences___getslice__, METH_VARARGS, (char*) "__getslice__(std::vector< tom::Sequence >::difference_type i, std::vector< tom::Sequence >::difference_type j) -> Sequences" },
  { "__setslice__", (PyCFunction) _wrap_Sequences___setslice__, METH_VARARGS, (char*) "\n"
		"__setslice__(std::vector< tom::Sequence >::difference_type i, std::vector< tom::Sequence >::difference_type j, Sequences v)\n"
		"__setslice__(std::vector< tom::Sequence >::difference_type i, std::vector< tom::Sequence >::difference_type j)\n"
		"" },
  { "__delslice__", (PyCFunction) _wrap_Sequences___delslice__, METH_VARARGS, (char*) "__delslice__(std::vector< tom::Sequence >::difference_type i, std::vector< tom::Sequence >::difference_type j)" },
  { "__delitem__", (PyCFunction) _wrap_Sequences___delitem__, METH_VARARGS, (char*) "\n"
		"__delitem__(std::vector< tom::Sequence >::difference_type i)\n"
		"__delitem__(PySliceObject * slice)\n"
		"" },
  { "__getitem__", (PyCFunction) _wrap_Sequences___getitem__, METH_VARARGS, (char*) "\n"
		"__getitem__(PySliceObject * slice) -> Sequences\n"
		"__getitem__(std::vector< tom::Sequence >::difference_type i) -> Sequence\n"
		"" },
  { "__setitem__", (PyCFunction) _wrap_Sequences___setitem__, METH_VARARGS, (char*) "\n"
		"__setitem__(PySliceObject * slice, Sequences v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"__setitem__(std::vector< tom::Sequence >::difference_type i, Sequence x)\n"
		"__setitem__(std::vector< tom::Sequence >::difference_type i)\n"
		"" },
  { "append", (PyCFunction) _wrap_Sequences_append, METH_O, (char*) "append(Sequence x)" },
  { "empty", (PyCFunction) _wrap_Sequences_empty, METH_NOARGS, (char*) "empty() -> bool" },
  { "size", (PyCFunction) _wrap_Sequences_size, METH_NOARGS, (char*) "size() -> std::vector< tom::Sequence >::size_type" },
  { "clear", (PyCFunction) _wrap_Sequences_clear, METH_NOARGS, (char*) "clear()" },
  { "swap", (PyCFunction) _wrap_Sequences_swap, METH_O, (char*) "swap(Sequences v)" },
  { "get_allocator", (PyCFunction) _wrap_Sequences_get_allocator, METH_NOARGS, (char*) "get_allocator() -> std::vector< tom::Sequence >::allocator_type" },
  { "begin", (PyCFunction) _wrap_Sequences_begin, METH_NOARGS, (char*) "begin() -> std::vector< tom::Sequence >::iterator" },
  { "end", (PyCFunction) _wrap_Sequences_end, METH_NOARGS, (char*) "end() -> std::vector< tom::Sequence >::iterator" },
  { "rbegin", (PyCFunction) _wrap_Sequences_rbegin, METH_NOARGS, (char*) "rbegin() -> std::vector< tom::Sequence >::reverse_iterator" },
  { "rend", (PyCFunction) _wrap_Sequences_rend, METH_NOARGS, (char*) "rend() -> std::vector< tom::Sequence >::reverse_iterator" },
  { "pop_back", (PyCFunction) _wrap_Sequences_pop_back, METH_NOARGS, (char*) "pop_back()" },
  { "resize", (PyCFunction) _wrap_Sequences_resize, METH_VARARGS, (char*) "\n"
		"resize(std::vector< tom::Sequence >::size_type new_size)\n"
		"resize(std::vector< tom::Sequence >::size_type new_size, Sequence x)\n"
		"" },
  { "erase", (PyCFunction) _wrap_Sequences_erase, METH_VARARGS, (char*) "\n"
		"erase(std::vector< tom::Sequence >::iterator pos) -> std::vector< tom::Sequence >::iterator\n"
		"erase(std::vector< tom::Sequence >::iterator first, std::vector< tom::Sequence >::iterator last) -> std::vector< tom::Sequence >::iterator\n"
		"" },
  { "push_back", (PyCFunction) _wrap_Sequences_push_back, METH_O, (char*) "push_back(Sequence x)" },
  { "front", (PyCFunction) _wrap_Sequences_front, METH_NOARGS, (char*) "front() -> Sequence" },
  { "back", (PyCFunction) _wrap_Sequences_back, METH_NOARGS, (char*) "back() -> Sequence" },
  { "assign", (PyCFunction) _wrap_Sequences_assign, METH_VARARGS, (char*) "assign(std::vector< tom::Sequence >::size_type n, Sequence x)" },
  { "insert", (PyCFunction) _wrap_Sequences_insert, METH_VARARGS, (char*) "\n"
		"insert(std::vector< tom::Sequence >::iterator pos, Sequence x) -> std::vector< tom::Sequence >::iterator\n"
		"insert(std::vector< tom::Sequence >::iterator pos, std::vector< tom::Sequence >::size_type n, Sequence x)\n"
		"" },
  { "reserve", (PyCFunction) _wrap_Sequences_reserve, METH_O, (char*) "reserve(std::vector< tom::Sequence >::size_type n)" },
  { "capacity", (PyCFunction) _wrap_Sequences_capacity, METH_NOARGS, (char*) "capacity() -> std::vector< tom::Sequence >::size_type" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__std__vectorT_tom__Sequence_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "tomlib.Sequences",                       /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_Sequences_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__std__vectorT_tom__Sequence_t_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__std__vectorT_tom__Sequence_t_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__std__vectorT_tom__Sequence_t_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__std__vectorT_tom__Sequence_t_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "std::vector< tom::Sequence >",           /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__std__vectorT_tom__Sequence_t_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) (getiterfunc) _wrap_Sequences_iterator_closure, /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__std__vectorT_tom__Sequence_t_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__std__vectorT_tom__Sequence_t_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_Sequences,           /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) (inquiry) _wrap_Sequences___nonzero___closure, /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) (binaryfunc) _wrap_Sequences___getitem___closure, /* mp_subscript */
    (objobjargproc) (objobjargproc) _wrap_Sequences___setitem___closure, /* mp_ass_subscript */
  },
  {
    (lenfunc) (lenfunc) _wrap_Sequences___len___closure, /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__std__vectorT_tom__Sequence_t_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__std__vectorT_tom__Sequence_t_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Policy)
static SwigPyGetSet Policy_exploration__getset = { _wrap_Policy_exploration__get, _wrap_Policy_exploration__set };
static SwigPyGetSet Policy_nU__getset = { _wrap_Policy_nU__get, _wrap_Policy_nU__set };
SWIGINTERN PyGetSetDef SwigPyBuiltin__tom__Policy_getset[] = {
    { (char*) "exploration_", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"tom::Policy.exploration_", (void*) &Policy_exploration__getset }
,
    { (char*) "nU_", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"tom::Policy.nU_", (void*) &Policy_nU__getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__tom__Policy_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__tom__Policy_methods[] = {
  { "u", (PyCFunction) _wrap_Policy_u, METH_VARARGS, (char*) "u(Eigen::VectorXd const & w, Random r) -> int" },
  { "p", (PyCFunction) _wrap_Policy_p, METH_O, (char*) "p(Eigen::VectorXd const & w) -> Eigen::VectorXd" },
  { "addPlane", (PyCFunction) _wrap_Policy_addPlane, METH_VARARGS, (char*) "addPlane(int u, IntVector indices, DoubleVector vals)" },
  { "toJSON", (PyCFunction) _wrap_Policy_toJSON, METH_NOARGS, (char*) "toJSON() -> std::string" },
  { "fromJSON", (PyCFunction) _wrap_Policy_fromJSON, METH_O, (char*) "fromJSON(char const * string)" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__tom__Policy_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "tomlib.Policy",                          /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_Policy_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__tom__Policy_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__tom__Policy_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__tom__Policy_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__tom__Policy_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "tom::Policy",                            /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__tom__Policy_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__tom__Policy_methods,       /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__tom__Policy_getset,        /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_Policy,              /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__tom__Policy_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__tom__Policy_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Oom)
static SwigPyGetSet Oom_nImpossible__getset = { _wrap_Oom_nImpossible__get, _wrap_Oom_nImpossible__set };
static SwigPyGetSet Oom_epsilonZero__getset = { _wrap_Oom_epsilonZero__get, _wrap_Oom_epsilonZero__set };
static SwigPyGetSet Oom_nSetback__getset = { _wrap_Oom_nSetback__get, _wrap_Oom_nSetback__set };
static SwigPyGetSet Oom_maxSetback__getset = { _wrap_Oom_maxSetback__get, _wrap_Oom_maxSetback__set };
static SwigPyGetSet Oom_fixPredictionMargin__getset = { _wrap_Oom_fixPredictionMargin__get, _wrap_Oom_fixPredictionMargin__set };
static SwigPyGetSet Oom_valid__getset = { _wrap_Oom_valid__get, _wrap_Oom_valid__set };
static SwigPyGetSet Oom_maxPredictionError__getset = { _wrap_Oom_maxPredictionError__get, _wrap_Oom_maxPredictionError__set };
static SwigPyGetSet Oom_outputPrecision__getset = { _wrap_Oom_outputPrecision__get, _wrap_Oom_outputPrecision__set };
static SwigPyGetSet Oom_minPrediction__getset = { _wrap_Oom_minPrediction__get, _wrap_Oom_minPrediction__set };
static SwigPyGetSet Oom_nFixPrediction__getset = { _wrap_Oom_nFixPrediction__get, _wrap_Oom_nFixPrediction__set };
SWIGINTERN PyGetSetDef SwigPyBuiltin__tom__Oom_getset[] = {
    { (char*) "nImpossible_", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"tom::Oom.nImpossible_", (void*) &Oom_nImpossible__getset }
,
    { (char*) "epsilonZero_", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"tom::Oom.epsilonZero_", (void*) &Oom_epsilonZero__getset }
,
    { (char*) "nSetback_", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"tom::Oom.nSetback_", (void*) &Oom_nSetback__getset }
,
    { (char*) "maxSetback_", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"tom::Oom.maxSetback_", (void*) &Oom_maxSetback__getset }
,
    { (char*) "fixPredictionMargin_", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"tom::Oom.fixPredictionMargin_", (void*) &Oom_fixPredictionMargin__getset }
,
    { (char*) "valid_", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"tom::Oom.valid_", (void*) &Oom_valid__getset }
,
    { (char*) "maxPredictionError_", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"tom::Oom.maxPredictionError_", (void*) &Oom_maxPredictionError__getset }
,
    { (char*) "outputPrecision_", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"tom::Oom.outputPrecision_", (void*) &Oom_outputPrecision__getset }
,
    { (char*) "minPrediction_", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"tom::Oom.minPrediction_", (void*) &Oom_minPrediction__getset }
,
    { (char*) "nFixPrediction_", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"tom::Oom.nFixPrediction_", (void*) &Oom_nFixPrediction__getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__tom__Oom_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  switch (op) {
    case Py_EQ : result = _wrap_Oom___eq__(self, other); break;
    default : break;
  }
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__tom__Oom_methods[] = {
  { "setSize", (PyCFunction) _wrap_Oom_setSize, METH_VARARGS, (char*) "\n"
		"setSize(int dim, int nO, int nU=0)\n"
		"setSize(int dim, int nO)\n"
		"" },
  { "init", (PyCFunction) _wrap_Oom_init, METH_NOARGS, (char*) "init()" },
  { "validate", (PyCFunction) _wrap_Oom_validate, METH_NOARGS, (char*) "validate()" },
  { "nU", (PyCFunction) _wrap_Oom_nU, METH_NOARGS, (char*) "nU() -> int" },
  { "nO", (PyCFunction) _wrap_Oom_nO, METH_NOARGS, (char*) "nO() -> int" },
  { "dim", (PyCFunction) _wrap_Oom_dim, METH_NOARGS, (char*) "dim() -> int" },
  { "sig", (PyCFunction) _wrap_Oom_sig, METH_VARARGS, (char*) "\n"
		"sig() -> Eigen::RowVectorXd const &\n"
		"sig() -> Eigen::RowVectorXd\n"
		"sig(Eigen::RowVectorXd const & s)\n"
		"" },
  { "tau", (PyCFunction) _wrap_Oom_tau, METH_VARARGS, (char*) "\n"
		"tau(tom::Symbol o, tom::Symbol u=0) -> Eigen::MatrixXd const &\n"
		"tau(tom::Symbol o) -> Eigen::MatrixXd const\n"
		"tau(tom::Symbol o, tom::Symbol u=0) -> Eigen::MatrixXd\n"
		"tau(tom::Symbol o) -> Eigen::MatrixXd\n"
		"tau(tom::Symbol o, tom::Symbol u, Eigen::MatrixXd const & tau_o_u)\n"
		"\n"
		"return a const reference to the observable operator corresponding to observation  o and input  u.\n"
		"" },
  { "w0", (PyCFunction) _wrap_Oom_w0, METH_VARARGS, (char*) "\n"
		"w0() -> Eigen::VectorXd const &\n"
		"w0() -> Eigen::VectorXd\n"
		"w0(Eigen::VectorXd const & w)\n"
		"" },
  { "wt", (PyCFunction) _wrap_Oom_wt, METH_VARARGS, (char*) "\n"
		"wt() -> Eigen::VectorXd const &\n"
		"wt(Eigen::VectorXd const & w, Sequence h)\n"
		"wt(Eigen::VectorXd const & w)\n"
		"" },
  { "prediction", (PyCFunction) _wrap_Oom_prediction, METH_VARARGS, (char*) "\n"
		"prediction() -> Eigen::VectorXd const &\n"
		"prediction(tom::Symbol o) -> double\n"
		"" },
  { "history", (PyCFunction) _wrap_Oom_history, METH_O, (char*) "history(Sequence seq)" },
  { "reset", (PyCFunction) _wrap_Oom_reset, METH_NOARGS, (char*) "reset()" },
  { "resetCounters", (PyCFunction) _wrap_Oom_resetCounters, METH_NOARGS, (char*) "resetCounters()" },
  { "update", (PyCFunction) _wrap_Oom_update, METH_VARARGS, (char*) "\n"
		"update(tom::Symbol o, tom::Symbol u=0)\n"
		"update(tom::Symbol o)\n"
		"" },
  { "condition", (PyCFunction) _wrap_Oom_condition, METH_VARARGS, (char*) "\n"
		"condition(tom::Symbol u=0)\n"
		"condition()\n"
		"" },
  { "generate", (PyCFunction) _wrap_Oom_generate, METH_VARARGS, (char*) "\n"
		"generate(unsigned long length, Random r, Policy policy) -> Sequence\n"
		"generate(unsigned long length, Random r) -> Sequence\n"
		"generate(unsigned long length, Random r, double alpha, Policy policy) -> Sequence\n"
		"generate(unsigned long length, Random r, double alpha) -> Sequence\n"
		"" },
  { "f", (PyCFunction) _wrap_Oom_f, METH_VARARGS, (char*) "\n"
		"f(tom::Symbol o, tom::Symbol u=0) -> double\n"
		"f(tom::Symbol o) -> double\n"
		"f(Sequence seq) -> double\n"
		"f(Sequences chaSeqs, Sequences indSeqs) -> Eigen::MatrixXd\n"
		"f(Sequences chaSeqs, Sequences indSeqs, tom::Symbol o, tom::Symbol u=0) -> Eigen::MatrixXd\n"
		"f(Sequences chaSeqs, Sequences indSeqs, tom::Symbol o) -> Eigen::MatrixXd\n"
		"" },
  { "log_f", (PyCFunction) _wrap_Oom_log_f, METH_O, (char*) "log_f(Sequence seq) -> double" },
  { "ll", (PyCFunction) _wrap_Oom_ll, METH_O, (char*) "ll(Sequence seq) -> double" },
  { "averageOneStepPredictionError", (PyCFunction) _wrap_Oom_averageOneStepPredictionError, METH_VARARGS, (char*) "averageOneStepPredictionError(Oom gen, Sequence seq) -> double" },
  { "harvestStates", (PyCFunction) _wrap_Oom_harvestStates, METH_O, (char*) "harvestStates(Sequence seq) -> Eigen::MatrixXf *" },
  { "stationaryState", (PyCFunction) _wrap_Oom_stationaryState, METH_NOARGS, (char*) "stationaryState() -> Eigen::VectorXd" },
  { "reverse", (PyCFunction) _wrap_Oom_reverse, METH_VARARGS, (char*) "\n"
		"reverse(int normalization=1) -> std::shared_ptr< tom::Oom >\n"
		"reverse() -> std::shared_ptr< tom::Oom >\n"
		"" },
  { "transform", (PyCFunction) _wrap_Oom_transform, METH_VARARGS, (char*) "\n"
		"transform(Eigen::RowVectorXd const & sig, Eigen::VectorXd const & w0)\n"
		"transform(Eigen::RowVectorXd const & sig)\n"
		"" },
  { "conjugate", (PyCFunction) _wrap_Oom_conjugate, METH_VARARGS, (char*) "conjugate(Eigen::MatrixXd const & rho, Eigen::MatrixXd const & rhoInv)" },
  { "__eq__", (PyCFunction) _wrap_Oom___eq__, METH_O, (char*) "__eq__(Oom other) -> bool" },
  { "toString", (PyCFunction) _wrap_Oom_toString, METH_NOARGS, (char*) "toString() -> std::string" },
  { "toJSON", (PyCFunction) _wrap_Oom_toJSON, METH_NOARGS, (char*) "toJSON() -> std::string" },
  { "fromJSON", (PyCFunction) _wrap_Oom_fromJSON, METH_O, (char*) "fromJSON(char const * string)" },
  { "repr", (PyCFunction) _wrap_Oom_repr, METH_NOARGS, (char*) "repr() -> std::string" },
  { "__lshift__", (PyCFunction) _wrap_Oom___lshift__, METH_O, (char*) "__lshift__(istream istream) -> istream" },
  { "__rshift__", (PyCFunction) _wrap_Oom___rshift__, METH_O, (char*) "__rshift__(ostream os) -> ostream" },
  { "normalizePrediction", (PyCFunction) _wrap_Oom_normalizePrediction, METH_NOARGS, (char*) "normalizePrediction() -> double" },
  { "setBack", (PyCFunction) _wrap_Oom_setBack, METH_NOARGS, (char*) "setBack() -> bool" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__tom__Oom_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "tomlib.Oom",                             /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_Oom_closure,    /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) (reprfunc) _wrap_Oom_repr_closure, /* tp_repr */
    &SwigPyBuiltin__tom__Oom_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__tom__Oom_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__tom__Oom_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__tom__Oom_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "tom::Oom",                               /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__tom__Oom_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__tom__Oom_methods,          /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__tom__Oom_getset,           /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_Oom,                 /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) (binaryfunc) _wrap_Oom___lshift__, /* nb_lshift */
    (binaryfunc) (binaryfunc) _wrap_Oom___rshift__, /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__tom__Oom_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__tom__Oom_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_EMStopCondition)
static SwigPyGetSet EMStopCondition_minRelativeImprovement__getset = { _wrap_EMStopCondition_minRelativeImprovement__get, _wrap_EMStopCondition_minRelativeImprovement__set };
static SwigPyGetSet EMStopCondition_previousLog2Likelihood__getset = { _wrap_EMStopCondition_previousLog2Likelihood__get, _wrap_EMStopCondition_previousLog2Likelihood__set };
static SwigPyGetSet EMStopCondition_maxEMIterations__getset = { _wrap_EMStopCondition_maxEMIterations__get, _wrap_EMStopCondition_maxEMIterations__set };
SWIGINTERN PyGetSetDef SwigPyBuiltin__tom__EMStopCondition_getset[] = {
    { (char*) "minRelativeImprovement_", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"tom::EMStopCondition.minRelativeImprovement_", (void*) &EMStopCondition_minRelativeImprovement__getset }
,
    { (char*) "previousLog2Likelihood_", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"tom::EMStopCondition.previousLog2Likelihood_", (void*) &EMStopCondition_previousLog2Likelihood__getset }
,
    { (char*) "maxEMIterations_", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"tom::EMStopCondition.maxEMIterations_", (void*) &EMStopCondition_maxEMIterations__getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__tom__EMStopCondition_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__tom__EMStopCondition_methods[] = {
  { "__call__", (PyCFunction) _wrap_EMStopCondition___call__, METH_VARARGS, (char*) "__call__(int iteration, double log2Likelihood) -> bool" },
  { "__disown__", (PyCFunction) Swig::Director::swig_pyobj_disown< tom::EMStopCondition >, METH_NOARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__tom__EMStopCondition_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "tomlib.EMStopCondition",                 /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_EMStopCondition_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__tom__EMStopCondition_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__tom__EMStopCondition_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__tom__EMStopCondition_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) (ternarycallfunc) _wrap_EMStopCondition___call___closure, /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__tom__EMStopCondition_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "tom::EMStopCondition",                   /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__tom__EMStopCondition_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__tom__EMStopCondition_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__tom__EMStopCondition_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_EMStopCondition,     /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__tom__EMStopCondition_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__tom__EMStopCondition_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Hmm)
SWIGINTERN PyGetSetDef SwigPyBuiltin__tom__Hmm_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__tom__Hmm_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__tom__Hmm_methods[] = {
  { "randomize", (PyCFunction) _wrap_Hmm_randomize, METH_VARARGS, (char*) "\n"
		"randomize(double exponent=1, Random rnd)\n"
		"randomize(double exponent=1)\n"
		"randomize()\n"
		"" },
  { "normalize", (PyCFunction) _wrap_Hmm_normalize, METH_NOARGS, (char*) "normalize() -> bool" },
  { "init", (PyCFunction) _wrap_Hmm_init, METH_NOARGS, (char*) "init()" },
  { "trainEM", (PyCFunction) _wrap_Hmm_trainEM, METH_VARARGS, (char*) "\n"
		"trainEM(Sequence trainSequence, EMStopCondition stopCondition) -> double\n"
		"trainEM(Sequence trainSequence) -> double\n"
		"" },
  { "nStates", (PyCFunction) _wrap_Hmm_nStates, METH_NOARGS, (char*) "nStates() -> int" },
  { "nObservations", (PyCFunction) _wrap_Hmm_nObservations, METH_NOARGS, (char*) "nObservations() -> int" },
  { "nInputs", (PyCFunction) _wrap_Hmm_nInputs, METH_NOARGS, (char*) "nInputs() -> int" },
  { "setSize", (PyCFunction) _wrap_Hmm_setSize, METH_VARARGS, (char*) "\n"
		"setSize(int nStates, int nObservations, int nInputs, bool zeroParameters=False)\n"
		"setSize(int nStates, int nObservations, int nInputs)\n"
		"" },
  { "pi", (PyCFunction) _wrap_Hmm_pi, METH_VARARGS, (char*) "\n"
		"pi() -> Eigen::VectorXd &\n"
		"pi(Eigen::VectorXd const & _pi)\n"
		"" },
  { "T", (PyCFunction) _wrap_Hmm_T, METH_VARARGS, (char*) "\n"
		"T(int a=0) -> Eigen::MatrixXd &\n"
		"T() -> Eigen::MatrixXd\n"
		"T(Eigen::MatrixXd const & _T)\n"
		"T(int a, Eigen::MatrixXd const & _Ta)\n"
		"" },
  { "E", (PyCFunction) _wrap_Hmm_E, METH_VARARGS, (char*) "\n"
		"E(int o, int a=0) -> Eigen::VectorXd &\n"
		"E(int o) -> Eigen::VectorXd\n"
		"E(int o, int a, Eigen::VectorXd const & _Eoa)\n"
		"E(int o, Eigen::VectorXd const & _Eo)\n"
		"" },
  { "Theta", (PyCFunction) _wrap_Hmm_Theta, METH_VARARGS, (char*) "\n"
		"Theta(int o, int a=0) -> Eigen::MatrixXd &\n"
		"Theta(int o) -> Eigen::MatrixXd\n"
		"" },
  { "toJSON", (PyCFunction) _wrap_Hmm_toJSON, METH_NOARGS, (char*) "toJSON() -> std::string" },
  { "fromJSON", (PyCFunction) _wrap_Hmm_fromJSON, METH_O, (char*) "fromJSON(char const * string)" },
  { "repr", (PyCFunction) _wrap_Hmm_repr, METH_NOARGS, (char*) "repr() -> std::string" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__tom__Hmm_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "tomlib.Hmm",                             /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_Hmm_closure,    /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) (reprfunc) _wrap_Hmm_repr_closure, /* tp_repr */
    &SwigPyBuiltin__tom__Hmm_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__tom__Hmm_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__tom__Hmm_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__tom__Hmm_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "tom::Hmm",                               /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__tom__Hmm_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__tom__Hmm_methods,          /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__tom__Hmm_getset,           /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_Hmm,                 /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__tom__Hmm_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__tom__Hmm_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_NidxVector)
SWIGINTERN PyGetSetDef SwigPyBuiltin__std__vectorT_stree__Nidx_t_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__std__vectorT_stree__Nidx_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__std__vectorT_stree__Nidx_t_methods[] = {
  { "iterator", (PyCFunction) _wrap_NidxVector_iterator, METH_NOARGS, (char*) "iterator() -> SwigPyIterator" },
  { "__nonzero__", (PyCFunction) _wrap_NidxVector___nonzero__, METH_NOARGS, (char*) "__nonzero__() -> bool" },
  { "__bool__", (PyCFunction) _wrap_NidxVector___bool__, METH_NOARGS, (char*) "__bool__() -> bool" },
  { "__len__", (PyCFunction) _wrap_NidxVector___len__, METH_NOARGS, (char*) "__len__() -> std::vector< unsigned int >::size_type" },
  { "pop", (PyCFunction) _wrap_NidxVector_pop, METH_NOARGS, (char*) "pop() -> std::vector< unsigned int >::value_type" },
  { "__getslice__", (PyCFunction) _wrap_NidxVector___getslice__, METH_VARARGS, (char*) "__getslice__(std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j) -> NidxVector" },
  { "__setslice__", (PyCFunction) _wrap_NidxVector___setslice__, METH_VARARGS, (char*) "\n"
		"__setslice__(std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j, NidxVector v)\n"
		"__setslice__(std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)\n"
		"" },
  { "__delslice__", (PyCFunction) _wrap_NidxVector___delslice__, METH_VARARGS, (char*) "__delslice__(std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)" },
  { "__delitem__", (PyCFunction) _wrap_NidxVector___delitem__, METH_VARARGS, (char*) "\n"
		"__delitem__(std::vector< unsigned int >::difference_type i)\n"
		"__delitem__(PySliceObject * slice)\n"
		"" },
  { "__getitem__", (PyCFunction) _wrap_NidxVector___getitem__, METH_VARARGS, (char*) "\n"
		"__getitem__(PySliceObject * slice) -> NidxVector\n"
		"__getitem__(std::vector< unsigned int >::difference_type i) -> std::vector< unsigned int >::value_type const\n"
		"" },
  { "__setitem__", (PyCFunction) _wrap_NidxVector___setitem__, METH_VARARGS, (char*) "\n"
		"__setitem__(PySliceObject * slice, NidxVector v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"__setitem__(std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::value_type const & x)\n"
		"__setitem__(std::vector< unsigned int >::difference_type i)\n"
		"" },
  { "append", (PyCFunction) _wrap_NidxVector_append, METH_O, (char*) "append(std::vector< unsigned int >::value_type const & x)" },
  { "empty", (PyCFunction) _wrap_NidxVector_empty, METH_NOARGS, (char*) "empty() -> bool" },
  { "size", (PyCFunction) _wrap_NidxVector_size, METH_NOARGS, (char*) "size() -> std::vector< unsigned int >::size_type" },
  { "clear", (PyCFunction) _wrap_NidxVector_clear, METH_NOARGS, (char*) "clear()" },
  { "swap", (PyCFunction) _wrap_NidxVector_swap, METH_O, (char*) "swap(NidxVector v)" },
  { "get_allocator", (PyCFunction) _wrap_NidxVector_get_allocator, METH_NOARGS, (char*) "get_allocator() -> std::vector< unsigned int >::allocator_type" },
  { "begin", (PyCFunction) _wrap_NidxVector_begin, METH_NOARGS, (char*) "begin() -> std::vector< unsigned int >::iterator" },
  { "end", (PyCFunction) _wrap_NidxVector_end, METH_NOARGS, (char*) "end() -> std::vector< unsigned int >::iterator" },
  { "rbegin", (PyCFunction) _wrap_NidxVector_rbegin, METH_NOARGS, (char*) "rbegin() -> std::vector< unsigned int >::reverse_iterator" },
  { "rend", (PyCFunction) _wrap_NidxVector_rend, METH_NOARGS, (char*) "rend() -> std::vector< unsigned int >::reverse_iterator" },
  { "pop_back", (PyCFunction) _wrap_NidxVector_pop_back, METH_NOARGS, (char*) "pop_back()" },
  { "resize", (PyCFunction) _wrap_NidxVector_resize, METH_VARARGS, (char*) "\n"
		"resize(std::vector< unsigned int >::size_type new_size)\n"
		"resize(std::vector< unsigned int >::size_type new_size, std::vector< unsigned int >::value_type const & x)\n"
		"" },
  { "erase", (PyCFunction) _wrap_NidxVector_erase, METH_VARARGS, (char*) "\n"
		"erase(std::vector< unsigned int >::iterator pos) -> std::vector< unsigned int >::iterator\n"
		"erase(std::vector< unsigned int >::iterator first, std::vector< unsigned int >::iterator last) -> std::vector< unsigned int >::iterator\n"
		"" },
  { "push_back", (PyCFunction) _wrap_NidxVector_push_back, METH_O, (char*) "push_back(std::vector< unsigned int >::value_type const & x)" },
  { "front", (PyCFunction) _wrap_NidxVector_front, METH_NOARGS, (char*) "front() -> std::vector< unsigned int >::value_type const &" },
  { "back", (PyCFunction) _wrap_NidxVector_back, METH_NOARGS, (char*) "back() -> std::vector< unsigned int >::value_type const &" },
  { "assign", (PyCFunction) _wrap_NidxVector_assign, METH_VARARGS, (char*) "assign(std::vector< unsigned int >::size_type n, std::vector< unsigned int >::value_type const & x)" },
  { "insert", (PyCFunction) _wrap_NidxVector_insert, METH_VARARGS, (char*) "\n"
		"insert(std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::value_type const & x) -> std::vector< unsigned int >::iterator\n"
		"insert(std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::size_type n, std::vector< unsigned int >::value_type const & x)\n"
		"" },
  { "reserve", (PyCFunction) _wrap_NidxVector_reserve, METH_O, (char*) "reserve(std::vector< unsigned int >::size_type n)" },
  { "capacity", (PyCFunction) _wrap_NidxVector_capacity, METH_NOARGS, (char*) "capacity() -> std::vector< unsigned int >::size_type" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__std__vectorT_stree__Nidx_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "tomlib.NidxVector",                      /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_NidxVector_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__std__vectorT_stree__Nidx_t_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__std__vectorT_stree__Nidx_t_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__std__vectorT_stree__Nidx_t_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__std__vectorT_stree__Nidx_t_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "std::vector< stree::Nidx >",             /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__std__vectorT_stree__Nidx_t_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) (getiterfunc) _wrap_NidxVector_iterator_closure, /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__std__vectorT_stree__Nidx_t_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__std__vectorT_stree__Nidx_t_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_NidxVector,          /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) (inquiry) _wrap_NidxVector___nonzero___closure, /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) (binaryfunc) _wrap_NidxVector___getitem___closure, /* mp_subscript */
    (objobjargproc) (objobjargproc) _wrap_NidxVector___setitem___closure, /* mp_ass_subscript */
  },
  {
    (lenfunc) (lenfunc) _wrap_NidxVector___len___closure, /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__std__vectorT_stree__Nidx_t_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__std__vectorT_stree__Nidx_t_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_STree)
static SwigPyGetSet STree_size__getset = { _wrap_STree_size__get, _wrap_STree_size__set };
static SwigPyGetSet STree_symbolSize__getset = { _wrap_STree_symbolSize__get, _wrap_STree_symbolSize__set };
static SwigPyGetSet STree_annotated__getset = { _wrap_STree_annotated__get, _wrap_STree_annotated__set };
static SwigPyGetSet STree_text__getset = { _wrap_STree_text__get, _wrap_STree_text__set };
SWIGINTERN PyGetSetDef SwigPyBuiltin__stree__STree_getset[] = {
    { (char*) "size_", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"stree::STree.size_", (void*) &STree_size__getset }
,
    { (char*) "symbolSize_", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"stree::STree.symbolSize_", (void*) &STree_symbolSize__getset }
,
    { (char*) "annotated_", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"stree::STree.annotated_", (void*) &STree_annotated__getset }
,
    { (char*) "text_", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"stree::STree.text_", (void*) &STree_text__getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__stree__STree_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__stree__STree_methods[] = {
  { "initialize", (PyCFunction) _wrap_STree_initialize, METH_VARARGS, (char*) "\n"
		"initialize(Sequence text, stree::Idx size=0, unsigned int symbolSize=1, bool annotated=True)\n"
		"initialize(Sequence text, stree::Idx size=0, unsigned int symbolSize=1)\n"
		"initialize(Sequence text, stree::Idx size=0)\n"
		"initialize(Sequence text)\n"
		"" },
  { "extendTo", (PyCFunction) _wrap_STree_extendTo, METH_O, (char*) "extendTo(stree::Idx size)" },
  { "nLeaves", (PyCFunction) _wrap_STree_nLeaves, METH_NOARGS, (char*) "nLeaves() -> stree::Idx" },
  { "nInternalNodes", (PyCFunction) _wrap_STree_nInternalNodes, METH_NOARGS, (char*) "nInternalNodes() -> stree::Idx" },
  { "nNodes", (PyCFunction) _wrap_STree_nNodes, METH_NOARGS, (char*) "nNodes() -> stree::Idx" },
  { "getDeepestVirtualLeafBranch", (PyCFunction) _wrap_STree_getDeepestVirtualLeafBranch, METH_NOARGS, (char*) "getDeepestVirtualLeafBranch() -> STreeNode" },
  { "n", (PyCFunction) _wrap_STree_n, METH_O, (char*) "n(stree::Nidx const node) -> stree::Idx" },
  { "d", (PyCFunction) _wrap_STree_d, METH_O, (char*) "d(stree::Nidx const node) -> stree::Idx" },
  { "hi", (PyCFunction) _wrap_STree_hi, METH_O, (char*) "hi(stree::Nidx const node) -> stree::Idx" },
  { "l", (PyCFunction) _wrap_STree_l, METH_O, (char*) "l(stree::Nidx const node) -> stree::Nidx const &" },
  { "r", (PyCFunction) _wrap_STree_r, METH_O, (char*) "r(stree::Nidx const node) -> stree::Nidx const &" },
  { "c", (PyCFunction) _wrap_STree_c, METH_VARARGS, (char*) "\n"
		"c(stree::Nidx const node) -> stree::Nidx const &\n"
		"c(stree::Nidx const node, stree::Char chr) -> stree::Nidx const\n"
		"" },
  { "sl", (PyCFunction) _wrap_STree_sl, METH_O, (char*) "sl(stree::Nidx const node) -> stree::Nidx const &" },
  { "sib", (PyCFunction) _wrap_STree_sib, METH_O, (char*) "sib(stree::Nidx const node) -> stree::Nidx" },
  { "at", (PyCFunction) _wrap_STree_at, METH_O, (char*) "at(stree::Idx pos) -> stree::Char" },
  { "serialize", (PyCFunction) _wrap_STree_serialize, METH_NOARGS, (char*) "serialize() -> std::string" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__stree__STree_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "tomlib.STree",                           /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_STree_closure,  /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__stree__STree_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__stree__STree_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__stree__STree_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__stree__STree_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "stree::STree",                           /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__stree__STree_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__stree__STree_methods,      /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__stree__STree_getset,       /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_STree,               /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__stree__STree_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__stree__STree_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_STreeNode)
SWIGINTERN PyGetSetDef SwigPyBuiltin__stree__STreeNode_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__stree__STreeNode_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  switch (op) {
    case Py_EQ : result = _wrap_STreeNode___eq__(self, other); break;
    case Py_LT : result = _wrap_STreeNode___lt__(self, other); break;
    default : break;
  }
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__stree__STreeNode_methods[] = {
  { "isValid", (PyCFunction) _wrap_STreeNode_isValid, METH_NOARGS, (char*) "isValid() -> bool" },
  { "setValid", (PyCFunction) _wrap_STreeNode_setValid, METH_VARARGS, (char*) "\n"
		"setValid(bool valid=True)\n"
		"setValid()\n"
		"" },
  { "isNode", (PyCFunction) _wrap_STreeNode_isNode, METH_NOARGS, (char*) "isNode() -> bool" },
  { "isLeaf", (PyCFunction) _wrap_STreeNode_isLeaf, METH_NOARGS, (char*) "isLeaf() -> bool" },
  { "isRoot", (PyCFunction) _wrap_STreeNode_isRoot, METH_NOARGS, (char*) "isRoot() -> bool" },
  { "index", (PyCFunction) _wrap_STreeNode_index, METH_NOARGS, (char*) "index() -> stree::Idx" },
  { "nodeIndex", (PyCFunction) _wrap_STreeNode_nodeIndex, METH_NOARGS, (char*) "nodeIndex() -> stree::Idx" },
  { "nidx", (PyCFunction) _wrap_STreeNode_nidx, METH_NOARGS, (char*) "nidx() -> stree::Nidx" },
  { "__eq__", (PyCFunction) _wrap_STreeNode___eq__, METH_O, (char*) "__eq__(STreeNode other) -> bool" },
  { "__lt__", (PyCFunction) _wrap_STreeNode___lt__, METH_O, (char*) "__lt__(STreeNode other) -> bool" },
  { "depth", (PyCFunction) _wrap_STreeNode_depth, METH_NOARGS, (char*) "depth() -> stree::Idx" },
  { "headIndex", (PyCFunction) _wrap_STreeNode_headIndex, METH_NOARGS, (char*) "headIndex() -> stree::Idx" },
  { "count", (PyCFunction) _wrap_STreeNode_count, METH_NOARGS, (char*) "count() -> stree::Idx" },
  { "getChild", (PyCFunction) _wrap_STreeNode_getChild, METH_VARARGS, (char*) "\n"
		"getChild() -> STreeNode\n"
		"getChild(stree::Char chr) -> STreeNode\n"
		"" },
  { "child", (PyCFunction) _wrap_STreeNode_child, METH_VARARGS, (char*) "\n"
		"child()\n"
		"child(stree::Char chr)\n"
		"" },
  { "getSibling", (PyCFunction) _wrap_STreeNode_getSibling, METH_NOARGS, (char*) "getSibling() -> STreeNode" },
  { "sibling", (PyCFunction) _wrap_STreeNode_sibling, METH_NOARGS, (char*) "sibling()" },
  { "getSuffixLink", (PyCFunction) _wrap_STreeNode_getSuffixLink, METH_NOARGS, (char*) "getSuffixLink() -> STreeNode" },
  { "suffixLink", (PyCFunction) _wrap_STreeNode_suffixLink, METH_NOARGS, (char*) "suffixLink()" },
  { "string", (PyCFunction) _wrap_STreeNode_string, METH_NOARGS, (char*) "string() -> Sequence" },
  { "label", (PyCFunction) _wrap_STreeNode_label, METH_O, (char*) "label(stree::Idx parentDepth) -> Sequence" },
  { "dataStr", (PyCFunction) _wrap_STreeNode_dataStr, METH_VARARGS, (char*) "\n"
		"dataStr(int width=5) -> std::string\n"
		"dataStr() -> std::string\n"
		"" },
  { "indexStr", (PyCFunction) _wrap_STreeNode_indexStr, METH_VARARGS, (char*) "\n"
		"indexStr(int width=5) -> std::string\n"
		"indexStr() -> std::string\n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__stree__STreeNode_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "tomlib.STreeNode",                       /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_STreeNode_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__stree__STreeNode_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__stree__STreeNode_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__stree__STreeNode_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__stree__STreeNode_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "stree::STreeNode",                       /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__stree__STreeNode_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__stree__STreeNode_methods,  /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__stree__STreeNode_getset,   /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_STreeNode,           /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__stree__STreeNode_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__stree__STreeNode_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_STreeEdge)
SWIGINTERN PyGetSetDef SwigPyBuiltin__stree__STreeEdge_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__stree__STreeEdge_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  switch (op) {
    case Py_EQ : result = _wrap_STreeNode___eq__(self, other); break;
    case Py_LT : result = _wrap_STreeNode___lt__(self, other); break;
    default : break;
  }
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__stree__STreeEdge_methods[] = {
  { "parentDepth", (PyCFunction) _wrap_STreeEdge_parentDepth, METH_NOARGS, (char*) "parentDepth() -> stree::Idx" },
  { "getParent", (PyCFunction) _wrap_STreeEdge_getParent, METH_NOARGS, (char*) "getParent() -> STreeNode" },
  { "getChild", (PyCFunction) _wrap_STreeEdge_getChild, METH_VARARGS, (char*) "\n"
		"getChild() -> STreeEdge\n"
		"getChild(stree::Char chr) -> STreeEdge\n"
		"" },
  { "child", (PyCFunction) _wrap_STreeEdge_child, METH_VARARGS, (char*) "\n"
		"child()\n"
		"child(stree::Char chr)\n"
		"" },
  { "getSibling", (PyCFunction) _wrap_STreeEdge_getSibling, METH_NOARGS, (char*) "getSibling() -> STreeEdge" },
  { "label", (PyCFunction) _wrap_STreeEdge_label, METH_NOARGS, (char*) "label() -> Sequence" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__stree__STreeEdge_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "tomlib.STreeEdge",                       /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_STreeEdge_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__stree__STreeEdge_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__stree__STreeEdge_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__stree__STreeEdge_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__stree__STreeEdge_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "stree::STreeEdge",                       /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__stree__STreeEdge_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__stree__STreeEdge_methods,  /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__stree__STreeEdge_getset,   /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_STreeEdge,           /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__stree__STreeEdge_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__stree__STreeEdge_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_STreePath)
SWIGINTERN PyGetSetDef SwigPyBuiltin__stree__STreePath_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__stree__STreePath_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  switch (op) {
    case Py_EQ : result = _wrap_STreeNode___eq__(self, other); break;
    case Py_LT : result = _wrap_STreeNode___lt__(self, other); break;
    default : break;
  }
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__stree__STreePath_methods[] = {
  { "child", (PyCFunction) _wrap_STreePath_child, METH_VARARGS, (char*) "\n"
		"child()\n"
		"child(stree::Char chr)\n"
		"" },
  { "getParent", (PyCFunction) _wrap_STreePath_getParent, METH_NOARGS, (char*) "getParent() -> STreeNode" },
  { "getAncestor", (PyCFunction) _wrap_STreePath_getAncestor, METH_O, (char*) "getAncestor(stree::Idx generations) -> STreeNode" },
  { "parent", (PyCFunction) _wrap_STreePath_parent, METH_NOARGS, (char*) "parent()" },
  { "nAncestors", (PyCFunction) _wrap_STreePath_nAncestors, METH_NOARGS, (char*) "nAncestors() -> stree::Idx" },
  { "parentDepth", (PyCFunction) _wrap_STreePath_parentDepth, METH_NOARGS, (char*) "parentDepth() -> stree::Idx" },
  { "label", (PyCFunction) _wrap_STreePath_label, METH_NOARGS, (char*) "label() -> Sequence" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__stree__STreePath_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "tomlib.STreePath",                       /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_STreePath_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__stree__STreePath_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__stree__STreePath_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__stree__STreePath_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__stree__STreePath_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "stree::STreePath",                       /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__stree__STreePath_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__stree__STreePath_methods,  /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__stree__STreePath_getset,   /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_STreePath,           /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__stree__STreePath_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__stree__STreePath_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_STreePos)
SWIGINTERN PyGetSetDef SwigPyBuiltin__stree__STreePos_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__stree__STreePos_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__stree__STreePos_methods[] = {
  { "setRoot", (PyCFunction) _wrap_STreePos_setRoot, METH_NOARGS, (char*) "setRoot()" },
  { "isValid", (PyCFunction) _wrap_STreePos_isValid, METH_NOARGS, (char*) "isValid() -> bool" },
  { "setValid", (PyCFunction) _wrap_STreePos_setValid, METH_VARARGS, (char*) "\n"
		"setValid(bool valid=True)\n"
		"setValid()\n"
		"" },
  { "isExplicit", (PyCFunction) _wrap_STreePos_isExplicit, METH_NOARGS, (char*) "isExplicit() -> bool" },
  { "isLeaf", (PyCFunction) _wrap_STreePos_isLeaf, METH_NOARGS, (char*) "isLeaf() -> bool" },
  { "count", (PyCFunction) _wrap_STreePos_count, METH_NOARGS, (char*) "count() -> stree::Idx" },
  { "headIndex", (PyCFunction) _wrap_STreePos_headIndex, METH_NOARGS, (char*) "headIndex() -> stree::Idx" },
  { "depth", (PyCFunction) _wrap_STreePos_depth, METH_NOARGS, (char*) "depth() -> stree::Idx" },
  { "parentDepth", (PyCFunction) _wrap_STreePos_parentDepth, METH_NOARGS, (char*) "parentDepth() -> stree::Idx" },
  { "edge", (PyCFunction) _wrap_STreePos_edge, METH_NOARGS, (char*) "edge() -> STreeEdge" },
  { "suffixLink", (PyCFunction) _wrap_STreePos_suffixLink, METH_NOARGS, (char*) "suffixLink()" },
  { "addChar", (PyCFunction) _wrap_STreePos_addChar, METH_O, (char*) "addChar(stree::Char chr)" },
  { "addString", (PyCFunction) _wrap_STreePos_addString, METH_O, (char*) "addString(Sequence str)" },
  { "string", (PyCFunction) _wrap_STreePos_string, METH_NOARGS, (char*) "string() -> Sequence" },
  { "label", (PyCFunction) _wrap_STreePos_label, METH_NOARGS, (char*) "label() -> Sequence" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__stree__STreePos_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "tomlib.STreePos",                        /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_STreePos_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__stree__STreePos_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__stree__STreePos_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__stree__STreePos_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__stree__STreePos_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "stree::STreePos",                        /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__stree__STreePos_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__stree__STreePos_methods,   /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__stree__STreePos_getset,    /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_STreePos,            /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__stree__STreePos_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__stree__STreePos_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_PrefixIterator)
SWIGINTERN PyGetSetDef SwigPyBuiltin__stree__PrefixIterator_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__stree__PrefixIterator_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  switch (op) {
    case Py_EQ : result = _wrap_STreeNode___eq__(self, other); break;
    case Py_LT : result = _wrap_STreeNode___lt__(self, other); break;
    default : break;
  }
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__stree__PrefixIterator_methods[] = {
  { "next", (PyCFunction) _wrap_PrefixIterator_next, METH_NOARGS, (char*) "next()" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__stree__PrefixIterator_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "tomlib.PrefixIterator",                  /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_PrefixIterator_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__stree__PrefixIterator_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__stree__PrefixIterator_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__stree__PrefixIterator_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__stree__PrefixIterator_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "stree::PrefixIterator",                  /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__stree__PrefixIterator_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__stree__PrefixIterator_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__stree__PrefixIterator_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_PrefixIterator,      /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__stree__PrefixIterator_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__stree__PrefixIterator_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_PostfixIterator)
SWIGINTERN PyGetSetDef SwigPyBuiltin__stree__PostfixIterator_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__stree__PostfixIterator_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  switch (op) {
    case Py_EQ : result = _wrap_STreeNode___eq__(self, other); break;
    case Py_LT : result = _wrap_STreeNode___lt__(self, other); break;
    default : break;
  }
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__stree__PostfixIterator_methods[] = {
  { "next", (PyCFunction) _wrap_PostfixIterator_next, METH_NOARGS, (char*) "next()" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__stree__PostfixIterator_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "tomlib.PostfixIterator",                 /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_PostfixIterator_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__stree__PostfixIterator_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__stree__PostfixIterator_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__stree__PostfixIterator_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__stree__PostfixIterator_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "stree::PostfixIterator",                 /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__stree__PostfixIterator_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__stree__PostfixIterator_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__stree__PostfixIterator_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_PostfixIterator,     /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__stree__PostfixIterator_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__stree__PostfixIterator_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_DFSIterator)
SWIGINTERN PyGetSetDef SwigPyBuiltin__stree__DFSIterator_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__stree__DFSIterator_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  switch (op) {
    case Py_EQ : result = _wrap_STreeNode___eq__(self, other); break;
    case Py_LT : result = _wrap_STreeNode___lt__(self, other); break;
    default : break;
  }
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__stree__DFSIterator_methods[] = {
  { "next", (PyCFunction) _wrap_DFSIterator_next, METH_NOARGS, (char*) "next()" },
  { "isFirstVisit", (PyCFunction) _wrap_DFSIterator_isFirstVisit, METH_NOARGS, (char*) "isFirstVisit() -> bool" },
  { "setUpPass", (PyCFunction) _wrap_DFSIterator_setUpPass, METH_NOARGS, (char*) "setUpPass()" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__stree__DFSIterator_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "tomlib.DFSIterator",                     /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_DFSIterator_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__stree__DFSIterator_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__stree__DFSIterator_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__stree__DFSIterator_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__stree__DFSIterator_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "stree::DFSIterator",                     /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__stree__DFSIterator_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__stree__DFSIterator_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__stree__DFSIterator_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_DFSIterator,         /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__stree__DFSIterator_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__stree__DFSIterator_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Estimator)
static SwigPyGetSet Estimator_nO__getset = { _wrap_Estimator_nO__get, _wrap_Estimator_nO__set };
static SwigPyGetSet Estimator_addToVariance__getset = { _wrap_Estimator_addToVariance__get, _wrap_Estimator_addToVariance__set };
static SwigPyGetSet Estimator_minimumVariance__getset = { _wrap_Estimator_minimumVariance__get, _wrap_Estimator_minimumVariance__set };
static SwigPyGetSet Estimator_applyExponentToVariance__getset = { _wrap_Estimator_applyExponentToVariance__get, _wrap_Estimator_applyExponentToVariance__set };
static SwigPyGetSet Estimator_nU__getset = { _wrap_Estimator_nU__get, _wrap_Estimator_nU__set };
static SwigPyGetSet Estimator_nPseudoCounts__getset = { _wrap_Estimator_nPseudoCounts__get, _wrap_Estimator_nPseudoCounts__set };
static SwigPyGetSet Estimator_zConfidenceIntervalSize__getset = { _wrap_Estimator_zConfidenceIntervalSize__get, _wrap_Estimator_zConfidenceIntervalSize__set };
static SwigPyGetSet Estimator_len__getset = { _wrap_Estimator_len__get, _wrap_Estimator_len__set };
static SwigPyGetSet Estimator_uProbs__getset = { _wrap_Estimator_uProbs__get, _wrap_Estimator_uProbs__set };
SWIGINTERN PyGetSetDef SwigPyBuiltin__tom__Estimator_getset[] = {
    { (char*) "nO_", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"tom::Estimator.nO_", (void*) &Estimator_nO__getset }
,
    { (char*) "addToVariance_", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"tom::Estimator.addToVariance_", (void*) &Estimator_addToVariance__getset }
,
    { (char*) "minimumVariance_", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"tom::Estimator.minimumVariance_", (void*) &Estimator_minimumVariance__getset }
,
    { (char*) "applyExponentToVariance_", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"tom::Estimator.applyExponentToVariance_", (void*) &Estimator_applyExponentToVariance__getset }
,
    { (char*) "nU_", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"tom::Estimator.nU_", (void*) &Estimator_nU__getset }
,
    { (char*) "nPseudoCounts_", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"tom::Estimator.nPseudoCounts_", (void*) &Estimator_nPseudoCounts__getset }
,
    { (char*) "zConfidenceIntervalSize_", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"tom::Estimator.zConfidenceIntervalSize_", (void*) &Estimator_zConfidenceIntervalSize__getset }
,
    { (char*) "len_", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"tom::Estimator.len_", (void*) &Estimator_len__getset }
,
    { (char*) "uProbs_", (getter) SwigPyBuiltin_FunpackGetterClosure, (setter) SwigPyBuiltin_FunpackSetterClosure, (char*)"tom::Estimator.uProbs_", (void*) &Estimator_uProbs__getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__tom__Estimator_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__tom__Estimator_methods[] = {
  { "nU", (PyCFunction) _wrap_Estimator_nU, METH_NOARGS, (char*) "nU() -> unsigned int" },
  { "nO", (PyCFunction) _wrap_Estimator_nO, METH_NOARGS, (char*) "nO() -> unsigned int" },
  { "f", (PyCFunction) _wrap_Estimator_f, METH_VARARGS, (char*) "\n"
		"f(Sequence seq) -> double\n"
		"f(Eigen::MatrixXd & F, Sequences chaSeqs, Sequences indSeqs)\n"
		"f(Eigen::MatrixXd & F, Sequences chaSeqs, Sequences indSeqs, tom::Symbol o, tom::Symbol u=0)\n"
		"f(Eigen::MatrixXd & F, Sequences chaSeqs, Sequences indSeqs, tom::Symbol o)\n"
		"" },
  { "v", (PyCFunction) _wrap_Estimator_v, METH_VARARGS, (char*) "\n"
		"v(Sequence seq) -> double\n"
		"v(Eigen::MatrixXd & V, Sequences chaSeqs, Sequences indSeqs)\n"
		"v(Eigen::MatrixXd & V, Sequences chaSeqs, Sequences indSeqs, tom::Symbol o, tom::Symbol u=0)\n"
		"v(Eigen::MatrixXd & V, Sequences chaSeqs, Sequences indSeqs, tom::Symbol o)\n"
		"" },
  { "fv", (PyCFunction) _wrap_Estimator_fv, METH_VARARGS, (char*) "\n"
		"fv(Sequences chaSeqs, Sequences indSeqs)\n"
		"fv(Sequences chaSeqs, Sequences indSeqs, tom::Symbol o, tom::Symbol u=0)\n"
		"fv(Sequences chaSeqs, Sequences indSeqs, tom::Symbol o)\n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__tom__Estimator_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "tomlib.Estimator",                       /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_Estimator_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__tom__Estimator_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__tom__Estimator_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__tom__Estimator_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__tom__Estimator_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "tom::Estimator",                         /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__tom__Estimator_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__tom__Estimator_methods,    /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__tom__Estimator_getset,     /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_Estimator,           /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__tom__Estimator_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__tom__Estimator_type};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_stree__STreeEdgeTo_p_stree__STreeNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stree::STreeNode *)  ((stree::STreeEdge *) x));
}
static void *_p_stree__PrefixIteratorTo_p_stree__STreeNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stree::STreeNode *) (stree::STreePath *) ((stree::PrefixIterator *) x));
}
static void *_p_stree__PostfixIteratorTo_p_stree__STreeNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stree::STreeNode *) (stree::STreePath *) ((stree::PostfixIterator *) x));
}
static void *_p_stree__DFSIteratorTo_p_stree__STreeNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stree::STreeNode *) (stree::STreePath *) ((stree::DFSIterator *) x));
}
static void *_p_stree__STreePathTo_p_stree__STreeNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stree::STreeNode *)  ((stree::STreePath *) x));
}
static void *_p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *) (std::basic_ios< char > *) ((std::basic_ostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *) (std::basic_ios< char > *) ((std::basic_istream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *) (std::basic_ios< char > *)(std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *)  ((std::basic_ios< char,std::char_traits< char > > *) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios< char > *) ((std::basic_ostream< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios< char > *) ((std::basic_istream< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios< char > *)(std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &))  ((std::basic_ios< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &))  ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &))  ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)) x));
}
static void *_p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *)  ((std::basic_ostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *)  ((std::basic_istream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *) (std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ostream< char,std::char_traits< char > > *)  ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_istreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_istream< char,std::char_traits< char > > *)  ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &))  ((std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &))  ((std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) (std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) x));
}
static void *_p_stree__PrefixIteratorTo_p_stree__STreePath(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stree::STreePath *)  ((stree::PrefixIterator *) x));
}
static void *_p_stree__PostfixIteratorTo_p_stree__STreePath(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stree::STreePath *)  ((stree::PostfixIterator *) x));
}
static void *_p_stree__DFSIteratorTo_p_stree__STreePath(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stree::STreePath *)  ((stree::DFSIterator *) x));
}
static swig_type_info _swigt__p_Eigen__ArrayT_double_Eigen__Dynamic_1_t = {"_p_Eigen__ArrayT_double_Eigen__Dynamic_1_t", "Eigen::Array< double,Eigen::Dynamic,1 > *|Eigen::ArrayXd *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__ArrayT_double_Eigen__Dynamic_Eigen__Dynamic_t = {"_p_Eigen__ArrayT_double_Eigen__Dynamic_Eigen__Dynamic_t", "Eigen::Array< double,Eigen::Dynamic,Eigen::Dynamic > *|Eigen::ArrayXXd *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__ArrayT_float_Eigen__Dynamic_1_t = {"_p_Eigen__ArrayT_float_Eigen__Dynamic_1_t", "Eigen::Array< float,Eigen::Dynamic,1 > *|Eigen::ArrayXf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__ArrayT_float_Eigen__Dynamic_Eigen__Dynamic_t = {"_p_Eigen__ArrayT_float_Eigen__Dynamic_Eigen__Dynamic_t", "Eigen::Array< float,Eigen::Dynamic,Eigen::Dynamic > *|Eigen::ArrayXXf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__ArrayT_int_Eigen__Dynamic_1_t = {"_p_Eigen__ArrayT_int_Eigen__Dynamic_1_t", "Eigen::Array< int,Eigen::Dynamic,1 > *|Eigen::ArrayXi *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__ArrayT_int_Eigen__Dynamic_Eigen__Dynamic_t = {"_p_Eigen__ArrayT_int_Eigen__Dynamic_Eigen__Dynamic_t", "Eigen::Array< int,Eigen::Dynamic,Eigen::Dynamic > *|Eigen::ArrayXXi *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MapT_Eigen__ArrayT_double_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t = {"_p_Eigen__MapT_Eigen__ArrayT_double_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t", "Eigen::Map< Eigen::Array< double,Eigen::Dynamic,1 >,0,Eigen::InnerStride< Eigen::Dynamic > > *|ArrayMd *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MapT_Eigen__ArrayT_double_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t = {"_p_Eigen__MapT_Eigen__ArrayT_double_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t", "ArrayMMd *|Eigen::Map< Eigen::Array< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MapT_Eigen__ArrayT_float_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t = {"_p_Eigen__MapT_Eigen__ArrayT_float_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t", "ArrayMf *|Eigen::Map< Eigen::Array< float,Eigen::Dynamic,1 >,0,Eigen::InnerStride< Eigen::Dynamic > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MapT_Eigen__ArrayT_float_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t = {"_p_Eigen__MapT_Eigen__ArrayT_float_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t", "ArrayMMf *|Eigen::Map< Eigen::Array< float,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MapT_Eigen__ArrayT_int_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t = {"_p_Eigen__MapT_Eigen__ArrayT_int_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t", "Eigen::Map< Eigen::Array< int,Eigen::Dynamic,1 >,0,Eigen::InnerStride< Eigen::Dynamic > > *|ArrayMi *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MapT_Eigen__ArrayT_int_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t = {"_p_Eigen__MapT_Eigen__ArrayT_int_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t", "ArrayMMi *|Eigen::Map< Eigen::Array< int,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MapT_Eigen__ArrayT_long_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t = {"_p_Eigen__MapT_Eigen__ArrayT_long_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t", "ArrayMl *|Eigen::Map< Eigen::Array< long,Eigen::Dynamic,1 >,0,Eigen::InnerStride< Eigen::Dynamic > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MapT_Eigen__ArrayT_long_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t = {"_p_Eigen__MapT_Eigen__ArrayT_long_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t", "Eigen::Map< Eigen::Array< long,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > *|ArrayMMl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MapT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t = {"_p_Eigen__MapT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t", "Eigen::Map< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > *|MatrixMd *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MapT_Eigen__MatrixT_float_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t = {"_p_Eigen__MapT_Eigen__MatrixT_float_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t", "MatrixMf *|Eigen::Map< Eigen::Matrix< float,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MapT_Eigen__MatrixT_int_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t = {"_p_Eigen__MapT_Eigen__MatrixT_int_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t", "Eigen::Map< Eigen::Matrix< int,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > *|MatrixMi *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MapT_Eigen__MatrixT_long_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t = {"_p_Eigen__MapT_Eigen__MatrixT_long_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t", "MatrixMl *|Eigen::Map< Eigen::Matrix< long,Eigen::Dynamic,Eigen::Dynamic >,0,Eigen::Stride< Eigen::Dynamic,Eigen::Dynamic > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MatrixBaseT_Eigen__MapT_Eigen__ArrayT_double_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t_t = {"_p_Eigen__MatrixBaseT_Eigen__MapT_Eigen__ArrayT_double_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t_t", "Eigen::MatrixBase< Eigen::Map< Eigen::Array< double,Eigen::Dynamic,1 >,0,Eigen::InnerStride< Eigen::Dynamic > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MatrixBaseT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_t_t = {"_p_Eigen__MatrixBaseT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_t_t", "Eigen::MatrixBase< Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MatrixT_double_1_Eigen__Dynamic_t = {"_p_Eigen__MatrixT_double_1_Eigen__Dynamic_t", "Eigen::RowVectorXd *|Eigen::Matrix< double,1,Eigen::Dynamic > *|tom::rvec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MatrixT_double_Eigen__Dynamic_1_t = {"_p_Eigen__MatrixT_double_Eigen__Dynamic_1_t", "Eigen::Matrix< double,Eigen::Dynamic,1 > *|Eigen::VectorXd *|tom::vec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_t = {"_p_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_t", "Eigen::Matrix< double,Eigen::Dynamic,Eigen::Dynamic > *|tom::mat *|Eigen::MatrixXd *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MatrixT_float_1_Eigen__Dynamic_t = {"_p_Eigen__MatrixT_float_1_Eigen__Dynamic_t", "Eigen::RowVectorXf *|Eigen::Matrix< float,1,Eigen::Dynamic > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MatrixT_float_Eigen__Dynamic_1_t = {"_p_Eigen__MatrixT_float_Eigen__Dynamic_1_t", "Eigen::Matrix< float,Eigen::Dynamic,1 > *|Eigen::VectorXf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MatrixT_float_Eigen__Dynamic_Eigen__Dynamic_t = {"_p_Eigen__MatrixT_float_Eigen__Dynamic_Eigen__Dynamic_t", "Eigen::Matrix< float,Eigen::Dynamic,Eigen::Dynamic > *|Eigen::MatrixXf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MatrixT_int_1_Eigen__Dynamic_t = {"_p_Eigen__MatrixT_int_1_Eigen__Dynamic_t", "Eigen::RowVectorXi *|tom::irvec *|Eigen::Matrix< int,1,Eigen::Dynamic > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MatrixT_int_Eigen__Dynamic_1_t = {"_p_Eigen__MatrixT_int_Eigen__Dynamic_1_t", "Eigen::Matrix< int,Eigen::Dynamic,1 > *|tom::ivec *|Eigen::VectorXi *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MatrixT_int_Eigen__Dynamic_Eigen__Dynamic_t = {"_p_Eigen__MatrixT_int_Eigen__Dynamic_Eigen__Dynamic_t", "Eigen::Matrix< int,Eigen::Dynamic,Eigen::Dynamic > *|Eigen::MatrixXi *|tom::imat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__MatrixXcd = {"_p_Eigen__MatrixXcd", "Eigen::MatrixXcd *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Eigen__VectorXcd = {"_p_Eigen__VectorXcd", "Eigen::VectorXcd *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SwigPyObject = {"_p_SwigPyObject", "SwigPyObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "std::basic_istream< char >::char_type *|char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char_type = {"_p_char_type", "char_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *|tom::Real *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void = {"_p_f_enum_std__ios_base__event_r_std__ios_base_int__void", "void (*)(enum std::ios_base::event,std::ios_base &,int)|std::ios_base::event_callback", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t", "std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t", "std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t", "std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__ios_base = {"_p_f_r_std__ios_base__r_std__ios_base", "std::ios_base &(*)(std::ios_base &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_first_type = {"_p_first_type", "first_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fmtflags = {"_p_fmtflags", "fmtflags *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "stree::Char *|intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|tom::Symbol *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int_type = {"_p_int_type", "int_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iostate = {"_p_iostate", "iostate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_double = {"_p_long_double", "long double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_off_type = {"_p_off_type", "off_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_openmode = {"_p_openmode", "openmode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pos_type = {"_p_pos_type", "pos_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_second_type = {"_p_second_type", "second_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_seekdir = {"_p_seekdir", "seekdir *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "std::streamsize *|size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_state_type = {"_p_state_type", "state_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_double_t = {"_p_std__allocatorT_double_t", "std::vector< double >::allocator_type *|std::allocator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_int_t = {"_p_std__allocatorT_int_t", "std::vector< int >::allocator_type *|std::allocator< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_tom__Sequence_t = {"_p_std__allocatorT_tom__Sequence_t", "std::vector< tom::Sequence >::allocator_type *|std::allocator< tom::Sequence > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_unsigned_int_t = {"_p_std__allocatorT_unsigned_int_t", "std::vector< unsigned int >::allocator_type *|std::allocator< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t = {"_p_std__basic_iosT_char_std__char_traitsT_char_t_t", "std::basic_ios< char > *|std::basic_ios< char,std::char_traits< char > > *|std::ios *", 0, 0, (void*)&SwigPyBuiltin__std__basic_iosT_char_t_clientdata, 0};
static swig_type_info _swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t", "std::basic_iostream< char,std::char_traits< char > > *|std::basic_iostream< char > *|std::iostream *", 0, 0, (void*)&SwigPyBuiltin__std__basic_iostreamT_char_t_clientdata, 0};
static swig_type_info _swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_istreamT_char_std__char_traitsT_char_t_t", "std::basic_istream< char > *|std::basic_istream< char,std::char_traits< char > > *|std::istream *", 0, 0, (void*)&SwigPyBuiltin__std__basic_istreamT_char_t_clientdata, 0};
static swig_type_info _swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t", "std::basic_ostream< char > *|std::basic_ostream< char,std::char_traits< char > > *|std::ostream *", 0, 0, (void*)&SwigPyBuiltin__std__basic_ostreamT_char_t_clientdata, 0};
static swig_type_info _swigt__p_std__basic_streambufT_char_std__char_traitsT_char_t_t = {"_p_std__basic_streambufT_char_std__char_traitsT_char_t_t", "std::basic_streambuf< char,std::char_traits< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t = {"_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t", "std::basic_string< char,std::char_traits< char >,std::allocator< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ios_base = {"_p_std__ios_base", "std::ios_base *", 0, 0, (void*)&SwigPyBuiltin__std__ios_base_clientdata, 0};
static swig_type_info _swigt__p_std__locale = {"_p_std__locale", "std::locale *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_int_int_t = {"_p_std__pairT_int_int_t", "std::pair< int,int > *", 0, 0, (void*)&SwigPyBuiltin__std__pairT_int_int_t_clientdata, 0};
static swig_type_info _swigt__p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t = {"_p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t", "std::shared_ptr< std::vector< unsigned int > > *|std::shared_ptr< std::vector< stree::Nidx > > *|std::shared_ptr< std::vector< stree::Nidx,std::allocator< stree::Nidx > > > *", 0, 0, (void*)&SwigPyBuiltin__std__vectorT_stree__Nidx_t_clientdata, 0};
static swig_type_info _swigt__p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t = {"_p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t", "std::shared_ptr< std::vector< tom::Sequence > > *|std::shared_ptr< std::vector< tom::Sequence,std::allocator< tom::Sequence > > > *|std::shared_ptr< tom::Sequences > *", 0, 0, (void*)&SwigPyBuiltin__std__vectorT_tom__Sequence_t_clientdata, 0};
static swig_type_info _swigt__p_std__shared_ptrT_stree__STree_t = {"_p_std__shared_ptrT_stree__STree_t", "std::shared_ptr< stree::STree > *", 0, 0, (void*)&SwigPyBuiltin__stree__STree_clientdata, 0};
static swig_type_info _swigt__p_std__shared_ptrT_tom__Hmm_t = {"_p_std__shared_ptrT_tom__Hmm_t", "std::shared_ptr< tom::Hmm > *", 0, 0, (void*)&SwigPyBuiltin__tom__Hmm_clientdata, 0};
static swig_type_info _swigt__p_std__shared_ptrT_tom__Oom_t = {"_p_std__shared_ptrT_tom__Oom_t", "std::shared_ptr< tom::Oom > *", 0, 0, (void*)&SwigPyBuiltin__tom__Oom_clientdata, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|std::vector< double > *", 0, 0, (void*)&SwigPyBuiltin__std__vectorT_double_t_clientdata, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t = {"_p_std__vectorT_int_std__allocatorT_int_t_t", "std::vector< int,std::allocator< int > > *|std::vector< int > *", 0, 0, (void*)&SwigPyBuiltin__std__vectorT_int_t_clientdata, 0};
static swig_type_info _swigt__p_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t = {"_p_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t", "tom::Sequences *|std::vector< tom::Sequence > *|std::vector< tom::Sequence,std::allocator< tom::Sequence > > *", 0, 0, (void*)&SwigPyBuiltin__std__vectorT_tom__Sequence_t_clientdata, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t = {"_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t", "std::vector< stree::Nidx > *|std::vector< unsigned int,std::allocator< unsigned int > > *|std::vector< unsigned int > *", 0, 0, (void*)&SwigPyBuiltin__std__vectorT_stree__Nidx_t_clientdata, 0};
static swig_type_info _swigt__p_streamoff = {"_p_streamoff", "std::basic_ostream< char >::off_type *|std::basic_istream< char >::off_type *|streamoff *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_streampos = {"_p_streampos", "std::basic_ostream< char >::pos_type *|std::basic_istream< char >::pos_type *|streampos *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_stree__DFSIterator = {"_p_stree__DFSIterator", "stree::DFSIterator *", 0, 0, (void*)&SwigPyBuiltin__stree__DFSIterator_clientdata, 0};
static swig_type_info _swigt__p_stree__PostfixIterator = {"_p_stree__PostfixIterator", "stree::PostfixIterator *", 0, 0, (void*)&SwigPyBuiltin__stree__PostfixIterator_clientdata, 0};
static swig_type_info _swigt__p_stree__PrefixIterator = {"_p_stree__PrefixIterator", "stree::PrefixIterator *", 0, 0, (void*)&SwigPyBuiltin__stree__PrefixIterator_clientdata, 0};
static swig_type_info _swigt__p_stree__STree = {"_p_stree__STree", "stree::STree *", 0, 0, (void*)&SwigPyBuiltin__stree__STree_clientdata, 0};
static swig_type_info _swigt__p_stree__STreeEdge = {"_p_stree__STreeEdge", "stree::STreeEdge *", 0, 0, (void*)&SwigPyBuiltin__stree__STreeEdge_clientdata, 0};
static swig_type_info _swigt__p_stree__STreeNode = {"_p_stree__STreeNode", "stree::STreeNode *", 0, 0, (void*)&SwigPyBuiltin__stree__STreeNode_clientdata, 0};
static swig_type_info _swigt__p_stree__STreePath = {"_p_stree__STreePath", "stree::STreePath *", 0, 0, (void*)&SwigPyBuiltin__stree__STreePath_clientdata, 0};
static swig_type_info _swigt__p_stree__STreePos = {"_p_stree__STreePos", "stree::STreePos *", 0, 0, (void*)&SwigPyBuiltin__stree__STreePos_clientdata, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)&SwigPyBuiltin__swig__SwigPyIterator_clientdata, 0};
static swig_type_info _swigt__p_tom__EMStopCondition = {"_p_tom__EMStopCondition", "tom::EMStopCondition *", 0, 0, (void*)&SwigPyBuiltin__tom__EMStopCondition_clientdata, 0};
static swig_type_info _swigt__p_tom__Estimator = {"_p_tom__Estimator", "tom::Estimator *", 0, 0, (void*)&SwigPyBuiltin__tom__Estimator_clientdata, 0};
static swig_type_info _swigt__p_tom__Hmm = {"_p_tom__Hmm", "tom::Hmm *", 0, 0, (void*)&SwigPyBuiltin__tom__Hmm_clientdata, 0};
static swig_type_info _swigt__p_tom__Oom = {"_p_tom__Oom", "tom::Oom *", 0, 0, (void*)&SwigPyBuiltin__tom__Oom_clientdata, 0};
static swig_type_info _swigt__p_tom__Policy = {"_p_tom__Policy", "tom::Policy *", 0, 0, (void*)&SwigPyBuiltin__tom__Policy_clientdata, 0};
static swig_type_info _swigt__p_tom__Random = {"_p_tom__Random", "tom::Random *", 0, 0, (void*)&SwigPyBuiltin__tom__Random_clientdata, 0};
static swig_type_info _swigt__p_tom__Sequence = {"_p_tom__Sequence", "std::vector< tom::Sequence >::value_type *|tom::Sequence *|stree::String *", 0, 0, (void*)&SwigPyBuiltin__tom__Sequence_clientdata, 0};
static swig_type_info _swigt__p_traits_type = {"_p_traits_type", "traits_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|stree::Idx *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|uint_fast16_t *|stree::Nidx *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Eigen__ArrayT_double_Eigen__Dynamic_1_t,
  &_swigt__p_Eigen__ArrayT_double_Eigen__Dynamic_Eigen__Dynamic_t,
  &_swigt__p_Eigen__ArrayT_float_Eigen__Dynamic_1_t,
  &_swigt__p_Eigen__ArrayT_float_Eigen__Dynamic_Eigen__Dynamic_t,
  &_swigt__p_Eigen__ArrayT_int_Eigen__Dynamic_1_t,
  &_swigt__p_Eigen__ArrayT_int_Eigen__Dynamic_Eigen__Dynamic_t,
  &_swigt__p_Eigen__MapT_Eigen__ArrayT_double_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t,
  &_swigt__p_Eigen__MapT_Eigen__ArrayT_double_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t,
  &_swigt__p_Eigen__MapT_Eigen__ArrayT_float_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t,
  &_swigt__p_Eigen__MapT_Eigen__ArrayT_float_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t,
  &_swigt__p_Eigen__MapT_Eigen__ArrayT_int_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t,
  &_swigt__p_Eigen__MapT_Eigen__ArrayT_int_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t,
  &_swigt__p_Eigen__MapT_Eigen__ArrayT_long_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t,
  &_swigt__p_Eigen__MapT_Eigen__ArrayT_long_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t,
  &_swigt__p_Eigen__MapT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t,
  &_swigt__p_Eigen__MapT_Eigen__MatrixT_float_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t,
  &_swigt__p_Eigen__MapT_Eigen__MatrixT_int_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t,
  &_swigt__p_Eigen__MapT_Eigen__MatrixT_long_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t,
  &_swigt__p_Eigen__MatrixBaseT_Eigen__MapT_Eigen__ArrayT_double_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t_t,
  &_swigt__p_Eigen__MatrixBaseT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_t_t,
  &_swigt__p_Eigen__MatrixT_double_1_Eigen__Dynamic_t,
  &_swigt__p_Eigen__MatrixT_double_Eigen__Dynamic_1_t,
  &_swigt__p_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_t,
  &_swigt__p_Eigen__MatrixT_float_1_Eigen__Dynamic_t,
  &_swigt__p_Eigen__MatrixT_float_Eigen__Dynamic_1_t,
  &_swigt__p_Eigen__MatrixT_float_Eigen__Dynamic_Eigen__Dynamic_t,
  &_swigt__p_Eigen__MatrixT_int_1_Eigen__Dynamic_t,
  &_swigt__p_Eigen__MatrixT_int_Eigen__Dynamic_1_t,
  &_swigt__p_Eigen__MatrixT_int_Eigen__Dynamic_Eigen__Dynamic_t,
  &_swigt__p_Eigen__MatrixXcd,
  &_swigt__p_Eigen__VectorXcd,
  &_swigt__p_SwigPyObject,
  &_swigt__p_allocator_type,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_char_type,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__ios_base,
  &_swigt__p_first_type,
  &_swigt__p_float,
  &_swigt__p_fmtflags,
  &_swigt__p_int,
  &_swigt__p_int_type,
  &_swigt__p_iostate,
  &_swigt__p_long,
  &_swigt__p_long_double,
  &_swigt__p_long_long,
  &_swigt__p_off_type,
  &_swigt__p_openmode,
  &_swigt__p_p_PyObject,
  &_swigt__p_p_void,
  &_swigt__p_pos_type,
  &_swigt__p_second_type,
  &_swigt__p_seekdir,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_t,
  &_swigt__p_size_type,
  &_swigt__p_state_type,
  &_swigt__p_std__allocatorT_double_t,
  &_swigt__p_std__allocatorT_int_t,
  &_swigt__p_std__allocatorT_tom__Sequence_t,
  &_swigt__p_std__allocatorT_unsigned_int_t,
  &_swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_streambufT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__ios_base,
  &_swigt__p_std__locale,
  &_swigt__p_std__pairT_int_int_t,
  &_swigt__p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t,
  &_swigt__p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t,
  &_swigt__p_std__shared_ptrT_stree__STree_t,
  &_swigt__p_std__shared_ptrT_tom__Hmm_t,
  &_swigt__p_std__shared_ptrT_tom__Oom_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t,
  &_swigt__p_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t,
  &_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  &_swigt__p_streamoff,
  &_swigt__p_streampos,
  &_swigt__p_stree__DFSIterator,
  &_swigt__p_stree__PostfixIterator,
  &_swigt__p_stree__PrefixIterator,
  &_swigt__p_stree__STree,
  &_swigt__p_stree__STreeEdge,
  &_swigt__p_stree__STreeNode,
  &_swigt__p_stree__STreePath,
  &_swigt__p_stree__STreePos,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_tom__EMStopCondition,
  &_swigt__p_tom__Estimator,
  &_swigt__p_tom__Hmm,
  &_swigt__p_tom__Oom,
  &_swigt__p_tom__Policy,
  &_swigt__p_tom__Random,
  &_swigt__p_tom__Sequence,
  &_swigt__p_traits_type,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_Eigen__ArrayT_double_Eigen__Dynamic_1_t[] = {  {&_swigt__p_Eigen__ArrayT_double_Eigen__Dynamic_1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__ArrayT_double_Eigen__Dynamic_Eigen__Dynamic_t[] = {  {&_swigt__p_Eigen__ArrayT_double_Eigen__Dynamic_Eigen__Dynamic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__ArrayT_float_Eigen__Dynamic_1_t[] = {  {&_swigt__p_Eigen__ArrayT_float_Eigen__Dynamic_1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__ArrayT_float_Eigen__Dynamic_Eigen__Dynamic_t[] = {  {&_swigt__p_Eigen__ArrayT_float_Eigen__Dynamic_Eigen__Dynamic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__ArrayT_int_Eigen__Dynamic_1_t[] = {  {&_swigt__p_Eigen__ArrayT_int_Eigen__Dynamic_1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__ArrayT_int_Eigen__Dynamic_Eigen__Dynamic_t[] = {  {&_swigt__p_Eigen__ArrayT_int_Eigen__Dynamic_Eigen__Dynamic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MapT_Eigen__ArrayT_double_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t[] = {  {&_swigt__p_Eigen__MapT_Eigen__ArrayT_double_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MapT_Eigen__ArrayT_double_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t[] = {  {&_swigt__p_Eigen__MapT_Eigen__ArrayT_double_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MapT_Eigen__ArrayT_float_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t[] = {  {&_swigt__p_Eigen__MapT_Eigen__ArrayT_float_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MapT_Eigen__ArrayT_float_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t[] = {  {&_swigt__p_Eigen__MapT_Eigen__ArrayT_float_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MapT_Eigen__ArrayT_int_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t[] = {  {&_swigt__p_Eigen__MapT_Eigen__ArrayT_int_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MapT_Eigen__ArrayT_int_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t[] = {  {&_swigt__p_Eigen__MapT_Eigen__ArrayT_int_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MapT_Eigen__ArrayT_long_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t[] = {  {&_swigt__p_Eigen__MapT_Eigen__ArrayT_long_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MapT_Eigen__ArrayT_long_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t[] = {  {&_swigt__p_Eigen__MapT_Eigen__ArrayT_long_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MapT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t[] = {  {&_swigt__p_Eigen__MapT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MapT_Eigen__MatrixT_float_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t[] = {  {&_swigt__p_Eigen__MapT_Eigen__MatrixT_float_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MapT_Eigen__MatrixT_int_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t[] = {  {&_swigt__p_Eigen__MapT_Eigen__MatrixT_int_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MapT_Eigen__MatrixT_long_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t[] = {  {&_swigt__p_Eigen__MapT_Eigen__MatrixT_long_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MatrixBaseT_Eigen__MapT_Eigen__ArrayT_double_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t_t[] = {  {&_swigt__p_Eigen__MatrixBaseT_Eigen__MapT_Eigen__ArrayT_double_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MatrixBaseT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_t_t[] = {  {&_swigt__p_Eigen__MatrixBaseT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MatrixT_double_1_Eigen__Dynamic_t[] = {  {&_swigt__p_Eigen__MatrixT_double_1_Eigen__Dynamic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MatrixT_double_Eigen__Dynamic_1_t[] = {  {&_swigt__p_Eigen__MatrixT_double_Eigen__Dynamic_1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_t[] = {  {&_swigt__p_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MatrixT_float_1_Eigen__Dynamic_t[] = {  {&_swigt__p_Eigen__MatrixT_float_1_Eigen__Dynamic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MatrixT_float_Eigen__Dynamic_1_t[] = {  {&_swigt__p_Eigen__MatrixT_float_Eigen__Dynamic_1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MatrixT_float_Eigen__Dynamic_Eigen__Dynamic_t[] = {  {&_swigt__p_Eigen__MatrixT_float_Eigen__Dynamic_Eigen__Dynamic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MatrixT_int_1_Eigen__Dynamic_t[] = {  {&_swigt__p_Eigen__MatrixT_int_1_Eigen__Dynamic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MatrixT_int_Eigen__Dynamic_1_t[] = {  {&_swigt__p_Eigen__MatrixT_int_Eigen__Dynamic_1_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MatrixT_int_Eigen__Dynamic_Eigen__Dynamic_t[] = {  {&_swigt__p_Eigen__MatrixT_int_Eigen__Dynamic_Eigen__Dynamic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__MatrixXcd[] = {  {&_swigt__p_Eigen__MatrixXcd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Eigen__VectorXcd[] = {  {&_swigt__p_Eigen__VectorXcd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SwigPyObject[] = {  {&_swigt__p_SwigPyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char_type[] = {  {&_swigt__p_char_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_enum_std__ios_base__event_r_std__ios_base_int__void[] = {  {&_swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__ios_base[] = {  {&_swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__ios_base, 0, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_first_type[] = {  {&_swigt__p_first_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fmtflags[] = {  {&_swigt__p_fmtflags, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int_type[] = {  {&_swigt__p_int_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iostate[] = {  {&_swigt__p_iostate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_double[] = {  {&_swigt__p_long_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_off_type[] = {  {&_swigt__p_off_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_openmode[] = {  {&_swigt__p_openmode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pos_type[] = {  {&_swigt__p_pos_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_second_type[] = {  {&_swigt__p_second_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_seekdir[] = {  {&_swigt__p_seekdir, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_state_type[] = {  {&_swigt__p_state_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_double_t[] = {  {&_swigt__p_std__allocatorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_int_t[] = {  {&_swigt__p_std__allocatorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_tom__Sequence_t[] = {  {&_swigt__p_std__allocatorT_tom__Sequence_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_unsigned_int_t[] = {  {&_swigt__p_std__allocatorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_iosT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_streambufT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t[] = {  {&_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ios_base[] = {  {&_swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t, _p_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__ios_base, 0, 0, 0},  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__locale[] = {  {&_swigt__p_std__locale, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_int_int_t[] = {  {&_swigt__p_std__pairT_int_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t[] = {  {&_swigt__p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t[] = {  {&_swigt__p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_stree__STree_t[] = {  {&_swigt__p_std__shared_ptrT_stree__STree_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_tom__Hmm_t[] = {  {&_swigt__p_std__shared_ptrT_tom__Hmm_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_tom__Oom_t[] = {  {&_swigt__p_std__shared_ptrT_tom__Oom_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t[] = {  {&_swigt__p_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_streamoff[] = {  {&_swigt__p_streamoff, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_streampos[] = {  {&_swigt__p_streampos, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stree__DFSIterator[] = {  {&_swigt__p_stree__DFSIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stree__PostfixIterator[] = {  {&_swigt__p_stree__PostfixIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stree__PrefixIterator[] = {  {&_swigt__p_stree__PrefixIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stree__STree[] = {  {&_swigt__p_stree__STree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stree__STreeEdge[] = {  {&_swigt__p_stree__STreeEdge, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stree__STreeNode[] = {  {&_swigt__p_stree__STreeEdge, _p_stree__STreeEdgeTo_p_stree__STreeNode, 0, 0},  {&_swigt__p_stree__PrefixIterator, _p_stree__PrefixIteratorTo_p_stree__STreeNode, 0, 0},  {&_swigt__p_stree__PostfixIterator, _p_stree__PostfixIteratorTo_p_stree__STreeNode, 0, 0},  {&_swigt__p_stree__DFSIterator, _p_stree__DFSIteratorTo_p_stree__STreeNode, 0, 0},  {&_swigt__p_stree__STreePath, _p_stree__STreePathTo_p_stree__STreeNode, 0, 0},  {&_swigt__p_stree__STreeNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stree__STreePath[] = {  {&_swigt__p_stree__PrefixIterator, _p_stree__PrefixIteratorTo_p_stree__STreePath, 0, 0},  {&_swigt__p_stree__PostfixIterator, _p_stree__PostfixIteratorTo_p_stree__STreePath, 0, 0},  {&_swigt__p_stree__DFSIterator, _p_stree__DFSIteratorTo_p_stree__STreePath, 0, 0},  {&_swigt__p_stree__STreePath, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stree__STreePos[] = {  {&_swigt__p_stree__STreePos, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tom__EMStopCondition[] = {  {&_swigt__p_tom__EMStopCondition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tom__Estimator[] = {  {&_swigt__p_tom__Estimator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tom__Hmm[] = {  {&_swigt__p_tom__Hmm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tom__Oom[] = {  {&_swigt__p_tom__Oom, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tom__Policy[] = {  {&_swigt__p_tom__Policy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tom__Random[] = {  {&_swigt__p_tom__Random, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tom__Sequence[] = {  {&_swigt__p_tom__Sequence, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_traits_type[] = {  {&_swigt__p_traits_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Eigen__ArrayT_double_Eigen__Dynamic_1_t,
  _swigc__p_Eigen__ArrayT_double_Eigen__Dynamic_Eigen__Dynamic_t,
  _swigc__p_Eigen__ArrayT_float_Eigen__Dynamic_1_t,
  _swigc__p_Eigen__ArrayT_float_Eigen__Dynamic_Eigen__Dynamic_t,
  _swigc__p_Eigen__ArrayT_int_Eigen__Dynamic_1_t,
  _swigc__p_Eigen__ArrayT_int_Eigen__Dynamic_Eigen__Dynamic_t,
  _swigc__p_Eigen__MapT_Eigen__ArrayT_double_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t,
  _swigc__p_Eigen__MapT_Eigen__ArrayT_double_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t,
  _swigc__p_Eigen__MapT_Eigen__ArrayT_float_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t,
  _swigc__p_Eigen__MapT_Eigen__ArrayT_float_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t,
  _swigc__p_Eigen__MapT_Eigen__ArrayT_int_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t,
  _swigc__p_Eigen__MapT_Eigen__ArrayT_int_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t,
  _swigc__p_Eigen__MapT_Eigen__ArrayT_long_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t,
  _swigc__p_Eigen__MapT_Eigen__ArrayT_long_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t,
  _swigc__p_Eigen__MapT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t,
  _swigc__p_Eigen__MapT_Eigen__MatrixT_float_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t,
  _swigc__p_Eigen__MapT_Eigen__MatrixT_int_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t,
  _swigc__p_Eigen__MapT_Eigen__MatrixT_long_Eigen__Dynamic_Eigen__Dynamic_t_0_Eigen__StrideT_Eigen__Dynamic_Eigen__Dynamic_t_t,
  _swigc__p_Eigen__MatrixBaseT_Eigen__MapT_Eigen__ArrayT_double_Eigen__Dynamic_1_t_0_Eigen__InnerStrideT_Eigen__Dynamic_t_t_t,
  _swigc__p_Eigen__MatrixBaseT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_t_t,
  _swigc__p_Eigen__MatrixT_double_1_Eigen__Dynamic_t,
  _swigc__p_Eigen__MatrixT_double_Eigen__Dynamic_1_t,
  _swigc__p_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_t,
  _swigc__p_Eigen__MatrixT_float_1_Eigen__Dynamic_t,
  _swigc__p_Eigen__MatrixT_float_Eigen__Dynamic_1_t,
  _swigc__p_Eigen__MatrixT_float_Eigen__Dynamic_Eigen__Dynamic_t,
  _swigc__p_Eigen__MatrixT_int_1_Eigen__Dynamic_t,
  _swigc__p_Eigen__MatrixT_int_Eigen__Dynamic_1_t,
  _swigc__p_Eigen__MatrixT_int_Eigen__Dynamic_Eigen__Dynamic_t,
  _swigc__p_Eigen__MatrixXcd,
  _swigc__p_Eigen__VectorXcd,
  _swigc__p_SwigPyObject,
  _swigc__p_allocator_type,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_char_type,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_f_enum_std__ios_base__event_r_std__ios_base_int__void,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__ios_base,
  _swigc__p_first_type,
  _swigc__p_float,
  _swigc__p_fmtflags,
  _swigc__p_int,
  _swigc__p_int_type,
  _swigc__p_iostate,
  _swigc__p_long,
  _swigc__p_long_double,
  _swigc__p_long_long,
  _swigc__p_off_type,
  _swigc__p_openmode,
  _swigc__p_p_PyObject,
  _swigc__p_p_void,
  _swigc__p_pos_type,
  _swigc__p_second_type,
  _swigc__p_seekdir,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_t,
  _swigc__p_size_type,
  _swigc__p_state_type,
  _swigc__p_std__allocatorT_double_t,
  _swigc__p_std__allocatorT_int_t,
  _swigc__p_std__allocatorT_tom__Sequence_t,
  _swigc__p_std__allocatorT_unsigned_int_t,
  _swigc__p_std__basic_iosT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_streambufT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__ios_base,
  _swigc__p_std__locale,
  _swigc__p_std__pairT_int_int_t,
  _swigc__p_std__shared_ptrT_std__vectorT_stree__Nidx_std__allocatorT_stree__Nidx_t_t_t,
  _swigc__p_std__shared_ptrT_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t_t,
  _swigc__p_std__shared_ptrT_stree__STree_t,
  _swigc__p_std__shared_ptrT_tom__Hmm_t,
  _swigc__p_std__shared_ptrT_tom__Oom_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t,
  _swigc__p_std__vectorT_tom__Sequence_std__allocatorT_tom__Sequence_t_t,
  _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  _swigc__p_streamoff,
  _swigc__p_streampos,
  _swigc__p_stree__DFSIterator,
  _swigc__p_stree__PostfixIterator,
  _swigc__p_stree__PrefixIterator,
  _swigc__p_stree__STree,
  _swigc__p_stree__STreeEdge,
  _swigc__p_stree__STreeNode,
  _swigc__p_stree__STreePath,
  _swigc__p_stree__STreePos,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_tom__EMStopCondition,
  _swigc__p_tom__Estimator,
  _swigc__p_tom__Hmm,
  _swigc__p_tom__Oom,
  _swigc__p_tom__Policy,
  _swigc__p_tom__Random,
  _swigc__p_tom__Sequence,
  _swigc__p_traits_type,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{ SWIG_PY_POINTER, (char*)"endl_cb_ptr", 0, 0, (void *)((std::basic_ostream< char,std::char_traits< char > > & (*)(std::basic_ostream< char,std::char_traits< char > > &))(std::endl< char,std::char_traits< char > >)), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t },
{ SWIG_PY_POINTER, (char*)"ends_cb_ptr", 0, 0, (void *)((std::basic_ostream< char,std::char_traits< char > > & (*)(std::basic_ostream< char,std::char_traits< char > > &))(std::ends< char,std::char_traits< char > >)), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t },
{ SWIG_PY_POINTER, (char*)"flush_cb_ptr", 0, 0, (void *)((std::basic_ostream< char,std::char_traits< char > > & (*)(std::basic_ostream< char,std::char_traits< char > > &))(std::flush< char,std::char_traits< char > >)), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t },
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
static PyTypeObject *builtin_bases[4];

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "SHARED_PTR_DISOWN",SWIG_From_int(static_cast< int >(0)));
  
  /* type 'std::pair< int,int >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__std__pairT_int_int_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'IntIntPair'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "IntIntPair", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "IntIntPair");
  d = md;
  
  /* type 'swig::SwigPyIterator' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__swig__SwigPyIterator_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'SwigPyIterator'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "SwigPyIterator", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "SwigPyIterator");
  d = md;
  
  /* type 'std::vector< int >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__std__vectorT_int_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'IntVector'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "IntVector", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "IntVector");
  d = md;
  
  /* type 'std::vector< double >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__std__vectorT_double_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'DoubleVector'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "DoubleVector", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "DoubleVector");
  d = md;
  
  /* type 'std::ios_base' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__std__ios_base_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  PyDict_SetItemString(md,(char*)"cvar", SWIG_globals());
  SwigPyBuiltin_AddPublicSymbol(public_interface, "cvar");
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_boolalpha",Swig_var_ios_base_boolalpha_get, Swig_var_ios_base_boolalpha_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_dec",Swig_var_ios_base_dec_get, Swig_var_ios_base_dec_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_fixed",Swig_var_ios_base_fixed_get, Swig_var_ios_base_fixed_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_hex",Swig_var_ios_base_hex_get, Swig_var_ios_base_hex_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_internal",Swig_var_ios_base_internal_get, Swig_var_ios_base_internal_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_left",Swig_var_ios_base_left_get, Swig_var_ios_base_left_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_oct",Swig_var_ios_base_oct_get, Swig_var_ios_base_oct_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_right",Swig_var_ios_base_right_get, Swig_var_ios_base_right_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_scientific",Swig_var_ios_base_scientific_get, Swig_var_ios_base_scientific_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_showbase",Swig_var_ios_base_showbase_get, Swig_var_ios_base_showbase_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_showpoint",Swig_var_ios_base_showpoint_get, Swig_var_ios_base_showpoint_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_showpos",Swig_var_ios_base_showpos_get, Swig_var_ios_base_showpos_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_skipws",Swig_var_ios_base_skipws_get, Swig_var_ios_base_skipws_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_unitbuf",Swig_var_ios_base_unitbuf_get, Swig_var_ios_base_unitbuf_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_uppercase",Swig_var_ios_base_uppercase_get, Swig_var_ios_base_uppercase_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_adjustfield",Swig_var_ios_base_adjustfield_get, Swig_var_ios_base_adjustfield_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_basefield",Swig_var_ios_base_basefield_get, Swig_var_ios_base_basefield_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_floatfield",Swig_var_ios_base_floatfield_get, Swig_var_ios_base_floatfield_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_badbit",Swig_var_ios_base_badbit_get, Swig_var_ios_base_badbit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_eofbit",Swig_var_ios_base_eofbit_get, Swig_var_ios_base_eofbit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_failbit",Swig_var_ios_base_failbit_get, Swig_var_ios_base_failbit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_goodbit",Swig_var_ios_base_goodbit_get, Swig_var_ios_base_goodbit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_app",Swig_var_ios_base_app_get, Swig_var_ios_base_app_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_ate",Swig_var_ios_base_ate_get, Swig_var_ios_base_ate_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_binary",Swig_var_ios_base_binary_get, Swig_var_ios_base_binary_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_ios_base_in",Swig_var_ios_base_ios_base_in_get, Swig_var_ios_base_ios_base_in_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_out",Swig_var_ios_base_out_get, Swig_var_ios_base_out_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_trunc",Swig_var_ios_base_trunc_get, Swig_var_ios_base_trunc_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_beg",Swig_var_ios_base_beg_get, Swig_var_ios_base_beg_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_cur",Swig_var_ios_base_cur_get, Swig_var_ios_base_cur_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_end",Swig_var_ios_base_end_get, Swig_var_ios_base_end_set);
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "erase_event",SWIG_From_int(static_cast< int >(std::ios_base::erase_event)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "imbue_event",SWIG_From_int(static_cast< int >(std::ios_base::imbue_event)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "copyfmt_event",SWIG_From_int(static_cast< int >(std::ios_base::copyfmt_event)));
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_ios_base_in_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_basefield_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_ate_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_unitbuf_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_out_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_app_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_beg_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_cur_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_oct_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_uppercase_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_internal_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_eofbit_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_skipws_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_failbit_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_showpoint_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_showpos_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_dec_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_binary_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_hex_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_showbase_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_right_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_boolalpha_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_goodbit_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_end_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_left_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_badbit_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_fixed_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_scientific_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_adjustfield_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_floatfield_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  static_getset = SwigPyStaticVar_new_getset(metatype, &ios_base_trunc_getset_def);
  PyDict_SetItemString(d, static_getset->d_getset->name, (PyObject*) static_getset);
  Py_DECREF(static_getset);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ios_base'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "ios_base", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "ios_base");
  d = md;
  
  /* type 'std::basic_ios< char >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__std__basic_iosT_char_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_std__ios_base");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData*) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData*) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ios' as base 'std::ios_base' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ios'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "ios", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "ios");
  d = md;
  SWIG_addvarlink(SWIG_globals(),(char*)"cin",Swig_var_cin_get, Swig_var_cin_set);
  PyDict_SetItemString(md, (char*)"cin", PyObject_GetAttrString(SWIG_globals(), "cin"));
  SwigPyBuiltin_AddPublicSymbol(public_interface, "cin");
  SWIG_addvarlink(SWIG_globals(),(char*)"cout",Swig_var_cout_get, Swig_var_cout_set);
  PyDict_SetItemString(md, (char*)"cout", PyObject_GetAttrString(SWIG_globals(), "cout"));
  SwigPyBuiltin_AddPublicSymbol(public_interface, "cout");
  SWIG_addvarlink(SWIG_globals(),(char*)"cerr",Swig_var_cerr_get, Swig_var_cerr_set);
  PyDict_SetItemString(md, (char*)"cerr", PyObject_GetAttrString(SWIG_globals(), "cerr"));
  SwigPyBuiltin_AddPublicSymbol(public_interface, "cerr");
  SWIG_addvarlink(SWIG_globals(),(char*)"clog",Swig_var_clog_get, Swig_var_clog_set);
  PyDict_SetItemString(md, (char*)"clog", PyObject_GetAttrString(SWIG_globals(), "clog"));
  SwigPyBuiltin_AddPublicSymbol(public_interface, "clog");
  
  /* type 'std::basic_ostream< char >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__std__basic_ostreamT_char_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_std__basic_iosT_char_std__char_traitsT_char_t_t");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData*) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData*) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ostream' as base 'std::basic_ios<(char)>' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ostream'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "ostream", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "ostream");
  d = md;
  
  /* type 'std::basic_istream< char >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__std__basic_istreamT_char_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_std__basic_iosT_char_std__char_traitsT_char_t_t");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData*) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData*) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'istream' as base 'std::basic_ios<(char)>' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'istream'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "istream", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "istream");
  d = md;
  
  /* type 'std::basic_iostream< char >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__std__basic_iostreamT_char_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_std__basic_istreamT_char_std__char_traitsT_char_t_t");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData*) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData*) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'iostream' as base 'std::basic_istream<(char)>' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_basetype = SWIG_MangledTypeQuery("_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData*) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData*) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'iostream' as base 'std::basic_ostream<(char)>' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'iostream'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "iostream", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "iostream");
  d = md;
  
  
  
  
  import_array();
  
  
  /* type 'tom::Random' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__tom__Random_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Random'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Random", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Random");
  d = md;
  SWIG_addvarlink(SWIG_globals(),(char*)"NoIndex",Swig_var_NoIndex_get, Swig_var_NoIndex_set);
  PyDict_SetItemString(md, (char*)"NoIndex", PyObject_GetAttrString(SWIG_globals(), "NoIndex"));
  SwigPyBuiltin_AddPublicSymbol(public_interface, "NoIndex");
  
  /* type 'tom::Sequence' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__tom__Sequence_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Sequence'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Sequence", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Sequence");
  d = md;
  
  /* type 'std::vector< tom::Sequence >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__std__vectorT_tom__Sequence_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Sequences'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Sequences", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Sequences");
  d = md;
  
  /* type 'tom::Policy' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__tom__Policy_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Policy'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Policy", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Policy");
  d = md;
  
  /* type 'tom::Oom' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__tom__Oom_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Oom'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Oom", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Oom");
  d = md;
  
  /* type 'tom::EMStopCondition' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__tom__EMStopCondition_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'EMStopCondition'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "EMStopCondition", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "EMStopCondition");
  d = md;
  
  /* type 'tom::Hmm' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__tom__Hmm_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Hmm'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Hmm", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Hmm");
  d = md;
  SWIG_addvarlink(SWIG_globals(),(char*)"VALID",Swig_var_VALID_get, Swig_var_VALID_set);
  PyDict_SetItemString(md, (char*)"VALID", PyObject_GetAttrString(SWIG_globals(), "VALID"));
  SwigPyBuiltin_AddPublicSymbol(public_interface, "VALID");
  SWIG_addvarlink(SWIG_globals(),(char*)"NODE",Swig_var_NODE_get, Swig_var_NODE_set);
  PyDict_SetItemString(md, (char*)"NODE", PyObject_GetAttrString(SWIG_globals(), "NODE"));
  SwigPyBuiltin_AddPublicSymbol(public_interface, "NODE");
  SWIG_addvarlink(SWIG_globals(),(char*)"COLOR",Swig_var_COLOR_get, Swig_var_COLOR_set);
  PyDict_SetItemString(md, (char*)"COLOR", PyObject_GetAttrString(SWIG_globals(), "COLOR"));
  SwigPyBuiltin_AddPublicSymbol(public_interface, "COLOR");
  SWIG_addvarlink(SWIG_globals(),(char*)"INDEX",Swig_var_INDEX_get, Swig_var_INDEX_set);
  PyDict_SetItemString(md, (char*)"INDEX", PyObject_GetAttrString(SWIG_globals(), "INDEX"));
  SwigPyBuiltin_AddPublicSymbol(public_interface, "INDEX");
  SWIG_addvarlink(SWIG_globals(),(char*)"ROOT",Swig_var_ROOT_get, Swig_var_ROOT_set);
  PyDict_SetItemString(md, (char*)"ROOT", PyObject_GetAttrString(SWIG_globals(), "ROOT"));
  SwigPyBuiltin_AddPublicSymbol(public_interface, "ROOT");
  
  /* type 'std::vector< stree::Nidx >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__std__vectorT_stree__Nidx_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'NidxVector'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "NidxVector", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "NidxVector");
  d = md;
  
  /* type 'stree::STree' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__stree__STree_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'STree'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "STree", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "STree");
  d = md;
  
  /* type 'stree::STreeNode' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__stree__STreeNode_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'STreeNode'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "STreeNode", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "STreeNode");
  d = md;
  
  /* type 'stree::STreeEdge' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__stree__STreeEdge_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_stree__STreeNode");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData*) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData*) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'STreeEdge' as base 'stree::STreeNode' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'STreeEdge'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "STreeEdge", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "STreeEdge");
  d = md;
  
  /* type 'stree::STreePath' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__stree__STreePath_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_stree__STreeNode");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData*) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData*) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'STreePath' as base 'stree::STreeNode' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'STreePath'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "STreePath", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "STreePath");
  d = md;
  
  /* type 'stree::STreePos' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__stree__STreePos_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'STreePos'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "STreePos", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "STreePos");
  d = md;
  
  /* type 'stree::PrefixIterator' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__stree__PrefixIterator_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_stree__STreePath");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData*) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData*) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'PrefixIterator' as base 'stree::STreePath' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'PrefixIterator'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "PrefixIterator", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "PrefixIterator");
  d = md;
  
  /* type 'stree::PostfixIterator' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__stree__PostfixIterator_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_stree__STreePath");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData*) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData*) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'PostfixIterator' as base 'stree::STreePath' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'PostfixIterator'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "PostfixIterator", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "PostfixIterator");
  d = md;
  
  /* type 'stree::DFSIterator' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__stree__DFSIterator_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_stree__STreePath");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData*) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData*) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'DFSIterator' as base 'stree::STreePath' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'DFSIterator'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "DFSIterator", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "DFSIterator");
  d = md;
  
  /* type 'tom::Estimator' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__tom__Estimator_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Estimator'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Estimator", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Estimator");
  d = md;
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

